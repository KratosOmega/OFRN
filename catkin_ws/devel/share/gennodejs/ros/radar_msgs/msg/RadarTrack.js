// Auto-generated. Do not edit!

// (in-package radar_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class RadarTrack {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.track_id = null;
      this.track_shape = null;
      this.linear_velocity = null;
      this.linear_acceleration = null;
    }
    else {
      if (initObj.hasOwnProperty('track_id')) {
        this.track_id = initObj.track_id
      }
      else {
        this.track_id = 0;
      }
      if (initObj.hasOwnProperty('track_shape')) {
        this.track_shape = initObj.track_shape
      }
      else {
        this.track_shape = new geometry_msgs.msg.Polygon();
      }
      if (initObj.hasOwnProperty('linear_velocity')) {
        this.linear_velocity = initObj.linear_velocity
      }
      else {
        this.linear_velocity = new geometry_msgs.msg.Vector3();
      }
      if (initObj.hasOwnProperty('linear_acceleration')) {
        this.linear_acceleration = initObj.linear_acceleration
      }
      else {
        this.linear_acceleration = new geometry_msgs.msg.Vector3();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type RadarTrack
    // Serialize message field [track_id]
    bufferOffset = _serializer.uint16(obj.track_id, buffer, bufferOffset);
    // Serialize message field [track_shape]
    bufferOffset = geometry_msgs.msg.Polygon.serialize(obj.track_shape, buffer, bufferOffset);
    // Serialize message field [linear_velocity]
    bufferOffset = geometry_msgs.msg.Vector3.serialize(obj.linear_velocity, buffer, bufferOffset);
    // Serialize message field [linear_acceleration]
    bufferOffset = geometry_msgs.msg.Vector3.serialize(obj.linear_acceleration, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type RadarTrack
    let len;
    let data = new RadarTrack(null);
    // Deserialize message field [track_id]
    data.track_id = _deserializer.uint16(buffer, bufferOffset);
    // Deserialize message field [track_shape]
    data.track_shape = geometry_msgs.msg.Polygon.deserialize(buffer, bufferOffset);
    // Deserialize message field [linear_velocity]
    data.linear_velocity = geometry_msgs.msg.Vector3.deserialize(buffer, bufferOffset);
    // Deserialize message field [linear_acceleration]
    data.linear_acceleration = geometry_msgs.msg.Vector3.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += geometry_msgs.msg.Polygon.getMessageSize(object.track_shape);
    return length + 50;
  }

  static datatype() {
    // Returns string type for a message object
    return 'radar_msgs/RadarTrack';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '371627dd284ddde5489009ee4498d083';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # All variables below are relative to the radar's frame of reference.
    # This message is not meant to be used alone but as part of a stamped or array message.
    
    uint16 track_id                             # The ID of this track generated by the radar. If
                                                # the radar does not generate IDs, this is intended as
                                                # a sequential identifier for each track in a scan.
    
    geometry_msgs/Polygon track_shape           # The shape and position of the detection. This polygon
                                                # encompasses a 2D plane which approximates the size and
                                                # shape of the detection based on the distance from the
                                                # radar, the detection angle, the width of all detections
                                                # grouped into this track, and the height of the radar's
                                                # vertical field of view at the detection distance.
    
    geometry_msgs/Vector3 linear_velocity       # Only the x and y components are valid.
    geometry_msgs/Vector3 linear_acceleration   # Only the x component is valid.
    
    ================================================================================
    MSG: geometry_msgs/Polygon
    #A specification of a polygon where the first and last points are assumed to be connected
    Point32[] points
    
    ================================================================================
    MSG: geometry_msgs/Point32
    # This contains the position of a point in free space(with 32 bits of precision).
    # It is recommeded to use Point wherever possible instead of Point32.  
    # 
    # This recommendation is to promote interoperability.  
    #
    # This message is designed to take up less space when sending
    # lots of points at once, as in the case of a PointCloud.  
    
    float32 x
    float32 y
    float32 z
    ================================================================================
    MSG: geometry_msgs/Vector3
    # This represents a vector in free space. 
    # It is only meant to represent a direction. Therefore, it does not
    # make sense to apply a translation to it (e.g., when applying a 
    # generic rigid transformation to a Vector3, tf2 will only apply the
    # rotation). If you want your data to be translatable too, use the
    # geometry_msgs/Point message instead.
    
    float64 x
    float64 y
    float64 z
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new RadarTrack(null);
    if (msg.track_id !== undefined) {
      resolved.track_id = msg.track_id;
    }
    else {
      resolved.track_id = 0
    }

    if (msg.track_shape !== undefined) {
      resolved.track_shape = geometry_msgs.msg.Polygon.Resolve(msg.track_shape)
    }
    else {
      resolved.track_shape = new geometry_msgs.msg.Polygon()
    }

    if (msg.linear_velocity !== undefined) {
      resolved.linear_velocity = geometry_msgs.msg.Vector3.Resolve(msg.linear_velocity)
    }
    else {
      resolved.linear_velocity = new geometry_msgs.msg.Vector3()
    }

    if (msg.linear_acceleration !== undefined) {
      resolved.linear_acceleration = geometry_msgs.msg.Vector3.Resolve(msg.linear_acceleration)
    }
    else {
      resolved.linear_acceleration = new geometry_msgs.msg.Vector3()
    }

    return resolved;
    }
};

module.exports = RadarTrack;
