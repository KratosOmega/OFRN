;; Auto-generated. Do not edit!


(when (boundp 'radar_msgs::RadarDetection)
  (if (not (find-package "RADAR_MSGS"))
    (make-package "RADAR_MSGS"))
  (shadow 'RadarDetection (find-package "RADAR_MSGS")))
(unless (find-package "RADAR_MSGS::RADARDETECTION")
  (make-package "RADAR_MSGS::RADARDETECTION"))

(in-package "ROS")
;;//! \htmlinclude RadarDetection.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass radar_msgs::RadarDetection
  :super ros::object
  :slots (_detection_id _position _velocity _amplitude ))

(defmethod radar_msgs::RadarDetection
  (:init
   (&key
    ((:detection_id __detection_id) 0)
    ((:position __position) (instance geometry_msgs::Point :init))
    ((:velocity __velocity) (instance geometry_msgs::Vector3 :init))
    ((:amplitude __amplitude) 0.0)
    )
   (send-super :init)
   (setq _detection_id (round __detection_id))
   (setq _position __position)
   (setq _velocity __velocity)
   (setq _amplitude (float __amplitude))
   self)
  (:detection_id
   (&optional __detection_id)
   (if __detection_id (setq _detection_id __detection_id)) _detection_id)
  (:position
   (&rest __position)
   (if (keywordp (car __position))
       (send* _position __position)
     (progn
       (if __position (setq _position (car __position)))
       _position)))
  (:velocity
   (&rest __velocity)
   (if (keywordp (car __velocity))
       (send* _velocity __velocity)
     (progn
       (if __velocity (setq _velocity (car __velocity)))
       _velocity)))
  (:amplitude
   (&optional __amplitude)
   (if __amplitude (setq _amplitude __amplitude)) _amplitude)
  (:serialization-length
   ()
   (+
    ;; uint16 _detection_id
    2
    ;; geometry_msgs/Point _position
    (send _position :serialization-length)
    ;; geometry_msgs/Vector3 _velocity
    (send _velocity :serialization-length)
    ;; float64 _amplitude
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint16 _detection_id
       (write-word _detection_id s)
     ;; geometry_msgs/Point _position
       (send _position :serialize s)
     ;; geometry_msgs/Vector3 _velocity
       (send _velocity :serialize s)
     ;; float64 _amplitude
       (sys::poke _amplitude (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint16 _detection_id
     (setq _detection_id (sys::peek buf ptr- :short)) (incf ptr- 2)
   ;; geometry_msgs/Point _position
     (send _position :deserialize buf ptr-) (incf ptr- (send _position :serialization-length))
   ;; geometry_msgs/Vector3 _velocity
     (send _velocity :deserialize buf ptr-) (incf ptr- (send _velocity :serialization-length))
   ;; float64 _amplitude
     (setq _amplitude (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get radar_msgs::RadarDetection :md5sum-) "5eb81a43632fa3ab61f658171a9b6c5b")
(setf (get radar_msgs::RadarDetection :datatype-) "radar_msgs/RadarDetection")
(setf (get radar_msgs::RadarDetection :definition-)
      "# All variables below are relative to the radar's frame of reference.
# This message is not meant to be used alone but as part of a stamped or array message.

uint16 detection_id                         # The ID of this detection generated by the radar. If
                                            # the radar does not generate IDs, this is intended as
                                            # a sequential identifier for each detection in a scan.

geometry_msgs/Point position                # Only the x and y components are valid.
geometry_msgs/Vector3 velocity              # range_rate rectangular transformation to x and y components
float64 amplitude                           # The detection amplitude in dB.

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :radar_msgs/RadarDetection "5eb81a43632fa3ab61f658171a9b6c5b")


