# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from derived_object_msgs/Lane.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Lane(genpy.Message):
  _md5sum = "62e190c228d8919a0a759f831c966092"
  _type = "derived_object_msgs/Lane"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Lane Definition Message
# Contains information on a single lane marker

uint8 quality                 # Visual quality of lane marker
uint8 LANE_QUALITY_INVALID = 0
uint8 LANE_QUALITY_UNKNOWN = 1
uint8 LANE_QUALITY_NOT_AVAILABLE = 2
uint8 LANE_QUALITY_0 = 3
uint8 LANE_QUALITY_1 = 4
uint8 LANE_QUALITY_2 = 5
uint8 LANE_QUALITY_3 = 6
uint8 LANE_QUALITY_4 = 7
uint8 LANE_QUALITY_5 = 8
uint8 LANE_QUALITY_6 = 9
uint8 LANE_QUALITY_7 = 10
uint8 LANE_QUALITY_8 = 11
uint8 LANE_QUALITY_9 = 12
uint8 LANE_QUALITY_KIND_COUNT = 13

uint8 marker_kind             # Solid, dashed, ...
uint8 LANE_MARKER_INVALID = 0
uint8 LANE_MARKER_UNKNOWN = 1
uint8 LANE_MARKER_NOT_AVAILABLE = 2
uint8 LANE_MARKER_NONE = 3
uint8 LANE_MARKER_SOLID = 4
uint8 LANE_MARKER_DASHED = 5
uint8 LANE_MARKER_VIRTUAL = 6
uint8 LANE_MARKER_DOTS = 7
uint8 LANE_MARKER_ROAD_EDGE = 8
uint8 LANE_MARKER_DOUBLE_LINE = 9
uint8 LANE_MARKER_KIND_COUNT = 10

uint8 curve_model_kind        # Order of equation
uint8 LANE_CURVE_MODEL_INVALID = 0
uint8 LANE_CURVE_MODEL_UNKNOWN = 1
uint8 LANE_CURVE_MODEL_NOT_AVAILABLE = 2
uint8 LANE_CURVE_MODEL_LINEAR = 3
uint8 LANE_CURVE_MODEL_PARABOLIC = 4
uint8 LANE_CURVE_MODEL_3D = 5
uint8 LANE_CURVE_MODEL_KIND_COUNT = 6

float64 marker_offset         # Lateral distance from sensor to marker (m)
float64 heading_angle         # Angle of marker relative to sensor (rad)
float64 curvature             # Curvature of the lane marker at the camera (1/m)
float64 curvature_derivative  # Amount curvature changes as you move away from the camera (1/m^2)

float64 marker_width          # Width of the painted marker (not distance between lane markers) (m)

float64 view_range            # Physical view range of the lane mark (m)

"""
  # Pseudo-constants
  LANE_QUALITY_INVALID = 0
  LANE_QUALITY_UNKNOWN = 1
  LANE_QUALITY_NOT_AVAILABLE = 2
  LANE_QUALITY_0 = 3
  LANE_QUALITY_1 = 4
  LANE_QUALITY_2 = 5
  LANE_QUALITY_3 = 6
  LANE_QUALITY_4 = 7
  LANE_QUALITY_5 = 8
  LANE_QUALITY_6 = 9
  LANE_QUALITY_7 = 10
  LANE_QUALITY_8 = 11
  LANE_QUALITY_9 = 12
  LANE_QUALITY_KIND_COUNT = 13
  LANE_MARKER_INVALID = 0
  LANE_MARKER_UNKNOWN = 1
  LANE_MARKER_NOT_AVAILABLE = 2
  LANE_MARKER_NONE = 3
  LANE_MARKER_SOLID = 4
  LANE_MARKER_DASHED = 5
  LANE_MARKER_VIRTUAL = 6
  LANE_MARKER_DOTS = 7
  LANE_MARKER_ROAD_EDGE = 8
  LANE_MARKER_DOUBLE_LINE = 9
  LANE_MARKER_KIND_COUNT = 10
  LANE_CURVE_MODEL_INVALID = 0
  LANE_CURVE_MODEL_UNKNOWN = 1
  LANE_CURVE_MODEL_NOT_AVAILABLE = 2
  LANE_CURVE_MODEL_LINEAR = 3
  LANE_CURVE_MODEL_PARABOLIC = 4
  LANE_CURVE_MODEL_3D = 5
  LANE_CURVE_MODEL_KIND_COUNT = 6

  __slots__ = ['quality','marker_kind','curve_model_kind','marker_offset','heading_angle','curvature','curvature_derivative','marker_width','view_range']
  _slot_types = ['uint8','uint8','uint8','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       quality,marker_kind,curve_model_kind,marker_offset,heading_angle,curvature,curvature_derivative,marker_width,view_range

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Lane, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.quality is None:
        self.quality = 0
      if self.marker_kind is None:
        self.marker_kind = 0
      if self.curve_model_kind is None:
        self.curve_model_kind = 0
      if self.marker_offset is None:
        self.marker_offset = 0.
      if self.heading_angle is None:
        self.heading_angle = 0.
      if self.curvature is None:
        self.curvature = 0.
      if self.curvature_derivative is None:
        self.curvature_derivative = 0.
      if self.marker_width is None:
        self.marker_width = 0.
      if self.view_range is None:
        self.view_range = 0.
    else:
      self.quality = 0
      self.marker_kind = 0
      self.curve_model_kind = 0
      self.marker_offset = 0.
      self.heading_angle = 0.
      self.curvature = 0.
      self.curvature_derivative = 0.
      self.marker_width = 0.
      self.view_range = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B6d().pack(_x.quality, _x.marker_kind, _x.curve_model_kind, _x.marker_offset, _x.heading_angle, _x.curvature, _x.curvature_derivative, _x.marker_width, _x.view_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 51
      (_x.quality, _x.marker_kind, _x.curve_model_kind, _x.marker_offset, _x.heading_angle, _x.curvature, _x.curvature_derivative, _x.marker_width, _x.view_range,) = _get_struct_3B6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B6d().pack(_x.quality, _x.marker_kind, _x.curve_model_kind, _x.marker_offset, _x.heading_angle, _x.curvature, _x.curvature_derivative, _x.marker_width, _x.view_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 51
      (_x.quality, _x.marker_kind, _x.curve_model_kind, _x.marker_offset, _x.heading_angle, _x.curvature, _x.curvature_derivative, _x.marker_width, _x.view_range,) = _get_struct_3B6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B6d = None
def _get_struct_3B6d():
    global _struct_3B6d
    if _struct_3B6d is None:
        _struct_3B6d = struct.Struct("<3B6d")
    return _struct_3B6d
