# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from automotive_navigation_msgs/LaneBoundaryArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import automotive_navigation_msgs.msg
import geometry_msgs.msg

class LaneBoundaryArray(genpy.Message):
  _md5sum = "e9f7b0fe081428eb62b95139882c4d89"
  _type = "automotive_navigation_msgs/LaneBoundaryArray"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Lane Boundary Array Message
# Contains an array of lane boundaries contained in a section or segment of road

automotive_navigation_msgs/LaneBoundary[] boundaries


================================================================================
MSG: automotive_navigation_msgs/LaneBoundary
# Lane Boundary Message
# Contains an array of points and other details

uint8 UNKNOWN=0

uint8 SOLID=1
uint8 DASHED=2
uint8 SOLID_DASHED=3
uint8 DASHED_SOLID=4
uint8 SOLID_SOLID=5
uint8 style

uint8 WHITE=1
uint8 YELLOW=2
uint8 color

geometry_msgs/Point[] line


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['boundaries']
  _slot_types = ['automotive_navigation_msgs/LaneBoundary[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       boundaries

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaneBoundaryArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.boundaries is None:
        self.boundaries = []
    else:
      self.boundaries = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundaries:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.style, _x.color))
        length = len(val1.line)
        buff.write(_struct_I.pack(length))
        for val2 in val1.line:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.boundaries is None:
        self.boundaries = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundaries = []
      for i in range(0, length):
        val1 = automotive_navigation_msgs.msg.LaneBoundary()
        _x = val1
        start = end
        end += 2
        (_x.style, _x.color,) = _get_struct_2B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.line = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.line.append(val2)
        self.boundaries.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.boundaries)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundaries:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.style, _x.color))
        length = len(val1.line)
        buff.write(_struct_I.pack(length))
        for val2 in val1.line:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.boundaries is None:
        self.boundaries = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundaries = []
      for i in range(0, length):
        val1 = automotive_navigation_msgs.msg.LaneBoundary()
        _x = val1
        start = end
        end += 2
        (_x.style, _x.color,) = _get_struct_2B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.line = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.line.append(val2)
        self.boundaries.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
