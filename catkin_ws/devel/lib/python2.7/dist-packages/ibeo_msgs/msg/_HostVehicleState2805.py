# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/HostVehicleState2805.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import ibeo_msgs.msg
import std_msgs.msg

class HostVehicleState2805(genpy.Message):
  _md5sum = "40f2e4a2b8baa9b2fbd2b34a1d0f47c9"
  _type = "ibeo_msgs/HostVehicleState2805"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

IbeoDataHeader ibeo_header
time timestamp
uint16 scan_number
uint16 error_flags
float64 longitudinal_velocity
float64 steering_wheel_angle
float64 front_wheel_angle
int32 x_position
int32 y_position
int16 course_angle
uint16 time_difference
int16 x_difference
int16 y_difference
int16 heading_difference
int16 current_yaw_rate

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ibeo_msgs/IbeoDataHeader
uint32 previous_message_size
uint32 message_size
uint8 device_id
uint16 data_type_id
time stamp
"""
  __slots__ = ['header','ibeo_header','timestamp','scan_number','error_flags','longitudinal_velocity','steering_wheel_angle','front_wheel_angle','x_position','y_position','course_angle','time_difference','x_difference','y_difference','heading_difference','current_yaw_rate']
  _slot_types = ['std_msgs/Header','ibeo_msgs/IbeoDataHeader','time','uint16','uint16','float64','float64','float64','int32','int32','int16','uint16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ibeo_header,timestamp,scan_number,error_flags,longitudinal_velocity,steering_wheel_angle,front_wheel_angle,x_position,y_position,course_angle,time_difference,x_difference,y_difference,heading_difference,current_yaw_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HostVehicleState2805, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.scan_number is None:
        self.scan_number = 0
      if self.error_flags is None:
        self.error_flags = 0
      if self.longitudinal_velocity is None:
        self.longitudinal_velocity = 0.
      if self.steering_wheel_angle is None:
        self.steering_wheel_angle = 0.
      if self.front_wheel_angle is None:
        self.front_wheel_angle = 0.
      if self.x_position is None:
        self.x_position = 0
      if self.y_position is None:
        self.y_position = 0
      if self.course_angle is None:
        self.course_angle = 0
      if self.time_difference is None:
        self.time_difference = 0
      if self.x_difference is None:
        self.x_difference = 0
      if self.y_difference is None:
        self.y_difference = 0
      if self.heading_difference is None:
        self.heading_difference = 0
      if self.current_yaw_rate is None:
        self.current_yaw_rate = 0
    else:
      self.header = std_msgs.msg.Header()
      self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      self.timestamp = genpy.Time()
      self.scan_number = 0
      self.error_flags = 0
      self.longitudinal_velocity = 0.
      self.steering_wheel_angle = 0.
      self.front_wheel_angle = 0.
      self.x_position = 0
      self.y_position = 0
      self.course_angle = 0
      self.time_difference = 0
      self.x_difference = 0
      self.y_difference = 0
      self.heading_difference = 0
      self.current_yaw_rate = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2IBH4I2H3d2ihH4h().pack(_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.timestamp.secs, _x.timestamp.nsecs, _x.scan_number, _x.error_flags, _x.longitudinal_velocity, _x.steering_wheel_angle, _x.front_wheel_angle, _x.x_position, _x.y_position, _x.course_angle, _x.time_difference, _x.x_difference, _x.y_difference, _x.heading_difference, _x.current_yaw_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.timestamp.secs, _x.timestamp.nsecs, _x.scan_number, _x.error_flags, _x.longitudinal_velocity, _x.steering_wheel_angle, _x.front_wheel_angle, _x.x_position, _x.y_position, _x.course_angle, _x.time_difference, _x.x_difference, _x.y_difference, _x.heading_difference, _x.current_yaw_rate,) = _get_struct_2IBH4I2H3d2ihH4h().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2IBH4I2H3d2ihH4h().pack(_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.timestamp.secs, _x.timestamp.nsecs, _x.scan_number, _x.error_flags, _x.longitudinal_velocity, _x.steering_wheel_angle, _x.front_wheel_angle, _x.x_position, _x.y_position, _x.course_angle, _x.time_difference, _x.x_difference, _x.y_difference, _x.heading_difference, _x.current_yaw_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.timestamp.secs, _x.timestamp.nsecs, _x.scan_number, _x.error_flags, _x.longitudinal_velocity, _x.steering_wheel_angle, _x.front_wheel_angle, _x.x_position, _x.y_position, _x.course_angle, _x.time_difference, _x.x_difference, _x.y_difference, _x.heading_difference, _x.current_yaw_rate,) = _get_struct_2IBH4I2H3d2ihH4h().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IBH4I2H3d2ihH4h = None
def _get_struct_2IBH4I2H3d2ihH4h():
    global _struct_2IBH4I2H3d2ihH4h
    if _struct_2IBH4I2H3d2ihH4h is None:
        _struct_2IBH4I2H3d2ihH4h = struct.Struct("<2IBH4I2H3d2ihH4h")
    return _struct_2IBH4I2H3d2ihH4h
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
