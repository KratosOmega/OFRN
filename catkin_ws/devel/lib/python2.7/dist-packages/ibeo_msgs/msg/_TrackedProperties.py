# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/TrackedProperties.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ibeo_msgs.msg

class TrackedProperties(genpy.Message):
  _md5sum = "e9ae8fca1e3b18cb6789277ec4d93701"
  _type = "ibeo_msgs/TrackedProperties"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 object_age
uint16 hidden_status_age
uint8 object_phase
uint8 dynamic_property
uint16 relative_time_of_measure
Point2Di position_closest_point
Point2Di relative_velocity
Point2Dui relative_velocity_sigma
uint8 classification
uint16 classification_age
Point2Di object_box_size
Point2Dui object_box_size_sigma
int16 object_box_orientation
uint16 object_box_orientation_sigma
uint8 tracking_point_location
Point2Di tracking_point_coordinate
Point2Dui tracking_point_coordinate_sigma
Point2Di velocity
Point2Dui velocity_sigma
Point2Di acceleration
Point2Dui acceleration_sigma
int16 yaw_rate
uint16 yaw_rate_sigma
uint8 number_of_contour_points
ContourPointSigma[] contour_point_list

# object_phase values
uint8 INITIALIZATION_PHASE=0
uint8 TRACKING_PHASE=1

# dynamic_property values
uint8 DYNAMIC_AND_MOVING=0
uint8 DYNAMIC_AND_STOPPED=1
uint8 A_PRIORI_STATIONARY=2

# classification values
uint8 UNCLASSIFIED=0
uint8 UNKNOWN_SMALL=1
uint8 UNKNOWN_BIG=2
uint8 PEDESTRIAN=3
uint8 BIKE=4
uint8 CAR=5
uint8 TRUCK=6
uint8 OVER_DRIVABLE=10
uint8 UNDER_DRIVABLE=11

# tracking_point_location values
uint8 CENTER_OF_GRAVITY=0
uint8 TOP_FRONT_LEFT_CORNER=1
uint8 TOP_FRONT_RIGHT_CORNER=2
uint8 BOTTOM_REAR_RIGHT_CORNER=3
uint8 BOTTOM_REAR_LEFT_CORNER=4
uint8 CENTER_OF_TOP_FRONT_EDGE=5
uint8 CENTER_OF_RIGHT_EDGE=6
uint8 CENTER_OF_BOTTOM_REAR_EDGE=7
uint8 CENTER_OF_LEFT_EDGE=8
uint8 BOX_CENTER=9
uint8 INVALID=255

================================================================================
MSG: ibeo_msgs/Point2Di
int16 x
int16 y

================================================================================
MSG: ibeo_msgs/Point2Dui
uint16 x
uint16 y

================================================================================
MSG: ibeo_msgs/ContourPointSigma
int16 x
int16 y
uint8 x_sigma
uint8 y_sigma
"""
  # Pseudo-constants
  INITIALIZATION_PHASE = 0
  TRACKING_PHASE = 1
  DYNAMIC_AND_MOVING = 0
  DYNAMIC_AND_STOPPED = 1
  A_PRIORI_STATIONARY = 2
  UNCLASSIFIED = 0
  UNKNOWN_SMALL = 1
  UNKNOWN_BIG = 2
  PEDESTRIAN = 3
  BIKE = 4
  CAR = 5
  TRUCK = 6
  OVER_DRIVABLE = 10
  UNDER_DRIVABLE = 11
  CENTER_OF_GRAVITY = 0
  TOP_FRONT_LEFT_CORNER = 1
  TOP_FRONT_RIGHT_CORNER = 2
  BOTTOM_REAR_RIGHT_CORNER = 3
  BOTTOM_REAR_LEFT_CORNER = 4
  CENTER_OF_TOP_FRONT_EDGE = 5
  CENTER_OF_RIGHT_EDGE = 6
  CENTER_OF_BOTTOM_REAR_EDGE = 7
  CENTER_OF_LEFT_EDGE = 8
  BOX_CENTER = 9
  INVALID = 255

  __slots__ = ['object_age','hidden_status_age','object_phase','dynamic_property','relative_time_of_measure','position_closest_point','relative_velocity','relative_velocity_sigma','classification','classification_age','object_box_size','object_box_size_sigma','object_box_orientation','object_box_orientation_sigma','tracking_point_location','tracking_point_coordinate','tracking_point_coordinate_sigma','velocity','velocity_sigma','acceleration','acceleration_sigma','yaw_rate','yaw_rate_sigma','number_of_contour_points','contour_point_list']
  _slot_types = ['uint16','uint16','uint8','uint8','uint16','ibeo_msgs/Point2Di','ibeo_msgs/Point2Di','ibeo_msgs/Point2Dui','uint8','uint16','ibeo_msgs/Point2Di','ibeo_msgs/Point2Dui','int16','uint16','uint8','ibeo_msgs/Point2Di','ibeo_msgs/Point2Dui','ibeo_msgs/Point2Di','ibeo_msgs/Point2Dui','ibeo_msgs/Point2Di','ibeo_msgs/Point2Dui','int16','uint16','uint8','ibeo_msgs/ContourPointSigma[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_age,hidden_status_age,object_phase,dynamic_property,relative_time_of_measure,position_closest_point,relative_velocity,relative_velocity_sigma,classification,classification_age,object_box_size,object_box_size_sigma,object_box_orientation,object_box_orientation_sigma,tracking_point_location,tracking_point_coordinate,tracking_point_coordinate_sigma,velocity,velocity_sigma,acceleration,acceleration_sigma,yaw_rate,yaw_rate_sigma,number_of_contour_points,contour_point_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackedProperties, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.object_age is None:
        self.object_age = 0
      if self.hidden_status_age is None:
        self.hidden_status_age = 0
      if self.object_phase is None:
        self.object_phase = 0
      if self.dynamic_property is None:
        self.dynamic_property = 0
      if self.relative_time_of_measure is None:
        self.relative_time_of_measure = 0
      if self.position_closest_point is None:
        self.position_closest_point = ibeo_msgs.msg.Point2Di()
      if self.relative_velocity is None:
        self.relative_velocity = ibeo_msgs.msg.Point2Di()
      if self.relative_velocity_sigma is None:
        self.relative_velocity_sigma = ibeo_msgs.msg.Point2Dui()
      if self.classification is None:
        self.classification = 0
      if self.classification_age is None:
        self.classification_age = 0
      if self.object_box_size is None:
        self.object_box_size = ibeo_msgs.msg.Point2Di()
      if self.object_box_size_sigma is None:
        self.object_box_size_sigma = ibeo_msgs.msg.Point2Dui()
      if self.object_box_orientation is None:
        self.object_box_orientation = 0
      if self.object_box_orientation_sigma is None:
        self.object_box_orientation_sigma = 0
      if self.tracking_point_location is None:
        self.tracking_point_location = 0
      if self.tracking_point_coordinate is None:
        self.tracking_point_coordinate = ibeo_msgs.msg.Point2Di()
      if self.tracking_point_coordinate_sigma is None:
        self.tracking_point_coordinate_sigma = ibeo_msgs.msg.Point2Dui()
      if self.velocity is None:
        self.velocity = ibeo_msgs.msg.Point2Di()
      if self.velocity_sigma is None:
        self.velocity_sigma = ibeo_msgs.msg.Point2Dui()
      if self.acceleration is None:
        self.acceleration = ibeo_msgs.msg.Point2Di()
      if self.acceleration_sigma is None:
        self.acceleration_sigma = ibeo_msgs.msg.Point2Dui()
      if self.yaw_rate is None:
        self.yaw_rate = 0
      if self.yaw_rate_sigma is None:
        self.yaw_rate_sigma = 0
      if self.number_of_contour_points is None:
        self.number_of_contour_points = 0
      if self.contour_point_list is None:
        self.contour_point_list = []
    else:
      self.object_age = 0
      self.hidden_status_age = 0
      self.object_phase = 0
      self.dynamic_property = 0
      self.relative_time_of_measure = 0
      self.position_closest_point = ibeo_msgs.msg.Point2Di()
      self.relative_velocity = ibeo_msgs.msg.Point2Di()
      self.relative_velocity_sigma = ibeo_msgs.msg.Point2Dui()
      self.classification = 0
      self.classification_age = 0
      self.object_box_size = ibeo_msgs.msg.Point2Di()
      self.object_box_size_sigma = ibeo_msgs.msg.Point2Dui()
      self.object_box_orientation = 0
      self.object_box_orientation_sigma = 0
      self.tracking_point_location = 0
      self.tracking_point_coordinate = ibeo_msgs.msg.Point2Di()
      self.tracking_point_coordinate_sigma = ibeo_msgs.msg.Point2Dui()
      self.velocity = ibeo_msgs.msg.Point2Di()
      self.velocity_sigma = ibeo_msgs.msg.Point2Dui()
      self.acceleration = ibeo_msgs.msg.Point2Di()
      self.acceleration_sigma = ibeo_msgs.msg.Point2Dui()
      self.yaw_rate = 0
      self.yaw_rate_sigma = 0
      self.number_of_contour_points = 0
      self.contour_point_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB().pack(_x.object_age, _x.hidden_status_age, _x.object_phase, _x.dynamic_property, _x.relative_time_of_measure, _x.position_closest_point.x, _x.position_closest_point.y, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity_sigma.x, _x.relative_velocity_sigma.y, _x.classification, _x.classification_age, _x.object_box_size.x, _x.object_box_size.y, _x.object_box_size_sigma.x, _x.object_box_size_sigma.y, _x.object_box_orientation, _x.object_box_orientation_sigma, _x.tracking_point_location, _x.tracking_point_coordinate.x, _x.tracking_point_coordinate.y, _x.tracking_point_coordinate_sigma.x, _x.tracking_point_coordinate_sigma.y, _x.velocity.x, _x.velocity.y, _x.velocity_sigma.x, _x.velocity_sigma.y, _x.acceleration.x, _x.acceleration.y, _x.acceleration_sigma.x, _x.acceleration_sigma.y, _x.yaw_rate, _x.yaw_rate_sigma, _x.number_of_contour_points))
      length = len(self.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_point_list:
        _x = val1
        buff.write(_get_struct_2h2B().pack(_x.x, _x.y, _x.x_sigma, _x.y_sigma))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position_closest_point is None:
        self.position_closest_point = ibeo_msgs.msg.Point2Di()
      if self.relative_velocity is None:
        self.relative_velocity = ibeo_msgs.msg.Point2Di()
      if self.relative_velocity_sigma is None:
        self.relative_velocity_sigma = ibeo_msgs.msg.Point2Dui()
      if self.object_box_size is None:
        self.object_box_size = ibeo_msgs.msg.Point2Di()
      if self.object_box_size_sigma is None:
        self.object_box_size_sigma = ibeo_msgs.msg.Point2Dui()
      if self.tracking_point_coordinate is None:
        self.tracking_point_coordinate = ibeo_msgs.msg.Point2Di()
      if self.tracking_point_coordinate_sigma is None:
        self.tracking_point_coordinate_sigma = ibeo_msgs.msg.Point2Dui()
      if self.velocity is None:
        self.velocity = ibeo_msgs.msg.Point2Di()
      if self.velocity_sigma is None:
        self.velocity_sigma = ibeo_msgs.msg.Point2Dui()
      if self.acceleration is None:
        self.acceleration = ibeo_msgs.msg.Point2Di()
      if self.acceleration_sigma is None:
        self.acceleration_sigma = ibeo_msgs.msg.Point2Dui()
      if self.contour_point_list is None:
        self.contour_point_list = None
      end = 0
      _x = self
      start = end
      end += 65
      (_x.object_age, _x.hidden_status_age, _x.object_phase, _x.dynamic_property, _x.relative_time_of_measure, _x.position_closest_point.x, _x.position_closest_point.y, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity_sigma.x, _x.relative_velocity_sigma.y, _x.classification, _x.classification_age, _x.object_box_size.x, _x.object_box_size.y, _x.object_box_size_sigma.x, _x.object_box_size_sigma.y, _x.object_box_orientation, _x.object_box_orientation_sigma, _x.tracking_point_location, _x.tracking_point_coordinate.x, _x.tracking_point_coordinate.y, _x.tracking_point_coordinate_sigma.x, _x.tracking_point_coordinate_sigma.y, _x.velocity.x, _x.velocity.y, _x.velocity_sigma.x, _x.velocity_sigma.y, _x.acceleration.x, _x.acceleration.y, _x.acceleration_sigma.x, _x.acceleration_sigma.y, _x.yaw_rate, _x.yaw_rate_sigma, _x.number_of_contour_points,) = _get_struct_2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.ContourPointSigma()
        _x = val1
        start = end
        end += 6
        (_x.x, _x.y, _x.x_sigma, _x.y_sigma,) = _get_struct_2h2B().unpack(str[start:end])
        self.contour_point_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB().pack(_x.object_age, _x.hidden_status_age, _x.object_phase, _x.dynamic_property, _x.relative_time_of_measure, _x.position_closest_point.x, _x.position_closest_point.y, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity_sigma.x, _x.relative_velocity_sigma.y, _x.classification, _x.classification_age, _x.object_box_size.x, _x.object_box_size.y, _x.object_box_size_sigma.x, _x.object_box_size_sigma.y, _x.object_box_orientation, _x.object_box_orientation_sigma, _x.tracking_point_location, _x.tracking_point_coordinate.x, _x.tracking_point_coordinate.y, _x.tracking_point_coordinate_sigma.x, _x.tracking_point_coordinate_sigma.y, _x.velocity.x, _x.velocity.y, _x.velocity_sigma.x, _x.velocity_sigma.y, _x.acceleration.x, _x.acceleration.y, _x.acceleration_sigma.x, _x.acceleration_sigma.y, _x.yaw_rate, _x.yaw_rate_sigma, _x.number_of_contour_points))
      length = len(self.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_point_list:
        _x = val1
        buff.write(_get_struct_2h2B().pack(_x.x, _x.y, _x.x_sigma, _x.y_sigma))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position_closest_point is None:
        self.position_closest_point = ibeo_msgs.msg.Point2Di()
      if self.relative_velocity is None:
        self.relative_velocity = ibeo_msgs.msg.Point2Di()
      if self.relative_velocity_sigma is None:
        self.relative_velocity_sigma = ibeo_msgs.msg.Point2Dui()
      if self.object_box_size is None:
        self.object_box_size = ibeo_msgs.msg.Point2Di()
      if self.object_box_size_sigma is None:
        self.object_box_size_sigma = ibeo_msgs.msg.Point2Dui()
      if self.tracking_point_coordinate is None:
        self.tracking_point_coordinate = ibeo_msgs.msg.Point2Di()
      if self.tracking_point_coordinate_sigma is None:
        self.tracking_point_coordinate_sigma = ibeo_msgs.msg.Point2Dui()
      if self.velocity is None:
        self.velocity = ibeo_msgs.msg.Point2Di()
      if self.velocity_sigma is None:
        self.velocity_sigma = ibeo_msgs.msg.Point2Dui()
      if self.acceleration is None:
        self.acceleration = ibeo_msgs.msg.Point2Di()
      if self.acceleration_sigma is None:
        self.acceleration_sigma = ibeo_msgs.msg.Point2Dui()
      if self.contour_point_list is None:
        self.contour_point_list = None
      end = 0
      _x = self
      start = end
      end += 65
      (_x.object_age, _x.hidden_status_age, _x.object_phase, _x.dynamic_property, _x.relative_time_of_measure, _x.position_closest_point.x, _x.position_closest_point.y, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity_sigma.x, _x.relative_velocity_sigma.y, _x.classification, _x.classification_age, _x.object_box_size.x, _x.object_box_size.y, _x.object_box_size_sigma.x, _x.object_box_size_sigma.y, _x.object_box_orientation, _x.object_box_orientation_sigma, _x.tracking_point_location, _x.tracking_point_coordinate.x, _x.tracking_point_coordinate.y, _x.tracking_point_coordinate_sigma.x, _x.tracking_point_coordinate_sigma.y, _x.velocity.x, _x.velocity.y, _x.velocity_sigma.x, _x.velocity_sigma.y, _x.acceleration.x, _x.acceleration.y, _x.acceleration_sigma.x, _x.acceleration_sigma.y, _x.yaw_rate, _x.yaw_rate_sigma, _x.number_of_contour_points,) = _get_struct_2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.ContourPointSigma()
        _x = val1
        start = end
        end += 6
        (_x.x, _x.y, _x.x_sigma, _x.y_sigma,) = _get_struct_2h2B().unpack(str[start:end])
        self.contour_point_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h2B = None
def _get_struct_2h2B():
    global _struct_2h2B
    if _struct_2h2B is None:
        _struct_2h2B = struct.Struct("<2h2B")
    return _struct_2h2B
_struct_2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB = None
def _get_struct_2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB():
    global _struct_2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB
    if _struct_2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB is None:
        _struct_2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB = struct.Struct("<2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB")
    return _struct_2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB
