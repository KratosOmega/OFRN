# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/Object2271.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ibeo_msgs.msg

class Object2271(genpy.Message):
  _md5sum = "d94cdb57962a35b5cf5cfbdc8de76f0d"
  _type = "ibeo_msgs/Object2271"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 id
bool tracked_properties_available
bool untracked_properties_available
TrackedProperties tracked_properties
UntrackedProperties untracked_properties

================================================================================
MSG: ibeo_msgs/TrackedProperties
uint16 object_age
uint16 hidden_status_age
uint8 object_phase
uint8 dynamic_property
uint16 relative_time_of_measure
Point2Di position_closest_point
Point2Di relative_velocity
Point2Dui relative_velocity_sigma
uint8 classification
uint16 classification_age
Point2Di object_box_size
Point2Dui object_box_size_sigma
int16 object_box_orientation
uint16 object_box_orientation_sigma
uint8 tracking_point_location
Point2Di tracking_point_coordinate
Point2Dui tracking_point_coordinate_sigma
Point2Di velocity
Point2Dui velocity_sigma
Point2Di acceleration
Point2Dui acceleration_sigma
int16 yaw_rate
uint16 yaw_rate_sigma
uint8 number_of_contour_points
ContourPointSigma[] contour_point_list

# object_phase values
uint8 INITIALIZATION_PHASE=0
uint8 TRACKING_PHASE=1

# dynamic_property values
uint8 DYNAMIC_AND_MOVING=0
uint8 DYNAMIC_AND_STOPPED=1
uint8 A_PRIORI_STATIONARY=2

# classification values
uint8 UNCLASSIFIED=0
uint8 UNKNOWN_SMALL=1
uint8 UNKNOWN_BIG=2
uint8 PEDESTRIAN=3
uint8 BIKE=4
uint8 CAR=5
uint8 TRUCK=6
uint8 OVER_DRIVABLE=10
uint8 UNDER_DRIVABLE=11

# tracking_point_location values
uint8 CENTER_OF_GRAVITY=0
uint8 TOP_FRONT_LEFT_CORNER=1
uint8 TOP_FRONT_RIGHT_CORNER=2
uint8 BOTTOM_REAR_RIGHT_CORNER=3
uint8 BOTTOM_REAR_LEFT_CORNER=4
uint8 CENTER_OF_TOP_FRONT_EDGE=5
uint8 CENTER_OF_RIGHT_EDGE=6
uint8 CENTER_OF_BOTTOM_REAR_EDGE=7
uint8 CENTER_OF_LEFT_EDGE=8
uint8 BOX_CENTER=9
uint8 INVALID=255

================================================================================
MSG: ibeo_msgs/Point2Di
int16 x
int16 y

================================================================================
MSG: ibeo_msgs/Point2Dui
uint16 x
uint16 y

================================================================================
MSG: ibeo_msgs/ContourPointSigma
int16 x
int16 y
uint8 x_sigma
uint8 y_sigma

================================================================================
MSG: ibeo_msgs/UntrackedProperties
uint16 relative_time_of_measurement
Point2Di position_closest_point
Point2Di object_box_size
Point2Dui object_box_size_sigma
int16 object_box_orientation
uint16 object_box_orientation_sigma
Point2Di tracking_point_coordinate
Point2Dui tracking_point_coordinate_sigma
uint8 number_of_contour_points
ContourPointSigma[] contour_point_list
"""
  __slots__ = ['id','tracked_properties_available','untracked_properties_available','tracked_properties','untracked_properties']
  _slot_types = ['uint32','bool','bool','ibeo_msgs/TrackedProperties','ibeo_msgs/UntrackedProperties']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,tracked_properties_available,untracked_properties_available,tracked_properties,untracked_properties

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object2271, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.tracked_properties_available is None:
        self.tracked_properties_available = False
      if self.untracked_properties_available is None:
        self.untracked_properties_available = False
      if self.tracked_properties is None:
        self.tracked_properties = ibeo_msgs.msg.TrackedProperties()
      if self.untracked_properties is None:
        self.untracked_properties = ibeo_msgs.msg.UntrackedProperties()
    else:
      self.id = 0
      self.tracked_properties_available = False
      self.untracked_properties_available = False
      self.tracked_properties = ibeo_msgs.msg.TrackedProperties()
      self.untracked_properties = ibeo_msgs.msg.UntrackedProperties()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I2B2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB().pack(_x.id, _x.tracked_properties_available, _x.untracked_properties_available, _x.tracked_properties.object_age, _x.tracked_properties.hidden_status_age, _x.tracked_properties.object_phase, _x.tracked_properties.dynamic_property, _x.tracked_properties.relative_time_of_measure, _x.tracked_properties.position_closest_point.x, _x.tracked_properties.position_closest_point.y, _x.tracked_properties.relative_velocity.x, _x.tracked_properties.relative_velocity.y, _x.tracked_properties.relative_velocity_sigma.x, _x.tracked_properties.relative_velocity_sigma.y, _x.tracked_properties.classification, _x.tracked_properties.classification_age, _x.tracked_properties.object_box_size.x, _x.tracked_properties.object_box_size.y, _x.tracked_properties.object_box_size_sigma.x, _x.tracked_properties.object_box_size_sigma.y, _x.tracked_properties.object_box_orientation, _x.tracked_properties.object_box_orientation_sigma, _x.tracked_properties.tracking_point_location, _x.tracked_properties.tracking_point_coordinate.x, _x.tracked_properties.tracking_point_coordinate.y, _x.tracked_properties.tracking_point_coordinate_sigma.x, _x.tracked_properties.tracking_point_coordinate_sigma.y, _x.tracked_properties.velocity.x, _x.tracked_properties.velocity.y, _x.tracked_properties.velocity_sigma.x, _x.tracked_properties.velocity_sigma.y, _x.tracked_properties.acceleration.x, _x.tracked_properties.acceleration.y, _x.tracked_properties.acceleration_sigma.x, _x.tracked_properties.acceleration_sigma.y, _x.tracked_properties.yaw_rate, _x.tracked_properties.yaw_rate_sigma, _x.tracked_properties.number_of_contour_points))
      length = len(self.tracked_properties.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.tracked_properties.contour_point_list:
        _x = val1
        buff.write(_get_struct_2h2B().pack(_x.x, _x.y, _x.x_sigma, _x.y_sigma))
      _x = self
      buff.write(_get_struct_H4h2HhH2h2HB().pack(_x.untracked_properties.relative_time_of_measurement, _x.untracked_properties.position_closest_point.x, _x.untracked_properties.position_closest_point.y, _x.untracked_properties.object_box_size.x, _x.untracked_properties.object_box_size.y, _x.untracked_properties.object_box_size_sigma.x, _x.untracked_properties.object_box_size_sigma.y, _x.untracked_properties.object_box_orientation, _x.untracked_properties.object_box_orientation_sigma, _x.untracked_properties.tracking_point_coordinate.x, _x.untracked_properties.tracking_point_coordinate.y, _x.untracked_properties.tracking_point_coordinate_sigma.x, _x.untracked_properties.tracking_point_coordinate_sigma.y, _x.untracked_properties.number_of_contour_points))
      length = len(self.untracked_properties.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.untracked_properties.contour_point_list:
        _x = val1
        buff.write(_get_struct_2h2B().pack(_x.x, _x.y, _x.x_sigma, _x.y_sigma))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.tracked_properties is None:
        self.tracked_properties = ibeo_msgs.msg.TrackedProperties()
      if self.untracked_properties is None:
        self.untracked_properties = ibeo_msgs.msg.UntrackedProperties()
      end = 0
      _x = self
      start = end
      end += 71
      (_x.id, _x.tracked_properties_available, _x.untracked_properties_available, _x.tracked_properties.object_age, _x.tracked_properties.hidden_status_age, _x.tracked_properties.object_phase, _x.tracked_properties.dynamic_property, _x.tracked_properties.relative_time_of_measure, _x.tracked_properties.position_closest_point.x, _x.tracked_properties.position_closest_point.y, _x.tracked_properties.relative_velocity.x, _x.tracked_properties.relative_velocity.y, _x.tracked_properties.relative_velocity_sigma.x, _x.tracked_properties.relative_velocity_sigma.y, _x.tracked_properties.classification, _x.tracked_properties.classification_age, _x.tracked_properties.object_box_size.x, _x.tracked_properties.object_box_size.y, _x.tracked_properties.object_box_size_sigma.x, _x.tracked_properties.object_box_size_sigma.y, _x.tracked_properties.object_box_orientation, _x.tracked_properties.object_box_orientation_sigma, _x.tracked_properties.tracking_point_location, _x.tracked_properties.tracking_point_coordinate.x, _x.tracked_properties.tracking_point_coordinate.y, _x.tracked_properties.tracking_point_coordinate_sigma.x, _x.tracked_properties.tracking_point_coordinate_sigma.y, _x.tracked_properties.velocity.x, _x.tracked_properties.velocity.y, _x.tracked_properties.velocity_sigma.x, _x.tracked_properties.velocity_sigma.y, _x.tracked_properties.acceleration.x, _x.tracked_properties.acceleration.y, _x.tracked_properties.acceleration_sigma.x, _x.tracked_properties.acceleration_sigma.y, _x.tracked_properties.yaw_rate, _x.tracked_properties.yaw_rate_sigma, _x.tracked_properties.number_of_contour_points,) = _get_struct_I2B2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB().unpack(str[start:end])
      self.tracked_properties_available = bool(self.tracked_properties_available)
      self.untracked_properties_available = bool(self.untracked_properties_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tracked_properties.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.ContourPointSigma()
        _x = val1
        start = end
        end += 6
        (_x.x, _x.y, _x.x_sigma, _x.y_sigma,) = _get_struct_2h2B().unpack(str[start:end])
        self.tracked_properties.contour_point_list.append(val1)
      _x = self
      start = end
      end += 27
      (_x.untracked_properties.relative_time_of_measurement, _x.untracked_properties.position_closest_point.x, _x.untracked_properties.position_closest_point.y, _x.untracked_properties.object_box_size.x, _x.untracked_properties.object_box_size.y, _x.untracked_properties.object_box_size_sigma.x, _x.untracked_properties.object_box_size_sigma.y, _x.untracked_properties.object_box_orientation, _x.untracked_properties.object_box_orientation_sigma, _x.untracked_properties.tracking_point_coordinate.x, _x.untracked_properties.tracking_point_coordinate.y, _x.untracked_properties.tracking_point_coordinate_sigma.x, _x.untracked_properties.tracking_point_coordinate_sigma.y, _x.untracked_properties.number_of_contour_points,) = _get_struct_H4h2HhH2h2HB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.untracked_properties.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.ContourPointSigma()
        _x = val1
        start = end
        end += 6
        (_x.x, _x.y, _x.x_sigma, _x.y_sigma,) = _get_struct_2h2B().unpack(str[start:end])
        self.untracked_properties.contour_point_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I2B2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB().pack(_x.id, _x.tracked_properties_available, _x.untracked_properties_available, _x.tracked_properties.object_age, _x.tracked_properties.hidden_status_age, _x.tracked_properties.object_phase, _x.tracked_properties.dynamic_property, _x.tracked_properties.relative_time_of_measure, _x.tracked_properties.position_closest_point.x, _x.tracked_properties.position_closest_point.y, _x.tracked_properties.relative_velocity.x, _x.tracked_properties.relative_velocity.y, _x.tracked_properties.relative_velocity_sigma.x, _x.tracked_properties.relative_velocity_sigma.y, _x.tracked_properties.classification, _x.tracked_properties.classification_age, _x.tracked_properties.object_box_size.x, _x.tracked_properties.object_box_size.y, _x.tracked_properties.object_box_size_sigma.x, _x.tracked_properties.object_box_size_sigma.y, _x.tracked_properties.object_box_orientation, _x.tracked_properties.object_box_orientation_sigma, _x.tracked_properties.tracking_point_location, _x.tracked_properties.tracking_point_coordinate.x, _x.tracked_properties.tracking_point_coordinate.y, _x.tracked_properties.tracking_point_coordinate_sigma.x, _x.tracked_properties.tracking_point_coordinate_sigma.y, _x.tracked_properties.velocity.x, _x.tracked_properties.velocity.y, _x.tracked_properties.velocity_sigma.x, _x.tracked_properties.velocity_sigma.y, _x.tracked_properties.acceleration.x, _x.tracked_properties.acceleration.y, _x.tracked_properties.acceleration_sigma.x, _x.tracked_properties.acceleration_sigma.y, _x.tracked_properties.yaw_rate, _x.tracked_properties.yaw_rate_sigma, _x.tracked_properties.number_of_contour_points))
      length = len(self.tracked_properties.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.tracked_properties.contour_point_list:
        _x = val1
        buff.write(_get_struct_2h2B().pack(_x.x, _x.y, _x.x_sigma, _x.y_sigma))
      _x = self
      buff.write(_get_struct_H4h2HhH2h2HB().pack(_x.untracked_properties.relative_time_of_measurement, _x.untracked_properties.position_closest_point.x, _x.untracked_properties.position_closest_point.y, _x.untracked_properties.object_box_size.x, _x.untracked_properties.object_box_size.y, _x.untracked_properties.object_box_size_sigma.x, _x.untracked_properties.object_box_size_sigma.y, _x.untracked_properties.object_box_orientation, _x.untracked_properties.object_box_orientation_sigma, _x.untracked_properties.tracking_point_coordinate.x, _x.untracked_properties.tracking_point_coordinate.y, _x.untracked_properties.tracking_point_coordinate_sigma.x, _x.untracked_properties.tracking_point_coordinate_sigma.y, _x.untracked_properties.number_of_contour_points))
      length = len(self.untracked_properties.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.untracked_properties.contour_point_list:
        _x = val1
        buff.write(_get_struct_2h2B().pack(_x.x, _x.y, _x.x_sigma, _x.y_sigma))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.tracked_properties is None:
        self.tracked_properties = ibeo_msgs.msg.TrackedProperties()
      if self.untracked_properties is None:
        self.untracked_properties = ibeo_msgs.msg.UntrackedProperties()
      end = 0
      _x = self
      start = end
      end += 71
      (_x.id, _x.tracked_properties_available, _x.untracked_properties_available, _x.tracked_properties.object_age, _x.tracked_properties.hidden_status_age, _x.tracked_properties.object_phase, _x.tracked_properties.dynamic_property, _x.tracked_properties.relative_time_of_measure, _x.tracked_properties.position_closest_point.x, _x.tracked_properties.position_closest_point.y, _x.tracked_properties.relative_velocity.x, _x.tracked_properties.relative_velocity.y, _x.tracked_properties.relative_velocity_sigma.x, _x.tracked_properties.relative_velocity_sigma.y, _x.tracked_properties.classification, _x.tracked_properties.classification_age, _x.tracked_properties.object_box_size.x, _x.tracked_properties.object_box_size.y, _x.tracked_properties.object_box_size_sigma.x, _x.tracked_properties.object_box_size_sigma.y, _x.tracked_properties.object_box_orientation, _x.tracked_properties.object_box_orientation_sigma, _x.tracked_properties.tracking_point_location, _x.tracked_properties.tracking_point_coordinate.x, _x.tracked_properties.tracking_point_coordinate.y, _x.tracked_properties.tracking_point_coordinate_sigma.x, _x.tracked_properties.tracking_point_coordinate_sigma.y, _x.tracked_properties.velocity.x, _x.tracked_properties.velocity.y, _x.tracked_properties.velocity_sigma.x, _x.tracked_properties.velocity_sigma.y, _x.tracked_properties.acceleration.x, _x.tracked_properties.acceleration.y, _x.tracked_properties.acceleration_sigma.x, _x.tracked_properties.acceleration_sigma.y, _x.tracked_properties.yaw_rate, _x.tracked_properties.yaw_rate_sigma, _x.tracked_properties.number_of_contour_points,) = _get_struct_I2B2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB().unpack(str[start:end])
      self.tracked_properties_available = bool(self.tracked_properties_available)
      self.untracked_properties_available = bool(self.untracked_properties_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tracked_properties.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.ContourPointSigma()
        _x = val1
        start = end
        end += 6
        (_x.x, _x.y, _x.x_sigma, _x.y_sigma,) = _get_struct_2h2B().unpack(str[start:end])
        self.tracked_properties.contour_point_list.append(val1)
      _x = self
      start = end
      end += 27
      (_x.untracked_properties.relative_time_of_measurement, _x.untracked_properties.position_closest_point.x, _x.untracked_properties.position_closest_point.y, _x.untracked_properties.object_box_size.x, _x.untracked_properties.object_box_size.y, _x.untracked_properties.object_box_size_sigma.x, _x.untracked_properties.object_box_size_sigma.y, _x.untracked_properties.object_box_orientation, _x.untracked_properties.object_box_orientation_sigma, _x.untracked_properties.tracking_point_coordinate.x, _x.untracked_properties.tracking_point_coordinate.y, _x.untracked_properties.tracking_point_coordinate_sigma.x, _x.untracked_properties.tracking_point_coordinate_sigma.y, _x.untracked_properties.number_of_contour_points,) = _get_struct_H4h2HhH2h2HB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.untracked_properties.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.ContourPointSigma()
        _x = val1
        start = end
        end += 6
        (_x.x, _x.y, _x.x_sigma, _x.y_sigma,) = _get_struct_2h2B().unpack(str[start:end])
        self.untracked_properties.contour_point_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H4h2HhH2h2HB = None
def _get_struct_H4h2HhH2h2HB():
    global _struct_H4h2HhH2h2HB
    if _struct_H4h2HhH2h2HB is None:
        _struct_H4h2HhH2h2HB = struct.Struct("<H4h2HhH2h2HB")
    return _struct_H4h2HhH2h2HB
_struct_I2B2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB = None
def _get_struct_I2B2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB():
    global _struct_I2B2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB
    if _struct_I2B2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB is None:
        _struct_I2B2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB = struct.Struct("<I2B2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB")
    return _struct_I2B2H2BH4h2HBH2h2HhHB2h2H2h2H2h2HhHB
_struct_2h2B = None
def _get_struct_2h2B():
    global _struct_2h2B
    if _struct_2h2B is None:
        _struct_2h2B = struct.Struct("<2h2B")
    return _struct_2h2B
