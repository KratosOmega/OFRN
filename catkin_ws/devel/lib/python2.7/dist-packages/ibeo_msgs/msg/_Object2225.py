# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/Object2225.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ibeo_msgs.msg
import genpy

class Object2225(genpy.Message):
  _md5sum = "c9e85f4c697339339d300af5f601ac16"
  _type = "ibeo_msgs/Object2225"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 id
uint32 age
time timestamp
uint16 hidden_status_age
uint8 classification
uint8 classification_certainty
uint32 classification_age
Point2Df bounding_box_center
Point2Df bounding_box_size
Point2Df object_box_center
Point2Df object_box_center_sigma
Point2Df object_box_size
float32 yaw_angle
Point2Df relative_velocity
Point2Df relative_velocity_sigma
Point2Df absolute_velocity
Point2Df absolute_velocity_sigma
uint8 number_of_contour_points
uint8 closest_point_index
Point2Df[] contour_point_list

# classification values
uint8 UNCLASSIFIED=0
uint8 UNKNOWN_SMALL=1
uint8 UNKNOWN_BIG=2
uint8 PEDESTRIAN=3
uint8 BIKE=4
uint8 CAR=5
uint8 TRUCK=6

================================================================================
MSG: ibeo_msgs/Point2Df
float32 x
float32 y
"""
  # Pseudo-constants
  UNCLASSIFIED = 0
  UNKNOWN_SMALL = 1
  UNKNOWN_BIG = 2
  PEDESTRIAN = 3
  BIKE = 4
  CAR = 5
  TRUCK = 6

  __slots__ = ['id','age','timestamp','hidden_status_age','classification','classification_certainty','classification_age','bounding_box_center','bounding_box_size','object_box_center','object_box_center_sigma','object_box_size','yaw_angle','relative_velocity','relative_velocity_sigma','absolute_velocity','absolute_velocity_sigma','number_of_contour_points','closest_point_index','contour_point_list']
  _slot_types = ['uint16','uint32','time','uint16','uint8','uint8','uint32','ibeo_msgs/Point2Df','ibeo_msgs/Point2Df','ibeo_msgs/Point2Df','ibeo_msgs/Point2Df','ibeo_msgs/Point2Df','float32','ibeo_msgs/Point2Df','ibeo_msgs/Point2Df','ibeo_msgs/Point2Df','ibeo_msgs/Point2Df','uint8','uint8','ibeo_msgs/Point2Df[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,age,timestamp,hidden_status_age,classification,classification_certainty,classification_age,bounding_box_center,bounding_box_size,object_box_center,object_box_center_sigma,object_box_size,yaw_angle,relative_velocity,relative_velocity_sigma,absolute_velocity,absolute_velocity_sigma,number_of_contour_points,closest_point_index,contour_point_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object2225, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.age is None:
        self.age = 0
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.hidden_status_age is None:
        self.hidden_status_age = 0
      if self.classification is None:
        self.classification = 0
      if self.classification_certainty is None:
        self.classification_certainty = 0
      if self.classification_age is None:
        self.classification_age = 0
      if self.bounding_box_center is None:
        self.bounding_box_center = ibeo_msgs.msg.Point2Df()
      if self.bounding_box_size is None:
        self.bounding_box_size = ibeo_msgs.msg.Point2Df()
      if self.object_box_center is None:
        self.object_box_center = ibeo_msgs.msg.Point2Df()
      if self.object_box_center_sigma is None:
        self.object_box_center_sigma = ibeo_msgs.msg.Point2Df()
      if self.object_box_size is None:
        self.object_box_size = ibeo_msgs.msg.Point2Df()
      if self.yaw_angle is None:
        self.yaw_angle = 0.
      if self.relative_velocity is None:
        self.relative_velocity = ibeo_msgs.msg.Point2Df()
      if self.relative_velocity_sigma is None:
        self.relative_velocity_sigma = ibeo_msgs.msg.Point2Df()
      if self.absolute_velocity is None:
        self.absolute_velocity = ibeo_msgs.msg.Point2Df()
      if self.absolute_velocity_sigma is None:
        self.absolute_velocity_sigma = ibeo_msgs.msg.Point2Df()
      if self.number_of_contour_points is None:
        self.number_of_contour_points = 0
      if self.closest_point_index is None:
        self.closest_point_index = 0
      if self.contour_point_list is None:
        self.contour_point_list = []
    else:
      self.id = 0
      self.age = 0
      self.timestamp = genpy.Time()
      self.hidden_status_age = 0
      self.classification = 0
      self.classification_certainty = 0
      self.classification_age = 0
      self.bounding_box_center = ibeo_msgs.msg.Point2Df()
      self.bounding_box_size = ibeo_msgs.msg.Point2Df()
      self.object_box_center = ibeo_msgs.msg.Point2Df()
      self.object_box_center_sigma = ibeo_msgs.msg.Point2Df()
      self.object_box_size = ibeo_msgs.msg.Point2Df()
      self.yaw_angle = 0.
      self.relative_velocity = ibeo_msgs.msg.Point2Df()
      self.relative_velocity_sigma = ibeo_msgs.msg.Point2Df()
      self.absolute_velocity = ibeo_msgs.msg.Point2Df()
      self.absolute_velocity_sigma = ibeo_msgs.msg.Point2Df()
      self.number_of_contour_points = 0
      self.closest_point_index = 0
      self.contour_point_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H3IH2BI19f2B().pack(_x.id, _x.age, _x.timestamp.secs, _x.timestamp.nsecs, _x.hidden_status_age, _x.classification, _x.classification_certainty, _x.classification_age, _x.bounding_box_center.x, _x.bounding_box_center.y, _x.bounding_box_size.x, _x.bounding_box_size.y, _x.object_box_center.x, _x.object_box_center.y, _x.object_box_center_sigma.x, _x.object_box_center_sigma.y, _x.object_box_size.x, _x.object_box_size.y, _x.yaw_angle, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity_sigma.x, _x.relative_velocity_sigma.y, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity_sigma.x, _x.absolute_velocity_sigma.y, _x.number_of_contour_points, _x.closest_point_index))
      length = len(self.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_point_list:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.bounding_box_center is None:
        self.bounding_box_center = ibeo_msgs.msg.Point2Df()
      if self.bounding_box_size is None:
        self.bounding_box_size = ibeo_msgs.msg.Point2Df()
      if self.object_box_center is None:
        self.object_box_center = ibeo_msgs.msg.Point2Df()
      if self.object_box_center_sigma is None:
        self.object_box_center_sigma = ibeo_msgs.msg.Point2Df()
      if self.object_box_size is None:
        self.object_box_size = ibeo_msgs.msg.Point2Df()
      if self.relative_velocity is None:
        self.relative_velocity = ibeo_msgs.msg.Point2Df()
      if self.relative_velocity_sigma is None:
        self.relative_velocity_sigma = ibeo_msgs.msg.Point2Df()
      if self.absolute_velocity is None:
        self.absolute_velocity = ibeo_msgs.msg.Point2Df()
      if self.absolute_velocity_sigma is None:
        self.absolute_velocity_sigma = ibeo_msgs.msg.Point2Df()
      if self.contour_point_list is None:
        self.contour_point_list = None
      end = 0
      _x = self
      start = end
      end += 100
      (_x.id, _x.age, _x.timestamp.secs, _x.timestamp.nsecs, _x.hidden_status_age, _x.classification, _x.classification_certainty, _x.classification_age, _x.bounding_box_center.x, _x.bounding_box_center.y, _x.bounding_box_size.x, _x.bounding_box_size.y, _x.object_box_center.x, _x.object_box_center.y, _x.object_box_center_sigma.x, _x.object_box_center_sigma.y, _x.object_box_size.x, _x.object_box_size.y, _x.yaw_angle, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity_sigma.x, _x.relative_velocity_sigma.y, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity_sigma.x, _x.absolute_velocity_sigma.y, _x.number_of_contour_points, _x.closest_point_index,) = _get_struct_H3IH2BI19f2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.Point2Df()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.contour_point_list.append(val1)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H3IH2BI19f2B().pack(_x.id, _x.age, _x.timestamp.secs, _x.timestamp.nsecs, _x.hidden_status_age, _x.classification, _x.classification_certainty, _x.classification_age, _x.bounding_box_center.x, _x.bounding_box_center.y, _x.bounding_box_size.x, _x.bounding_box_size.y, _x.object_box_center.x, _x.object_box_center.y, _x.object_box_center_sigma.x, _x.object_box_center_sigma.y, _x.object_box_size.x, _x.object_box_size.y, _x.yaw_angle, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity_sigma.x, _x.relative_velocity_sigma.y, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity_sigma.x, _x.absolute_velocity_sigma.y, _x.number_of_contour_points, _x.closest_point_index))
      length = len(self.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_point_list:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.bounding_box_center is None:
        self.bounding_box_center = ibeo_msgs.msg.Point2Df()
      if self.bounding_box_size is None:
        self.bounding_box_size = ibeo_msgs.msg.Point2Df()
      if self.object_box_center is None:
        self.object_box_center = ibeo_msgs.msg.Point2Df()
      if self.object_box_center_sigma is None:
        self.object_box_center_sigma = ibeo_msgs.msg.Point2Df()
      if self.object_box_size is None:
        self.object_box_size = ibeo_msgs.msg.Point2Df()
      if self.relative_velocity is None:
        self.relative_velocity = ibeo_msgs.msg.Point2Df()
      if self.relative_velocity_sigma is None:
        self.relative_velocity_sigma = ibeo_msgs.msg.Point2Df()
      if self.absolute_velocity is None:
        self.absolute_velocity = ibeo_msgs.msg.Point2Df()
      if self.absolute_velocity_sigma is None:
        self.absolute_velocity_sigma = ibeo_msgs.msg.Point2Df()
      if self.contour_point_list is None:
        self.contour_point_list = None
      end = 0
      _x = self
      start = end
      end += 100
      (_x.id, _x.age, _x.timestamp.secs, _x.timestamp.nsecs, _x.hidden_status_age, _x.classification, _x.classification_certainty, _x.classification_age, _x.bounding_box_center.x, _x.bounding_box_center.y, _x.bounding_box_size.x, _x.bounding_box_size.y, _x.object_box_center.x, _x.object_box_center.y, _x.object_box_center_sigma.x, _x.object_box_center_sigma.y, _x.object_box_size.x, _x.object_box_size.y, _x.yaw_angle, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity_sigma.x, _x.relative_velocity_sigma.y, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity_sigma.x, _x.absolute_velocity_sigma.y, _x.number_of_contour_points, _x.closest_point_index,) = _get_struct_H3IH2BI19f2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.Point2Df()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.contour_point_list.append(val1)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_H3IH2BI19f2B = None
def _get_struct_H3IH2BI19f2B():
    global _struct_H3IH2BI19f2B
    if _struct_H3IH2BI19f2B is None:
        _struct_H3IH2BI19f2B = struct.Struct("<H3IH2BI19f2B")
    return _struct_H3IH2BI19f2B
