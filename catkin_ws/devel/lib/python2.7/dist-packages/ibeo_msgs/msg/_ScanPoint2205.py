# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/ScanPoint2205.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ScanPoint2205(genpy.Message):
  _md5sum = "b162acb2ef659b1a6581ffbf77925528"
  _type = "ibeo_msgs/ScanPoint2205"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 x_position
float32 y_position
float32 z_position
float32 echo_width
uint8 device_id
uint8 layer
uint8 echo
uint32 time_offset
bool ground
bool dirt
bool precipitation
bool transparent
"""
  __slots__ = ['x_position','y_position','z_position','echo_width','device_id','layer','echo','time_offset','ground','dirt','precipitation','transparent']
  _slot_types = ['float32','float32','float32','float32','uint8','uint8','uint8','uint32','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_position,y_position,z_position,echo_width,device_id,layer,echo,time_offset,ground,dirt,precipitation,transparent

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ScanPoint2205, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_position is None:
        self.x_position = 0.
      if self.y_position is None:
        self.y_position = 0.
      if self.z_position is None:
        self.z_position = 0.
      if self.echo_width is None:
        self.echo_width = 0.
      if self.device_id is None:
        self.device_id = 0
      if self.layer is None:
        self.layer = 0
      if self.echo is None:
        self.echo = 0
      if self.time_offset is None:
        self.time_offset = 0
      if self.ground is None:
        self.ground = False
      if self.dirt is None:
        self.dirt = False
      if self.precipitation is None:
        self.precipitation = False
      if self.transparent is None:
        self.transparent = False
    else:
      self.x_position = 0.
      self.y_position = 0.
      self.z_position = 0.
      self.echo_width = 0.
      self.device_id = 0
      self.layer = 0
      self.echo = 0
      self.time_offset = 0
      self.ground = False
      self.dirt = False
      self.precipitation = False
      self.transparent = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f3BI4B().pack(_x.x_position, _x.y_position, _x.z_position, _x.echo_width, _x.device_id, _x.layer, _x.echo, _x.time_offset, _x.ground, _x.dirt, _x.precipitation, _x.transparent))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.x_position, _x.y_position, _x.z_position, _x.echo_width, _x.device_id, _x.layer, _x.echo, _x.time_offset, _x.ground, _x.dirt, _x.precipitation, _x.transparent,) = _get_struct_4f3BI4B().unpack(str[start:end])
      self.ground = bool(self.ground)
      self.dirt = bool(self.dirt)
      self.precipitation = bool(self.precipitation)
      self.transparent = bool(self.transparent)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f3BI4B().pack(_x.x_position, _x.y_position, _x.z_position, _x.echo_width, _x.device_id, _x.layer, _x.echo, _x.time_offset, _x.ground, _x.dirt, _x.precipitation, _x.transparent))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.x_position, _x.y_position, _x.z_position, _x.echo_width, _x.device_id, _x.layer, _x.echo, _x.time_offset, _x.ground, _x.dirt, _x.precipitation, _x.transparent,) = _get_struct_4f3BI4B().unpack(str[start:end])
      self.ground = bool(self.ground)
      self.dirt = bool(self.dirt)
      self.precipitation = bool(self.precipitation)
      self.transparent = bool(self.transparent)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f3BI4B = None
def _get_struct_4f3BI4B():
    global _struct_4f3BI4B
    if _struct_4f3BI4B is None:
        _struct_4f3BI4B = struct.Struct("<4f3BI4B")
    return _struct_4f3BI4B
