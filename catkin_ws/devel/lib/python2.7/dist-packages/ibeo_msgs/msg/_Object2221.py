# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/Object2221.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ibeo_msgs.msg

class Object2221(genpy.Message):
  _md5sum = "9be85ae98811bcf70c7a0d6947834c8a"
  _type = "ibeo_msgs/Object2221"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 id
uint16 age
uint16 prediction_age
uint16 relative_timestamp
Point2Di reference_point
Point2Di reference_point_sigma
Point2Di closest_point
Point2Di bounding_box_center
uint16 bounding_box_width
uint16 bounding_box_length
Point2Di object_box_center
Size2D object_box_size
int16 object_box_orientation
Point2Di absolute_velocity
Size2D absolute_velocity_sigma
Point2Di relative_velocity
uint8 classification
uint16 classification_age
uint16 classification_certainty
uint16 number_of_contour_points
Point2Di[] contour_point_list

# classification values
uint8 UNCLASSIFIED=0
uint8 UNKNOWN_SMALL=1
uint8 UNKNOWN_BIG=2
uint8 PEDESTRIAN=3
uint8 BIKE=4
uint8 CAR=5
uint8 TRUCK=6

================================================================================
MSG: ibeo_msgs/Point2Di
int16 x
int16 y

================================================================================
MSG: ibeo_msgs/Size2D
uint16 size_x
uint16 size_y
"""
  # Pseudo-constants
  UNCLASSIFIED = 0
  UNKNOWN_SMALL = 1
  UNKNOWN_BIG = 2
  PEDESTRIAN = 3
  BIKE = 4
  CAR = 5
  TRUCK = 6

  __slots__ = ['id','age','prediction_age','relative_timestamp','reference_point','reference_point_sigma','closest_point','bounding_box_center','bounding_box_width','bounding_box_length','object_box_center','object_box_size','object_box_orientation','absolute_velocity','absolute_velocity_sigma','relative_velocity','classification','classification_age','classification_certainty','number_of_contour_points','contour_point_list']
  _slot_types = ['uint16','uint16','uint16','uint16','ibeo_msgs/Point2Di','ibeo_msgs/Point2Di','ibeo_msgs/Point2Di','ibeo_msgs/Point2Di','uint16','uint16','ibeo_msgs/Point2Di','ibeo_msgs/Size2D','int16','ibeo_msgs/Point2Di','ibeo_msgs/Size2D','ibeo_msgs/Point2Di','uint8','uint16','uint16','uint16','ibeo_msgs/Point2Di[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,age,prediction_age,relative_timestamp,reference_point,reference_point_sigma,closest_point,bounding_box_center,bounding_box_width,bounding_box_length,object_box_center,object_box_size,object_box_orientation,absolute_velocity,absolute_velocity_sigma,relative_velocity,classification,classification_age,classification_certainty,number_of_contour_points,contour_point_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object2221, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.age is None:
        self.age = 0
      if self.prediction_age is None:
        self.prediction_age = 0
      if self.relative_timestamp is None:
        self.relative_timestamp = 0
      if self.reference_point is None:
        self.reference_point = ibeo_msgs.msg.Point2Di()
      if self.reference_point_sigma is None:
        self.reference_point_sigma = ibeo_msgs.msg.Point2Di()
      if self.closest_point is None:
        self.closest_point = ibeo_msgs.msg.Point2Di()
      if self.bounding_box_center is None:
        self.bounding_box_center = ibeo_msgs.msg.Point2Di()
      if self.bounding_box_width is None:
        self.bounding_box_width = 0
      if self.bounding_box_length is None:
        self.bounding_box_length = 0
      if self.object_box_center is None:
        self.object_box_center = ibeo_msgs.msg.Point2Di()
      if self.object_box_size is None:
        self.object_box_size = ibeo_msgs.msg.Size2D()
      if self.object_box_orientation is None:
        self.object_box_orientation = 0
      if self.absolute_velocity is None:
        self.absolute_velocity = ibeo_msgs.msg.Point2Di()
      if self.absolute_velocity_sigma is None:
        self.absolute_velocity_sigma = ibeo_msgs.msg.Size2D()
      if self.relative_velocity is None:
        self.relative_velocity = ibeo_msgs.msg.Point2Di()
      if self.classification is None:
        self.classification = 0
      if self.classification_age is None:
        self.classification_age = 0
      if self.classification_certainty is None:
        self.classification_certainty = 0
      if self.number_of_contour_points is None:
        self.number_of_contour_points = 0
      if self.contour_point_list is None:
        self.contour_point_list = []
    else:
      self.id = 0
      self.age = 0
      self.prediction_age = 0
      self.relative_timestamp = 0
      self.reference_point = ibeo_msgs.msg.Point2Di()
      self.reference_point_sigma = ibeo_msgs.msg.Point2Di()
      self.closest_point = ibeo_msgs.msg.Point2Di()
      self.bounding_box_center = ibeo_msgs.msg.Point2Di()
      self.bounding_box_width = 0
      self.bounding_box_length = 0
      self.object_box_center = ibeo_msgs.msg.Point2Di()
      self.object_box_size = ibeo_msgs.msg.Size2D()
      self.object_box_orientation = 0
      self.absolute_velocity = ibeo_msgs.msg.Point2Di()
      self.absolute_velocity_sigma = ibeo_msgs.msg.Size2D()
      self.relative_velocity = ibeo_msgs.msg.Point2Di()
      self.classification = 0
      self.classification_age = 0
      self.classification_certainty = 0
      self.number_of_contour_points = 0
      self.contour_point_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4H8h2H2h2H3h2H2hB3H().pack(_x.id, _x.age, _x.prediction_age, _x.relative_timestamp, _x.reference_point.x, _x.reference_point.y, _x.reference_point_sigma.x, _x.reference_point_sigma.y, _x.closest_point.x, _x.closest_point.y, _x.bounding_box_center.x, _x.bounding_box_center.y, _x.bounding_box_width, _x.bounding_box_length, _x.object_box_center.x, _x.object_box_center.y, _x.object_box_size.size_x, _x.object_box_size.size_y, _x.object_box_orientation, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity_sigma.size_x, _x.absolute_velocity_sigma.size_y, _x.relative_velocity.x, _x.relative_velocity.y, _x.classification, _x.classification_age, _x.classification_certainty, _x.number_of_contour_points))
      length = len(self.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_point_list:
        _x = val1
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.reference_point is None:
        self.reference_point = ibeo_msgs.msg.Point2Di()
      if self.reference_point_sigma is None:
        self.reference_point_sigma = ibeo_msgs.msg.Point2Di()
      if self.closest_point is None:
        self.closest_point = ibeo_msgs.msg.Point2Di()
      if self.bounding_box_center is None:
        self.bounding_box_center = ibeo_msgs.msg.Point2Di()
      if self.object_box_center is None:
        self.object_box_center = ibeo_msgs.msg.Point2Di()
      if self.object_box_size is None:
        self.object_box_size = ibeo_msgs.msg.Size2D()
      if self.absolute_velocity is None:
        self.absolute_velocity = ibeo_msgs.msg.Point2Di()
      if self.absolute_velocity_sigma is None:
        self.absolute_velocity_sigma = ibeo_msgs.msg.Size2D()
      if self.relative_velocity is None:
        self.relative_velocity = ibeo_msgs.msg.Point2Di()
      if self.contour_point_list is None:
        self.contour_point_list = None
      end = 0
      _x = self
      start = end
      end += 57
      (_x.id, _x.age, _x.prediction_age, _x.relative_timestamp, _x.reference_point.x, _x.reference_point.y, _x.reference_point_sigma.x, _x.reference_point_sigma.y, _x.closest_point.x, _x.closest_point.y, _x.bounding_box_center.x, _x.bounding_box_center.y, _x.bounding_box_width, _x.bounding_box_length, _x.object_box_center.x, _x.object_box_center.y, _x.object_box_size.size_x, _x.object_box_size.size_y, _x.object_box_orientation, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity_sigma.size_x, _x.absolute_velocity_sigma.size_y, _x.relative_velocity.x, _x.relative_velocity.y, _x.classification, _x.classification_age, _x.classification_certainty, _x.number_of_contour_points,) = _get_struct_4H8h2H2h2H3h2H2hB3H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.Point2Di()
        _x = val1
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        self.contour_point_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4H8h2H2h2H3h2H2hB3H().pack(_x.id, _x.age, _x.prediction_age, _x.relative_timestamp, _x.reference_point.x, _x.reference_point.y, _x.reference_point_sigma.x, _x.reference_point_sigma.y, _x.closest_point.x, _x.closest_point.y, _x.bounding_box_center.x, _x.bounding_box_center.y, _x.bounding_box_width, _x.bounding_box_length, _x.object_box_center.x, _x.object_box_center.y, _x.object_box_size.size_x, _x.object_box_size.size_y, _x.object_box_orientation, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity_sigma.size_x, _x.absolute_velocity_sigma.size_y, _x.relative_velocity.x, _x.relative_velocity.y, _x.classification, _x.classification_age, _x.classification_certainty, _x.number_of_contour_points))
      length = len(self.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_point_list:
        _x = val1
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.reference_point is None:
        self.reference_point = ibeo_msgs.msg.Point2Di()
      if self.reference_point_sigma is None:
        self.reference_point_sigma = ibeo_msgs.msg.Point2Di()
      if self.closest_point is None:
        self.closest_point = ibeo_msgs.msg.Point2Di()
      if self.bounding_box_center is None:
        self.bounding_box_center = ibeo_msgs.msg.Point2Di()
      if self.object_box_center is None:
        self.object_box_center = ibeo_msgs.msg.Point2Di()
      if self.object_box_size is None:
        self.object_box_size = ibeo_msgs.msg.Size2D()
      if self.absolute_velocity is None:
        self.absolute_velocity = ibeo_msgs.msg.Point2Di()
      if self.absolute_velocity_sigma is None:
        self.absolute_velocity_sigma = ibeo_msgs.msg.Size2D()
      if self.relative_velocity is None:
        self.relative_velocity = ibeo_msgs.msg.Point2Di()
      if self.contour_point_list is None:
        self.contour_point_list = None
      end = 0
      _x = self
      start = end
      end += 57
      (_x.id, _x.age, _x.prediction_age, _x.relative_timestamp, _x.reference_point.x, _x.reference_point.y, _x.reference_point_sigma.x, _x.reference_point_sigma.y, _x.closest_point.x, _x.closest_point.y, _x.bounding_box_center.x, _x.bounding_box_center.y, _x.bounding_box_width, _x.bounding_box_length, _x.object_box_center.x, _x.object_box_center.y, _x.object_box_size.size_x, _x.object_box_size.size_y, _x.object_box_orientation, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity_sigma.size_x, _x.absolute_velocity_sigma.size_y, _x.relative_velocity.x, _x.relative_velocity.y, _x.classification, _x.classification_age, _x.classification_certainty, _x.number_of_contour_points,) = _get_struct_4H8h2H2h2H3h2H2hB3H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.Point2Di()
        _x = val1
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        self.contour_point_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4H8h2H2h2H3h2H2hB3H = None
def _get_struct_4H8h2H2h2H3h2H2hB3H():
    global _struct_4H8h2H2h2H3h2H2hB3H
    if _struct_4H8h2H2h2H3h2H2hB3H is None:
        _struct_4H8h2H2h2H3h2H2hB3H = struct.Struct("<4H8h2H2h2H3h2H2hB3H")
    return _struct_4H8h2H2h2H3h2H2hB3H
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
