# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/ScannerInfo2204.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ScannerInfo2204(genpy.Message):
  _md5sum = "3fdd091a3811a112b34b4431c6e8f360"
  _type = "ibeo_msgs/ScannerInfo2204"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 device_id
uint8 scanner_type
uint16 scan_number
float32 start_angle
float32 end_angle
float32 yaw_angle
float32 pitch_angle
float32 roll_angle
float32 offset_x
float32 offset_y
float32 offset_z

# scanner_type values
uint8 ALASCA_XT=3
uint8 LUX_ECU=4
uint8 LUX_PROTOTYPE=5
uint8 LUX=6
uint8 SCALA_B1=96
"""
  # Pseudo-constants
  ALASCA_XT = 3
  LUX_ECU = 4
  LUX_PROTOTYPE = 5
  LUX = 6
  SCALA_B1 = 96

  __slots__ = ['device_id','scanner_type','scan_number','start_angle','end_angle','yaw_angle','pitch_angle','roll_angle','offset_x','offset_y','offset_z']
  _slot_types = ['uint8','uint8','uint16','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       device_id,scanner_type,scan_number,start_angle,end_angle,yaw_angle,pitch_angle,roll_angle,offset_x,offset_y,offset_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ScannerInfo2204, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.device_id is None:
        self.device_id = 0
      if self.scanner_type is None:
        self.scanner_type = 0
      if self.scan_number is None:
        self.scan_number = 0
      if self.start_angle is None:
        self.start_angle = 0.
      if self.end_angle is None:
        self.end_angle = 0.
      if self.yaw_angle is None:
        self.yaw_angle = 0.
      if self.pitch_angle is None:
        self.pitch_angle = 0.
      if self.roll_angle is None:
        self.roll_angle = 0.
      if self.offset_x is None:
        self.offset_x = 0.
      if self.offset_y is None:
        self.offset_y = 0.
      if self.offset_z is None:
        self.offset_z = 0.
    else:
      self.device_id = 0
      self.scanner_type = 0
      self.scan_number = 0
      self.start_angle = 0.
      self.end_angle = 0.
      self.yaw_angle = 0.
      self.pitch_angle = 0.
      self.roll_angle = 0.
      self.offset_x = 0.
      self.offset_y = 0.
      self.offset_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2BH8f().pack(_x.device_id, _x.scanner_type, _x.scan_number, _x.start_angle, _x.end_angle, _x.yaw_angle, _x.pitch_angle, _x.roll_angle, _x.offset_x, _x.offset_y, _x.offset_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.device_id, _x.scanner_type, _x.scan_number, _x.start_angle, _x.end_angle, _x.yaw_angle, _x.pitch_angle, _x.roll_angle, _x.offset_x, _x.offset_y, _x.offset_z,) = _get_struct_2BH8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2BH8f().pack(_x.device_id, _x.scanner_type, _x.scan_number, _x.start_angle, _x.end_angle, _x.yaw_angle, _x.pitch_angle, _x.roll_angle, _x.offset_x, _x.offset_y, _x.offset_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.device_id, _x.scanner_type, _x.scan_number, _x.start_angle, _x.end_angle, _x.yaw_angle, _x.pitch_angle, _x.roll_angle, _x.offset_x, _x.offset_y, _x.offset_z,) = _get_struct_2BH8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BH8f = None
def _get_struct_2BH8f():
    global _struct_2BH8f
    if _struct_2BH8f is None:
        _struct_2BH8f = struct.Struct("<2BH8f")
    return _struct_2BH8f
