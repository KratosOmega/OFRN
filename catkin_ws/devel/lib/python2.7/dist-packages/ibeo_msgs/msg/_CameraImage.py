# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/CameraImage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import ibeo_msgs.msg
import std_msgs.msg

class CameraImage(genpy.Message):
  _md5sum = "34f89114922a67ac437884ceee90f9d3"
  _type = "ibeo_msgs/CameraImage"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

IbeoDataHeader ibeo_header
uint16 image_format
uint32 us_since_power_on
time timestamp
uint8 device_id
MountingPositionF mounting_position
float64 horizontal_opening_angle
float64 vertical_opening_angle
uint16 image_width
uint16 image_height
uint32 compressed_size
uint8[] image_buffer

# image_format values
uint16 JPEG=0
uint16 MJPEG=1
uint16 GRAY8=2
uint16 YUV420=3
uint16 YUV422=4

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ibeo_msgs/IbeoDataHeader
uint32 previous_message_size
uint32 message_size
uint8 device_id
uint16 data_type_id
time stamp

================================================================================
MSG: ibeo_msgs/MountingPositionF
float32 yaw_angle
float32 pitch_angle
float32 roll_angle
float32 x_position
float32 y_position
float32 z_position
"""
  # Pseudo-constants
  JPEG = 0
  MJPEG = 1
  GRAY8 = 2
  YUV420 = 3
  YUV422 = 4

  __slots__ = ['header','ibeo_header','image_format','us_since_power_on','timestamp','device_id','mounting_position','horizontal_opening_angle','vertical_opening_angle','image_width','image_height','compressed_size','image_buffer']
  _slot_types = ['std_msgs/Header','ibeo_msgs/IbeoDataHeader','uint16','uint32','time','uint8','ibeo_msgs/MountingPositionF','float64','float64','uint16','uint16','uint32','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ibeo_header,image_format,us_since_power_on,timestamp,device_id,mounting_position,horizontal_opening_angle,vertical_opening_angle,image_width,image_height,compressed_size,image_buffer

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraImage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.image_format is None:
        self.image_format = 0
      if self.us_since_power_on is None:
        self.us_since_power_on = 0
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.device_id is None:
        self.device_id = 0
      if self.mounting_position is None:
        self.mounting_position = ibeo_msgs.msg.MountingPositionF()
      if self.horizontal_opening_angle is None:
        self.horizontal_opening_angle = 0.
      if self.vertical_opening_angle is None:
        self.vertical_opening_angle = 0.
      if self.image_width is None:
        self.image_width = 0
      if self.image_height is None:
        self.image_height = 0
      if self.compressed_size is None:
        self.compressed_size = 0
      if self.image_buffer is None:
        self.image_buffer = b''
    else:
      self.header = std_msgs.msg.Header()
      self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      self.image_format = 0
      self.us_since_power_on = 0
      self.timestamp = genpy.Time()
      self.device_id = 0
      self.mounting_position = ibeo_msgs.msg.MountingPositionF()
      self.horizontal_opening_angle = 0.
      self.vertical_opening_angle = 0.
      self.image_width = 0
      self.image_height = 0
      self.compressed_size = 0
      self.image_buffer = b''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2IBH2IH3IB6f2d2HI().pack(_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.image_format, _x.us_since_power_on, _x.timestamp.secs, _x.timestamp.nsecs, _x.device_id, _x.mounting_position.yaw_angle, _x.mounting_position.pitch_angle, _x.mounting_position.roll_angle, _x.mounting_position.x_position, _x.mounting_position.y_position, _x.mounting_position.z_position, _x.horizontal_opening_angle, _x.vertical_opening_angle, _x.image_width, _x.image_height, _x.compressed_size))
      _x = self.image_buffer
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.mounting_position is None:
        self.mounting_position = ibeo_msgs.msg.MountingPositionF()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.image_format, _x.us_since_power_on, _x.timestamp.secs, _x.timestamp.nsecs, _x.device_id, _x.mounting_position.yaw_angle, _x.mounting_position.pitch_angle, _x.mounting_position.roll_angle, _x.mounting_position.x_position, _x.mounting_position.y_position, _x.mounting_position.z_position, _x.horizontal_opening_angle, _x.vertical_opening_angle, _x.image_width, _x.image_height, _x.compressed_size,) = _get_struct_2IBH2IH3IB6f2d2HI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_buffer = str[start:end]
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2IBH2IH3IB6f2d2HI().pack(_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.image_format, _x.us_since_power_on, _x.timestamp.secs, _x.timestamp.nsecs, _x.device_id, _x.mounting_position.yaw_angle, _x.mounting_position.pitch_angle, _x.mounting_position.roll_angle, _x.mounting_position.x_position, _x.mounting_position.y_position, _x.mounting_position.z_position, _x.horizontal_opening_angle, _x.vertical_opening_angle, _x.image_width, _x.image_height, _x.compressed_size))
      _x = self.image_buffer
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.mounting_position is None:
        self.mounting_position = ibeo_msgs.msg.MountingPositionF()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.image_format, _x.us_since_power_on, _x.timestamp.secs, _x.timestamp.nsecs, _x.device_id, _x.mounting_position.yaw_angle, _x.mounting_position.pitch_angle, _x.mounting_position.roll_angle, _x.mounting_position.x_position, _x.mounting_position.y_position, _x.mounting_position.z_position, _x.horizontal_opening_angle, _x.vertical_opening_angle, _x.image_width, _x.image_height, _x.compressed_size,) = _get_struct_2IBH2IH3IB6f2d2HI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_buffer = str[start:end]
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IBH2IH3IB6f2d2HI = None
def _get_struct_2IBH2IH3IB6f2d2HI():
    global _struct_2IBH2IH3IB6f2d2HI
    if _struct_2IBH2IH3IB6f2d2HI is None:
        _struct_2IBH2IH3IB6f2d2HI = struct.Struct("<2IBH2IH3IB6f2d2HI")
    return _struct_2IBH2IH3IB6f2d2HI
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
