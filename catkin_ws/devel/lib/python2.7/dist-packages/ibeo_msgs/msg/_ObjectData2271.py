# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/ObjectData2271.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import ibeo_msgs.msg
import std_msgs.msg

class ObjectData2271(genpy.Message):
  _md5sum = "72a0f82708bf62c27b56d9ec8ade7764"
  _type = "ibeo_msgs/ObjectData2271"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

IbeoDataHeader ibeo_header
time start_scan_timestamp
uint16 scan_number
uint16 number_of_objects
Object2271[] object_list

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ibeo_msgs/IbeoDataHeader
uint32 previous_message_size
uint32 message_size
uint8 device_id
uint16 data_type_id
time stamp

================================================================================
MSG: ibeo_msgs/Object2271
uint32 id
bool tracked_properties_available
bool untracked_properties_available
TrackedProperties tracked_properties
UntrackedProperties untracked_properties

================================================================================
MSG: ibeo_msgs/TrackedProperties
uint16 object_age
uint16 hidden_status_age
uint8 object_phase
uint8 dynamic_property
uint16 relative_time_of_measure
Point2Di position_closest_point
Point2Di relative_velocity
Point2Dui relative_velocity_sigma
uint8 classification
uint16 classification_age
Point2Di object_box_size
Point2Dui object_box_size_sigma
int16 object_box_orientation
uint16 object_box_orientation_sigma
uint8 tracking_point_location
Point2Di tracking_point_coordinate
Point2Dui tracking_point_coordinate_sigma
Point2Di velocity
Point2Dui velocity_sigma
Point2Di acceleration
Point2Dui acceleration_sigma
int16 yaw_rate
uint16 yaw_rate_sigma
uint8 number_of_contour_points
ContourPointSigma[] contour_point_list

# object_phase values
uint8 INITIALIZATION_PHASE=0
uint8 TRACKING_PHASE=1

# dynamic_property values
uint8 DYNAMIC_AND_MOVING=0
uint8 DYNAMIC_AND_STOPPED=1
uint8 A_PRIORI_STATIONARY=2

# classification values
uint8 UNCLASSIFIED=0
uint8 UNKNOWN_SMALL=1
uint8 UNKNOWN_BIG=2
uint8 PEDESTRIAN=3
uint8 BIKE=4
uint8 CAR=5
uint8 TRUCK=6
uint8 OVER_DRIVABLE=10
uint8 UNDER_DRIVABLE=11

# tracking_point_location values
uint8 CENTER_OF_GRAVITY=0
uint8 TOP_FRONT_LEFT_CORNER=1
uint8 TOP_FRONT_RIGHT_CORNER=2
uint8 BOTTOM_REAR_RIGHT_CORNER=3
uint8 BOTTOM_REAR_LEFT_CORNER=4
uint8 CENTER_OF_TOP_FRONT_EDGE=5
uint8 CENTER_OF_RIGHT_EDGE=6
uint8 CENTER_OF_BOTTOM_REAR_EDGE=7
uint8 CENTER_OF_LEFT_EDGE=8
uint8 BOX_CENTER=9
uint8 INVALID=255

================================================================================
MSG: ibeo_msgs/Point2Di
int16 x
int16 y

================================================================================
MSG: ibeo_msgs/Point2Dui
uint16 x
uint16 y

================================================================================
MSG: ibeo_msgs/ContourPointSigma
int16 x
int16 y
uint8 x_sigma
uint8 y_sigma

================================================================================
MSG: ibeo_msgs/UntrackedProperties
uint16 relative_time_of_measurement
Point2Di position_closest_point
Point2Di object_box_size
Point2Dui object_box_size_sigma
int16 object_box_orientation
uint16 object_box_orientation_sigma
Point2Di tracking_point_coordinate
Point2Dui tracking_point_coordinate_sigma
uint8 number_of_contour_points
ContourPointSigma[] contour_point_list
"""
  __slots__ = ['header','ibeo_header','start_scan_timestamp','scan_number','number_of_objects','object_list']
  _slot_types = ['std_msgs/Header','ibeo_msgs/IbeoDataHeader','time','uint16','uint16','ibeo_msgs/Object2271[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ibeo_header,start_scan_timestamp,scan_number,number_of_objects,object_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectData2271, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.start_scan_timestamp is None:
        self.start_scan_timestamp = genpy.Time()
      if self.scan_number is None:
        self.scan_number = 0
      if self.number_of_objects is None:
        self.number_of_objects = 0
      if self.object_list is None:
        self.object_list = []
    else:
      self.header = std_msgs.msg.Header()
      self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      self.start_scan_timestamp = genpy.Time()
      self.scan_number = 0
      self.number_of_objects = 0
      self.object_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2IBH4I2H().pack(_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.start_scan_timestamp.secs, _x.start_scan_timestamp.nsecs, _x.scan_number, _x.number_of_objects))
      length = len(self.object_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_list:
        _x = val1
        buff.write(_get_struct_I2B().pack(_x.id, _x.tracked_properties_available, _x.untracked_properties_available))
        _v1 = val1.tracked_properties
        _x = _v1
        buff.write(_get_struct_2H2BH().pack(_x.object_age, _x.hidden_status_age, _x.object_phase, _x.dynamic_property, _x.relative_time_of_measure))
        _v2 = _v1.position_closest_point
        _x = _v2
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v3 = _v1.relative_velocity
        _x = _v3
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v4 = _v1.relative_velocity_sigma
        _x = _v4
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        _x = _v1
        buff.write(_get_struct_BH().pack(_x.classification, _x.classification_age))
        _v5 = _v1.object_box_size
        _x = _v5
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v6 = _v1.object_box_size_sigma
        _x = _v6
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        _x = _v1
        buff.write(_get_struct_hHB().pack(_x.object_box_orientation, _x.object_box_orientation_sigma, _x.tracking_point_location))
        _v7 = _v1.tracking_point_coordinate
        _x = _v7
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v8 = _v1.tracking_point_coordinate_sigma
        _x = _v8
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        _v9 = _v1.velocity
        _x = _v9
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v10 = _v1.velocity_sigma
        _x = _v10
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        _v11 = _v1.acceleration
        _x = _v11
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v12 = _v1.acceleration_sigma
        _x = _v12
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        _x = _v1
        buff.write(_get_struct_hHB().pack(_x.yaw_rate, _x.yaw_rate_sigma, _x.number_of_contour_points))
        length = len(_v1.contour_point_list)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.contour_point_list:
          _x = val3
          buff.write(_get_struct_2h2B().pack(_x.x, _x.y, _x.x_sigma, _x.y_sigma))
        _v13 = val1.untracked_properties
        buff.write(_get_struct_H().pack(_v13.relative_time_of_measurement))
        _v14 = _v13.position_closest_point
        _x = _v14
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v15 = _v13.object_box_size
        _x = _v15
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v16 = _v13.object_box_size_sigma
        _x = _v16
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        _x = _v13
        buff.write(_get_struct_hH().pack(_x.object_box_orientation, _x.object_box_orientation_sigma))
        _v17 = _v13.tracking_point_coordinate
        _x = _v17
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v18 = _v13.tracking_point_coordinate_sigma
        _x = _v18
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        buff.write(_get_struct_B().pack(_v13.number_of_contour_points))
        length = len(_v13.contour_point_list)
        buff.write(_struct_I.pack(length))
        for val3 in _v13.contour_point_list:
          _x = val3
          buff.write(_get_struct_2h2B().pack(_x.x, _x.y, _x.x_sigma, _x.y_sigma))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.start_scan_timestamp is None:
        self.start_scan_timestamp = genpy.Time()
      if self.object_list is None:
        self.object_list = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.start_scan_timestamp.secs, _x.start_scan_timestamp.nsecs, _x.scan_number, _x.number_of_objects,) = _get_struct_2IBH4I2H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.Object2271()
        _x = val1
        start = end
        end += 6
        (_x.id, _x.tracked_properties_available, _x.untracked_properties_available,) = _get_struct_I2B().unpack(str[start:end])
        val1.tracked_properties_available = bool(val1.tracked_properties_available)
        val1.untracked_properties_available = bool(val1.untracked_properties_available)
        _v19 = val1.tracked_properties
        _x = _v19
        start = end
        end += 8
        (_x.object_age, _x.hidden_status_age, _x.object_phase, _x.dynamic_property, _x.relative_time_of_measure,) = _get_struct_2H2BH().unpack(str[start:end])
        _v20 = _v19.position_closest_point
        _x = _v20
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v21 = _v19.relative_velocity
        _x = _v21
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v22 = _v19.relative_velocity_sigma
        _x = _v22
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        _x = _v19
        start = end
        end += 3
        (_x.classification, _x.classification_age,) = _get_struct_BH().unpack(str[start:end])
        _v23 = _v19.object_box_size
        _x = _v23
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v24 = _v19.object_box_size_sigma
        _x = _v24
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        _x = _v19
        start = end
        end += 5
        (_x.object_box_orientation, _x.object_box_orientation_sigma, _x.tracking_point_location,) = _get_struct_hHB().unpack(str[start:end])
        _v25 = _v19.tracking_point_coordinate
        _x = _v25
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v26 = _v19.tracking_point_coordinate_sigma
        _x = _v26
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        _v27 = _v19.velocity
        _x = _v27
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v28 = _v19.velocity_sigma
        _x = _v28
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        _v29 = _v19.acceleration
        _x = _v29
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v30 = _v19.acceleration_sigma
        _x = _v30
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        _x = _v19
        start = end
        end += 5
        (_x.yaw_rate, _x.yaw_rate_sigma, _x.number_of_contour_points,) = _get_struct_hHB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v19.contour_point_list = []
        for i in range(0, length):
          val3 = ibeo_msgs.msg.ContourPointSigma()
          _x = val3
          start = end
          end += 6
          (_x.x, _x.y, _x.x_sigma, _x.y_sigma,) = _get_struct_2h2B().unpack(str[start:end])
          _v19.contour_point_list.append(val3)
        _v31 = val1.untracked_properties
        start = end
        end += 2
        (_v31.relative_time_of_measurement,) = _get_struct_H().unpack(str[start:end])
        _v32 = _v31.position_closest_point
        _x = _v32
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v33 = _v31.object_box_size
        _x = _v33
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v34 = _v31.object_box_size_sigma
        _x = _v34
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        _x = _v31
        start = end
        end += 4
        (_x.object_box_orientation, _x.object_box_orientation_sigma,) = _get_struct_hH().unpack(str[start:end])
        _v35 = _v31.tracking_point_coordinate
        _x = _v35
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v36 = _v31.tracking_point_coordinate_sigma
        _x = _v36
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        start = end
        end += 1
        (_v31.number_of_contour_points,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v31.contour_point_list = []
        for i in range(0, length):
          val3 = ibeo_msgs.msg.ContourPointSigma()
          _x = val3
          start = end
          end += 6
          (_x.x, _x.y, _x.x_sigma, _x.y_sigma,) = _get_struct_2h2B().unpack(str[start:end])
          _v31.contour_point_list.append(val3)
        self.object_list.append(val1)
      self.start_scan_timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2IBH4I2H().pack(_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.start_scan_timestamp.secs, _x.start_scan_timestamp.nsecs, _x.scan_number, _x.number_of_objects))
      length = len(self.object_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_list:
        _x = val1
        buff.write(_get_struct_I2B().pack(_x.id, _x.tracked_properties_available, _x.untracked_properties_available))
        _v37 = val1.tracked_properties
        _x = _v37
        buff.write(_get_struct_2H2BH().pack(_x.object_age, _x.hidden_status_age, _x.object_phase, _x.dynamic_property, _x.relative_time_of_measure))
        _v38 = _v37.position_closest_point
        _x = _v38
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v39 = _v37.relative_velocity
        _x = _v39
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v40 = _v37.relative_velocity_sigma
        _x = _v40
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        _x = _v37
        buff.write(_get_struct_BH().pack(_x.classification, _x.classification_age))
        _v41 = _v37.object_box_size
        _x = _v41
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v42 = _v37.object_box_size_sigma
        _x = _v42
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        _x = _v37
        buff.write(_get_struct_hHB().pack(_x.object_box_orientation, _x.object_box_orientation_sigma, _x.tracking_point_location))
        _v43 = _v37.tracking_point_coordinate
        _x = _v43
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v44 = _v37.tracking_point_coordinate_sigma
        _x = _v44
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        _v45 = _v37.velocity
        _x = _v45
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v46 = _v37.velocity_sigma
        _x = _v46
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        _v47 = _v37.acceleration
        _x = _v47
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v48 = _v37.acceleration_sigma
        _x = _v48
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        _x = _v37
        buff.write(_get_struct_hHB().pack(_x.yaw_rate, _x.yaw_rate_sigma, _x.number_of_contour_points))
        length = len(_v37.contour_point_list)
        buff.write(_struct_I.pack(length))
        for val3 in _v37.contour_point_list:
          _x = val3
          buff.write(_get_struct_2h2B().pack(_x.x, _x.y, _x.x_sigma, _x.y_sigma))
        _v49 = val1.untracked_properties
        buff.write(_get_struct_H().pack(_v49.relative_time_of_measurement))
        _v50 = _v49.position_closest_point
        _x = _v50
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v51 = _v49.object_box_size
        _x = _v51
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v52 = _v49.object_box_size_sigma
        _x = _v52
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        _x = _v49
        buff.write(_get_struct_hH().pack(_x.object_box_orientation, _x.object_box_orientation_sigma))
        _v53 = _v49.tracking_point_coordinate
        _x = _v53
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v54 = _v49.tracking_point_coordinate_sigma
        _x = _v54
        buff.write(_get_struct_2H().pack(_x.x, _x.y))
        buff.write(_get_struct_B().pack(_v49.number_of_contour_points))
        length = len(_v49.contour_point_list)
        buff.write(_struct_I.pack(length))
        for val3 in _v49.contour_point_list:
          _x = val3
          buff.write(_get_struct_2h2B().pack(_x.x, _x.y, _x.x_sigma, _x.y_sigma))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.start_scan_timestamp is None:
        self.start_scan_timestamp = genpy.Time()
      if self.object_list is None:
        self.object_list = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.start_scan_timestamp.secs, _x.start_scan_timestamp.nsecs, _x.scan_number, _x.number_of_objects,) = _get_struct_2IBH4I2H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.Object2271()
        _x = val1
        start = end
        end += 6
        (_x.id, _x.tracked_properties_available, _x.untracked_properties_available,) = _get_struct_I2B().unpack(str[start:end])
        val1.tracked_properties_available = bool(val1.tracked_properties_available)
        val1.untracked_properties_available = bool(val1.untracked_properties_available)
        _v55 = val1.tracked_properties
        _x = _v55
        start = end
        end += 8
        (_x.object_age, _x.hidden_status_age, _x.object_phase, _x.dynamic_property, _x.relative_time_of_measure,) = _get_struct_2H2BH().unpack(str[start:end])
        _v56 = _v55.position_closest_point
        _x = _v56
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v57 = _v55.relative_velocity
        _x = _v57
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v58 = _v55.relative_velocity_sigma
        _x = _v58
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        _x = _v55
        start = end
        end += 3
        (_x.classification, _x.classification_age,) = _get_struct_BH().unpack(str[start:end])
        _v59 = _v55.object_box_size
        _x = _v59
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v60 = _v55.object_box_size_sigma
        _x = _v60
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        _x = _v55
        start = end
        end += 5
        (_x.object_box_orientation, _x.object_box_orientation_sigma, _x.tracking_point_location,) = _get_struct_hHB().unpack(str[start:end])
        _v61 = _v55.tracking_point_coordinate
        _x = _v61
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v62 = _v55.tracking_point_coordinate_sigma
        _x = _v62
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        _v63 = _v55.velocity
        _x = _v63
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v64 = _v55.velocity_sigma
        _x = _v64
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        _v65 = _v55.acceleration
        _x = _v65
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v66 = _v55.acceleration_sigma
        _x = _v66
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        _x = _v55
        start = end
        end += 5
        (_x.yaw_rate, _x.yaw_rate_sigma, _x.number_of_contour_points,) = _get_struct_hHB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v55.contour_point_list = []
        for i in range(0, length):
          val3 = ibeo_msgs.msg.ContourPointSigma()
          _x = val3
          start = end
          end += 6
          (_x.x, _x.y, _x.x_sigma, _x.y_sigma,) = _get_struct_2h2B().unpack(str[start:end])
          _v55.contour_point_list.append(val3)
        _v67 = val1.untracked_properties
        start = end
        end += 2
        (_v67.relative_time_of_measurement,) = _get_struct_H().unpack(str[start:end])
        _v68 = _v67.position_closest_point
        _x = _v68
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v69 = _v67.object_box_size
        _x = _v69
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v70 = _v67.object_box_size_sigma
        _x = _v70
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        _x = _v67
        start = end
        end += 4
        (_x.object_box_orientation, _x.object_box_orientation_sigma,) = _get_struct_hH().unpack(str[start:end])
        _v71 = _v67.tracking_point_coordinate
        _x = _v71
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v72 = _v67.tracking_point_coordinate_sigma
        _x = _v72
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2H().unpack(str[start:end])
        start = end
        end += 1
        (_v67.number_of_contour_points,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v67.contour_point_list = []
        for i in range(0, length):
          val3 = ibeo_msgs.msg.ContourPointSigma()
          _x = val3
          start = end
          end += 6
          (_x.x, _x.y, _x.x_sigma, _x.y_sigma,) = _get_struct_2h2B().unpack(str[start:end])
          _v67.contour_point_list.append(val3)
        self.object_list.append(val1)
      self.start_scan_timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H2BH = None
def _get_struct_2H2BH():
    global _struct_2H2BH
    if _struct_2H2BH is None:
        _struct_2H2BH = struct.Struct("<2H2BH")
    return _struct_2H2BH
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
_struct_BH = None
def _get_struct_BH():
    global _struct_BH
    if _struct_BH is None:
        _struct_BH = struct.Struct("<BH")
    return _struct_BH
_struct_hH = None
def _get_struct_hH():
    global _struct_hH
    if _struct_hH is None:
        _struct_hH = struct.Struct("<hH")
    return _struct_hH
_struct_hHB = None
def _get_struct_hHB():
    global _struct_hHB
    if _struct_hHB is None:
        _struct_hHB = struct.Struct("<hHB")
    return _struct_hHB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_2h2B = None
def _get_struct_2h2B():
    global _struct_2h2B
    if _struct_2h2B is None:
        _struct_2h2B = struct.Struct("<2h2B")
    return _struct_2h2B
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_I2B = None
def _get_struct_I2B():
    global _struct_I2B
    if _struct_I2B is None:
        _struct_I2B = struct.Struct("<I2B")
    return _struct_I2B
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
_struct_2IBH4I2H = None
def _get_struct_2IBH4I2H():
    global _struct_2IBH4I2H
    if _struct_2IBH4I2H is None:
        _struct_2IBH4I2H = struct.Struct("<2IBH4I2H")
    return _struct_2IBH4I2H
