# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/ScanData2205.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import ibeo_msgs.msg
import std_msgs.msg

class ScanData2205(genpy.Message):
  _md5sum = "dd96693e46c44a2b405ce82587e7e698"
  _type = "ibeo_msgs/ScanData2205"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

IbeoDataHeader ibeo_header
time scan_start_time
uint8 scan_end_time_offset
bool fused_scan
uint8 mirror_side
uint8 coordinate_system
uint16 scan_number
uint16 scan_points
uint8 number_of_scanner_infos
ScannerInfo2205[] scanner_info_list
ScanPoint2205[] scan_point_list

# mirror_side values
uint8 FRONT=0
uint8 REAR=1

# coordinate_system values
uint8 SCANNER=0
uint8 VEHICLE=1

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ibeo_msgs/IbeoDataHeader
uint32 previous_message_size
uint32 message_size
uint8 device_id
uint16 data_type_id
time stamp

================================================================================
MSG: ibeo_msgs/ScannerInfo2205
uint8 device_id
uint8 scanner_type
uint16 scan_number
float32 start_angle
float32 end_angle
time scan_start_time
time scan_end_time
time scan_start_time_from_device
time scan_end_time_from_device
float32 scan_frequency
float32 beam_tilt
uint32 scan_flags
MountingPositionF mounting_position
ResolutionInfo[8] resolutions

# scanner_type values
uint8 ALASCA_XT=3
uint8 LUX_ECU=4
uint8 LUX_PROTOTYPE=5
uint8 LUX=6
uint8 SCALA_B1=96

================================================================================
MSG: ibeo_msgs/MountingPositionF
float32 yaw_angle
float32 pitch_angle
float32 roll_angle
float32 x_position
float32 y_position
float32 z_position

================================================================================
MSG: ibeo_msgs/ResolutionInfo
float32 resolution_start_angle
float32 resolution

================================================================================
MSG: ibeo_msgs/ScanPoint2205
float32 x_position
float32 y_position
float32 z_position
float32 echo_width
uint8 device_id
uint8 layer
uint8 echo
uint32 time_offset
bool ground
bool dirt
bool precipitation
bool transparent
"""
  # Pseudo-constants
  FRONT = 0
  REAR = 1
  SCANNER = 0
  VEHICLE = 1

  __slots__ = ['header','ibeo_header','scan_start_time','scan_end_time_offset','fused_scan','mirror_side','coordinate_system','scan_number','scan_points','number_of_scanner_infos','scanner_info_list','scan_point_list']
  _slot_types = ['std_msgs/Header','ibeo_msgs/IbeoDataHeader','time','uint8','bool','uint8','uint8','uint16','uint16','uint8','ibeo_msgs/ScannerInfo2205[]','ibeo_msgs/ScanPoint2205[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ibeo_header,scan_start_time,scan_end_time_offset,fused_scan,mirror_side,coordinate_system,scan_number,scan_points,number_of_scanner_infos,scanner_info_list,scan_point_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ScanData2205, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.scan_start_time is None:
        self.scan_start_time = genpy.Time()
      if self.scan_end_time_offset is None:
        self.scan_end_time_offset = 0
      if self.fused_scan is None:
        self.fused_scan = False
      if self.mirror_side is None:
        self.mirror_side = 0
      if self.coordinate_system is None:
        self.coordinate_system = 0
      if self.scan_number is None:
        self.scan_number = 0
      if self.scan_points is None:
        self.scan_points = 0
      if self.number_of_scanner_infos is None:
        self.number_of_scanner_infos = 0
      if self.scanner_info_list is None:
        self.scanner_info_list = []
      if self.scan_point_list is None:
        self.scan_point_list = []
    else:
      self.header = std_msgs.msg.Header()
      self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      self.scan_start_time = genpy.Time()
      self.scan_end_time_offset = 0
      self.fused_scan = False
      self.mirror_side = 0
      self.coordinate_system = 0
      self.scan_number = 0
      self.scan_points = 0
      self.number_of_scanner_infos = 0
      self.scanner_info_list = []
      self.scan_point_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2IBH4I4B2HB().pack(_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.scan_start_time.secs, _x.scan_start_time.nsecs, _x.scan_end_time_offset, _x.fused_scan, _x.mirror_side, _x.coordinate_system, _x.scan_number, _x.scan_points, _x.number_of_scanner_infos))
      length = len(self.scanner_info_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.scanner_info_list:
        _x = val1
        buff.write(_get_struct_2BH2f().pack(_x.device_id, _x.scanner_type, _x.scan_number, _x.start_angle, _x.end_angle))
        _v1 = val1.scan_start_time
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v2 = val1.scan_end_time
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v3 = val1.scan_start_time_from_device
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v4 = val1.scan_end_time_from_device
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_2fI().pack(_x.scan_frequency, _x.beam_tilt, _x.scan_flags))
        _v5 = val1.mounting_position
        _x = _v5
        buff.write(_get_struct_6f().pack(_x.yaw_angle, _x.pitch_angle, _x.roll_angle, _x.x_position, _x.y_position, _x.z_position))
        for val2 in val1.resolutions:
          _x = val2
          buff.write(_get_struct_2f().pack(_x.resolution_start_angle, _x.resolution))
      length = len(self.scan_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.scan_point_list:
        _x = val1
        buff.write(_get_struct_4f3BI4B().pack(_x.x_position, _x.y_position, _x.z_position, _x.echo_width, _x.device_id, _x.layer, _x.echo, _x.time_offset, _x.ground, _x.dirt, _x.precipitation, _x.transparent))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.scan_start_time is None:
        self.scan_start_time = genpy.Time()
      if self.scanner_info_list is None:
        self.scanner_info_list = None
      if self.scan_point_list is None:
        self.scan_point_list = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.scan_start_time.secs, _x.scan_start_time.nsecs, _x.scan_end_time_offset, _x.fused_scan, _x.mirror_side, _x.coordinate_system, _x.scan_number, _x.scan_points, _x.number_of_scanner_infos,) = _get_struct_2IBH4I4B2HB().unpack(str[start:end])
      self.fused_scan = bool(self.fused_scan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.scanner_info_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.ScannerInfo2205()
        _x = val1
        start = end
        end += 12
        (_x.device_id, _x.scanner_type, _x.scan_number, _x.start_angle, _x.end_angle,) = _get_struct_2BH2f().unpack(str[start:end])
        _v6 = val1.scan_start_time
        _x = _v6
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v7 = val1.scan_end_time
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v8 = val1.scan_start_time_from_device
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v9 = val1.scan_end_time_from_device
        _x = _v9
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.scan_frequency, _x.beam_tilt, _x.scan_flags,) = _get_struct_2fI().unpack(str[start:end])
        _v10 = val1.mounting_position
        _x = _v10
        start = end
        end += 24
        (_x.yaw_angle, _x.pitch_angle, _x.roll_angle, _x.x_position, _x.y_position, _x.z_position,) = _get_struct_6f().unpack(str[start:end])
        val1.resolutions = []
        for i in range(0, 8):
          val2 = ibeo_msgs.msg.ResolutionInfo()
          _x = val2
          start = end
          end += 8
          (_x.resolution_start_angle, _x.resolution,) = _get_struct_2f().unpack(str[start:end])
          val1.resolutions.append(val2)
        self.scanner_info_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.scan_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.ScanPoint2205()
        _x = val1
        start = end
        end += 27
        (_x.x_position, _x.y_position, _x.z_position, _x.echo_width, _x.device_id, _x.layer, _x.echo, _x.time_offset, _x.ground, _x.dirt, _x.precipitation, _x.transparent,) = _get_struct_4f3BI4B().unpack(str[start:end])
        val1.ground = bool(val1.ground)
        val1.dirt = bool(val1.dirt)
        val1.precipitation = bool(val1.precipitation)
        val1.transparent = bool(val1.transparent)
        self.scan_point_list.append(val1)
      self.scan_start_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2IBH4I4B2HB().pack(_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.scan_start_time.secs, _x.scan_start_time.nsecs, _x.scan_end_time_offset, _x.fused_scan, _x.mirror_side, _x.coordinate_system, _x.scan_number, _x.scan_points, _x.number_of_scanner_infos))
      length = len(self.scanner_info_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.scanner_info_list:
        _x = val1
        buff.write(_get_struct_2BH2f().pack(_x.device_id, _x.scanner_type, _x.scan_number, _x.start_angle, _x.end_angle))
        _v11 = val1.scan_start_time
        _x = _v11
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v12 = val1.scan_end_time
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v13 = val1.scan_start_time_from_device
        _x = _v13
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v14 = val1.scan_end_time_from_device
        _x = _v14
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_2fI().pack(_x.scan_frequency, _x.beam_tilt, _x.scan_flags))
        _v15 = val1.mounting_position
        _x = _v15
        buff.write(_get_struct_6f().pack(_x.yaw_angle, _x.pitch_angle, _x.roll_angle, _x.x_position, _x.y_position, _x.z_position))
        for val2 in val1.resolutions:
          _x = val2
          buff.write(_get_struct_2f().pack(_x.resolution_start_angle, _x.resolution))
      length = len(self.scan_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.scan_point_list:
        _x = val1
        buff.write(_get_struct_4f3BI4B().pack(_x.x_position, _x.y_position, _x.z_position, _x.echo_width, _x.device_id, _x.layer, _x.echo, _x.time_offset, _x.ground, _x.dirt, _x.precipitation, _x.transparent))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.scan_start_time is None:
        self.scan_start_time = genpy.Time()
      if self.scanner_info_list is None:
        self.scanner_info_list = None
      if self.scan_point_list is None:
        self.scan_point_list = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.scan_start_time.secs, _x.scan_start_time.nsecs, _x.scan_end_time_offset, _x.fused_scan, _x.mirror_side, _x.coordinate_system, _x.scan_number, _x.scan_points, _x.number_of_scanner_infos,) = _get_struct_2IBH4I4B2HB().unpack(str[start:end])
      self.fused_scan = bool(self.fused_scan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.scanner_info_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.ScannerInfo2205()
        _x = val1
        start = end
        end += 12
        (_x.device_id, _x.scanner_type, _x.scan_number, _x.start_angle, _x.end_angle,) = _get_struct_2BH2f().unpack(str[start:end])
        _v16 = val1.scan_start_time
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v17 = val1.scan_end_time
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v18 = val1.scan_start_time_from_device
        _x = _v18
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v19 = val1.scan_end_time_from_device
        _x = _v19
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.scan_frequency, _x.beam_tilt, _x.scan_flags,) = _get_struct_2fI().unpack(str[start:end])
        _v20 = val1.mounting_position
        _x = _v20
        start = end
        end += 24
        (_x.yaw_angle, _x.pitch_angle, _x.roll_angle, _x.x_position, _x.y_position, _x.z_position,) = _get_struct_6f().unpack(str[start:end])
        val1.resolutions = []
        for i in range(0, 8):
          val2 = ibeo_msgs.msg.ResolutionInfo()
          _x = val2
          start = end
          end += 8
          (_x.resolution_start_angle, _x.resolution,) = _get_struct_2f().unpack(str[start:end])
          val1.resolutions.append(val2)
        self.scanner_info_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.scan_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.ScanPoint2205()
        _x = val1
        start = end
        end += 27
        (_x.x_position, _x.y_position, _x.z_position, _x.echo_width, _x.device_id, _x.layer, _x.echo, _x.time_offset, _x.ground, _x.dirt, _x.precipitation, _x.transparent,) = _get_struct_4f3BI4B().unpack(str[start:end])
        val1.ground = bool(val1.ground)
        val1.dirt = bool(val1.dirt)
        val1.precipitation = bool(val1.precipitation)
        val1.transparent = bool(val1.transparent)
        self.scan_point_list.append(val1)
      self.scan_start_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_4f3BI4B = None
def _get_struct_4f3BI4B():
    global _struct_4f3BI4B
    if _struct_4f3BI4B is None:
        _struct_4f3BI4B = struct.Struct("<4f3BI4B")
    return _struct_4f3BI4B
_struct_2BH2f = None
def _get_struct_2BH2f():
    global _struct_2BH2f
    if _struct_2BH2f is None:
        _struct_2BH2f = struct.Struct("<2BH2f")
    return _struct_2BH2f
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2IBH4I4B2HB = None
def _get_struct_2IBH4I4B2HB():
    global _struct_2IBH4I4B2HB
    if _struct_2IBH4I4B2HB is None:
        _struct_2IBH4I4B2HB = struct.Struct("<2IBH4I4B2HB")
    return _struct_2IBH4I4B2HB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2fI = None
def _get_struct_2fI():
    global _struct_2fI
    if _struct_2fI is None:
        _struct_2fI = struct.Struct("<2fI")
    return _struct_2fI
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
