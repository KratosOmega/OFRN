# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/ObjectData2221.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import ibeo_msgs.msg
import std_msgs.msg

class ObjectData2221(genpy.Message):
  _md5sum = "acd11db4c668144475c35c5dcdb3d364"
  _type = "ibeo_msgs/ObjectData2221"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

IbeoDataHeader ibeo_header
time scan_start_timestamp
uint16 number_of_objects
Object2221[] object_list

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ibeo_msgs/IbeoDataHeader
uint32 previous_message_size
uint32 message_size
uint8 device_id
uint16 data_type_id
time stamp

================================================================================
MSG: ibeo_msgs/Object2221
uint16 id
uint16 age
uint16 prediction_age
uint16 relative_timestamp
Point2Di reference_point
Point2Di reference_point_sigma
Point2Di closest_point
Point2Di bounding_box_center
uint16 bounding_box_width
uint16 bounding_box_length
Point2Di object_box_center
Size2D object_box_size
int16 object_box_orientation
Point2Di absolute_velocity
Size2D absolute_velocity_sigma
Point2Di relative_velocity
uint8 classification
uint16 classification_age
uint16 classification_certainty
uint16 number_of_contour_points
Point2Di[] contour_point_list

# classification values
uint8 UNCLASSIFIED=0
uint8 UNKNOWN_SMALL=1
uint8 UNKNOWN_BIG=2
uint8 PEDESTRIAN=3
uint8 BIKE=4
uint8 CAR=5
uint8 TRUCK=6

================================================================================
MSG: ibeo_msgs/Point2Di
int16 x
int16 y

================================================================================
MSG: ibeo_msgs/Size2D
uint16 size_x
uint16 size_y
"""
  __slots__ = ['header','ibeo_header','scan_start_timestamp','number_of_objects','object_list']
  _slot_types = ['std_msgs/Header','ibeo_msgs/IbeoDataHeader','time','uint16','ibeo_msgs/Object2221[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ibeo_header,scan_start_timestamp,number_of_objects,object_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectData2221, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.scan_start_timestamp is None:
        self.scan_start_timestamp = genpy.Time()
      if self.number_of_objects is None:
        self.number_of_objects = 0
      if self.object_list is None:
        self.object_list = []
    else:
      self.header = std_msgs.msg.Header()
      self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      self.scan_start_timestamp = genpy.Time()
      self.number_of_objects = 0
      self.object_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2IBH4IH().pack(_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.scan_start_timestamp.secs, _x.scan_start_timestamp.nsecs, _x.number_of_objects))
      length = len(self.object_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_list:
        _x = val1
        buff.write(_get_struct_4H().pack(_x.id, _x.age, _x.prediction_age, _x.relative_timestamp))
        _v1 = val1.reference_point
        _x = _v1
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v2 = val1.reference_point_sigma
        _x = _v2
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v3 = val1.closest_point
        _x = _v3
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v4 = val1.bounding_box_center
        _x = _v4
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2H().pack(_x.bounding_box_width, _x.bounding_box_length))
        _v5 = val1.object_box_center
        _x = _v5
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v6 = val1.object_box_size
        _x = _v6
        buff.write(_get_struct_2H().pack(_x.size_x, _x.size_y))
        buff.write(_get_struct_h().pack(val1.object_box_orientation))
        _v7 = val1.absolute_velocity
        _x = _v7
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v8 = val1.absolute_velocity_sigma
        _x = _v8
        buff.write(_get_struct_2H().pack(_x.size_x, _x.size_y))
        _v9 = val1.relative_velocity
        _x = _v9
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_B3H().pack(_x.classification, _x.classification_age, _x.classification_certainty, _x.number_of_contour_points))
        length = len(val1.contour_point_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.contour_point_list:
          _x = val2
          buff.write(_get_struct_2h().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.scan_start_timestamp is None:
        self.scan_start_timestamp = genpy.Time()
      if self.object_list is None:
        self.object_list = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.scan_start_timestamp.secs, _x.scan_start_timestamp.nsecs, _x.number_of_objects,) = _get_struct_2IBH4IH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.Object2221()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.age, _x.prediction_age, _x.relative_timestamp,) = _get_struct_4H().unpack(str[start:end])
        _v10 = val1.reference_point
        _x = _v10
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v11 = val1.reference_point_sigma
        _x = _v11
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v12 = val1.closest_point
        _x = _v12
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v13 = val1.bounding_box_center
        _x = _v13
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _x = val1
        start = end
        end += 4
        (_x.bounding_box_width, _x.bounding_box_length,) = _get_struct_2H().unpack(str[start:end])
        _v14 = val1.object_box_center
        _x = _v14
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v15 = val1.object_box_size
        _x = _v15
        start = end
        end += 4
        (_x.size_x, _x.size_y,) = _get_struct_2H().unpack(str[start:end])
        start = end
        end += 2
        (val1.object_box_orientation,) = _get_struct_h().unpack(str[start:end])
        _v16 = val1.absolute_velocity
        _x = _v16
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v17 = val1.absolute_velocity_sigma
        _x = _v17
        start = end
        end += 4
        (_x.size_x, _x.size_y,) = _get_struct_2H().unpack(str[start:end])
        _v18 = val1.relative_velocity
        _x = _v18
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _x = val1
        start = end
        end += 7
        (_x.classification, _x.classification_age, _x.classification_certainty, _x.number_of_contour_points,) = _get_struct_B3H().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.contour_point_list = []
        for i in range(0, length):
          val2 = ibeo_msgs.msg.Point2Di()
          _x = val2
          start = end
          end += 4
          (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
          val1.contour_point_list.append(val2)
        self.object_list.append(val1)
      self.scan_start_timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2IBH4IH().pack(_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.scan_start_timestamp.secs, _x.scan_start_timestamp.nsecs, _x.number_of_objects))
      length = len(self.object_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_list:
        _x = val1
        buff.write(_get_struct_4H().pack(_x.id, _x.age, _x.prediction_age, _x.relative_timestamp))
        _v19 = val1.reference_point
        _x = _v19
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v20 = val1.reference_point_sigma
        _x = _v20
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v21 = val1.closest_point
        _x = _v21
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v22 = val1.bounding_box_center
        _x = _v22
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2H().pack(_x.bounding_box_width, _x.bounding_box_length))
        _v23 = val1.object_box_center
        _x = _v23
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v24 = val1.object_box_size
        _x = _v24
        buff.write(_get_struct_2H().pack(_x.size_x, _x.size_y))
        buff.write(_get_struct_h().pack(val1.object_box_orientation))
        _v25 = val1.absolute_velocity
        _x = _v25
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v26 = val1.absolute_velocity_sigma
        _x = _v26
        buff.write(_get_struct_2H().pack(_x.size_x, _x.size_y))
        _v27 = val1.relative_velocity
        _x = _v27
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_B3H().pack(_x.classification, _x.classification_age, _x.classification_certainty, _x.number_of_contour_points))
        length = len(val1.contour_point_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.contour_point_list:
          _x = val2
          buff.write(_get_struct_2h().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ibeo_header is None:
        self.ibeo_header = ibeo_msgs.msg.IbeoDataHeader()
      if self.scan_start_timestamp is None:
        self.scan_start_timestamp = genpy.Time()
      if self.object_list is None:
        self.object_list = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.ibeo_header.previous_message_size, _x.ibeo_header.message_size, _x.ibeo_header.device_id, _x.ibeo_header.data_type_id, _x.ibeo_header.stamp.secs, _x.ibeo_header.stamp.nsecs, _x.scan_start_timestamp.secs, _x.scan_start_timestamp.nsecs, _x.number_of_objects,) = _get_struct_2IBH4IH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.Object2221()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.age, _x.prediction_age, _x.relative_timestamp,) = _get_struct_4H().unpack(str[start:end])
        _v28 = val1.reference_point
        _x = _v28
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v29 = val1.reference_point_sigma
        _x = _v29
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v30 = val1.closest_point
        _x = _v30
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v31 = val1.bounding_box_center
        _x = _v31
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _x = val1
        start = end
        end += 4
        (_x.bounding_box_width, _x.bounding_box_length,) = _get_struct_2H().unpack(str[start:end])
        _v32 = val1.object_box_center
        _x = _v32
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v33 = val1.object_box_size
        _x = _v33
        start = end
        end += 4
        (_x.size_x, _x.size_y,) = _get_struct_2H().unpack(str[start:end])
        start = end
        end += 2
        (val1.object_box_orientation,) = _get_struct_h().unpack(str[start:end])
        _v34 = val1.absolute_velocity
        _x = _v34
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v35 = val1.absolute_velocity_sigma
        _x = _v35
        start = end
        end += 4
        (_x.size_x, _x.size_y,) = _get_struct_2H().unpack(str[start:end])
        _v36 = val1.relative_velocity
        _x = _v36
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _x = val1
        start = end
        end += 7
        (_x.classification, _x.classification_age, _x.classification_certainty, _x.number_of_contour_points,) = _get_struct_B3H().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.contour_point_list = []
        for i in range(0, length):
          val2 = ibeo_msgs.msg.Point2Di()
          _x = val2
          start = end
          end += 4
          (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
          val1.contour_point_list.append(val2)
        self.object_list.append(val1)
      self.scan_start_timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B3H = None
def _get_struct_B3H():
    global _struct_B3H
    if _struct_B3H is None:
        _struct_B3H = struct.Struct("<B3H")
    return _struct_B3H
_struct_4H = None
def _get_struct_4H():
    global _struct_4H
    if _struct_4H is None:
        _struct_4H = struct.Struct("<4H")
    return _struct_4H
_struct_2IBH4IH = None
def _get_struct_2IBH4IH():
    global _struct_2IBH4IH
    if _struct_2IBH4IH is None:
        _struct_2IBH4IH = struct.Struct("<2IBH4IH")
    return _struct_2IBH4IH
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
