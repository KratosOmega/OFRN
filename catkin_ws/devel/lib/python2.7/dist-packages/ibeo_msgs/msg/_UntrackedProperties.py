# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/UntrackedProperties.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ibeo_msgs.msg

class UntrackedProperties(genpy.Message):
  _md5sum = "ec203d9d51180705332e0238e3e4abda"
  _type = "ibeo_msgs/UntrackedProperties"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 relative_time_of_measurement
Point2Di position_closest_point
Point2Di object_box_size
Point2Dui object_box_size_sigma
int16 object_box_orientation
uint16 object_box_orientation_sigma
Point2Di tracking_point_coordinate
Point2Dui tracking_point_coordinate_sigma
uint8 number_of_contour_points
ContourPointSigma[] contour_point_list

================================================================================
MSG: ibeo_msgs/Point2Di
int16 x
int16 y

================================================================================
MSG: ibeo_msgs/Point2Dui
uint16 x
uint16 y

================================================================================
MSG: ibeo_msgs/ContourPointSigma
int16 x
int16 y
uint8 x_sigma
uint8 y_sigma
"""
  __slots__ = ['relative_time_of_measurement','position_closest_point','object_box_size','object_box_size_sigma','object_box_orientation','object_box_orientation_sigma','tracking_point_coordinate','tracking_point_coordinate_sigma','number_of_contour_points','contour_point_list']
  _slot_types = ['uint16','ibeo_msgs/Point2Di','ibeo_msgs/Point2Di','ibeo_msgs/Point2Dui','int16','uint16','ibeo_msgs/Point2Di','ibeo_msgs/Point2Dui','uint8','ibeo_msgs/ContourPointSigma[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       relative_time_of_measurement,position_closest_point,object_box_size,object_box_size_sigma,object_box_orientation,object_box_orientation_sigma,tracking_point_coordinate,tracking_point_coordinate_sigma,number_of_contour_points,contour_point_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UntrackedProperties, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.relative_time_of_measurement is None:
        self.relative_time_of_measurement = 0
      if self.position_closest_point is None:
        self.position_closest_point = ibeo_msgs.msg.Point2Di()
      if self.object_box_size is None:
        self.object_box_size = ibeo_msgs.msg.Point2Di()
      if self.object_box_size_sigma is None:
        self.object_box_size_sigma = ibeo_msgs.msg.Point2Dui()
      if self.object_box_orientation is None:
        self.object_box_orientation = 0
      if self.object_box_orientation_sigma is None:
        self.object_box_orientation_sigma = 0
      if self.tracking_point_coordinate is None:
        self.tracking_point_coordinate = ibeo_msgs.msg.Point2Di()
      if self.tracking_point_coordinate_sigma is None:
        self.tracking_point_coordinate_sigma = ibeo_msgs.msg.Point2Dui()
      if self.number_of_contour_points is None:
        self.number_of_contour_points = 0
      if self.contour_point_list is None:
        self.contour_point_list = []
    else:
      self.relative_time_of_measurement = 0
      self.position_closest_point = ibeo_msgs.msg.Point2Di()
      self.object_box_size = ibeo_msgs.msg.Point2Di()
      self.object_box_size_sigma = ibeo_msgs.msg.Point2Dui()
      self.object_box_orientation = 0
      self.object_box_orientation_sigma = 0
      self.tracking_point_coordinate = ibeo_msgs.msg.Point2Di()
      self.tracking_point_coordinate_sigma = ibeo_msgs.msg.Point2Dui()
      self.number_of_contour_points = 0
      self.contour_point_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H4h2HhH2h2HB().pack(_x.relative_time_of_measurement, _x.position_closest_point.x, _x.position_closest_point.y, _x.object_box_size.x, _x.object_box_size.y, _x.object_box_size_sigma.x, _x.object_box_size_sigma.y, _x.object_box_orientation, _x.object_box_orientation_sigma, _x.tracking_point_coordinate.x, _x.tracking_point_coordinate.y, _x.tracking_point_coordinate_sigma.x, _x.tracking_point_coordinate_sigma.y, _x.number_of_contour_points))
      length = len(self.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_point_list:
        _x = val1
        buff.write(_get_struct_2h2B().pack(_x.x, _x.y, _x.x_sigma, _x.y_sigma))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position_closest_point is None:
        self.position_closest_point = ibeo_msgs.msg.Point2Di()
      if self.object_box_size is None:
        self.object_box_size = ibeo_msgs.msg.Point2Di()
      if self.object_box_size_sigma is None:
        self.object_box_size_sigma = ibeo_msgs.msg.Point2Dui()
      if self.tracking_point_coordinate is None:
        self.tracking_point_coordinate = ibeo_msgs.msg.Point2Di()
      if self.tracking_point_coordinate_sigma is None:
        self.tracking_point_coordinate_sigma = ibeo_msgs.msg.Point2Dui()
      if self.contour_point_list is None:
        self.contour_point_list = None
      end = 0
      _x = self
      start = end
      end += 27
      (_x.relative_time_of_measurement, _x.position_closest_point.x, _x.position_closest_point.y, _x.object_box_size.x, _x.object_box_size.y, _x.object_box_size_sigma.x, _x.object_box_size_sigma.y, _x.object_box_orientation, _x.object_box_orientation_sigma, _x.tracking_point_coordinate.x, _x.tracking_point_coordinate.y, _x.tracking_point_coordinate_sigma.x, _x.tracking_point_coordinate_sigma.y, _x.number_of_contour_points,) = _get_struct_H4h2HhH2h2HB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.ContourPointSigma()
        _x = val1
        start = end
        end += 6
        (_x.x, _x.y, _x.x_sigma, _x.y_sigma,) = _get_struct_2h2B().unpack(str[start:end])
        self.contour_point_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H4h2HhH2h2HB().pack(_x.relative_time_of_measurement, _x.position_closest_point.x, _x.position_closest_point.y, _x.object_box_size.x, _x.object_box_size.y, _x.object_box_size_sigma.x, _x.object_box_size_sigma.y, _x.object_box_orientation, _x.object_box_orientation_sigma, _x.tracking_point_coordinate.x, _x.tracking_point_coordinate.y, _x.tracking_point_coordinate_sigma.x, _x.tracking_point_coordinate_sigma.y, _x.number_of_contour_points))
      length = len(self.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_point_list:
        _x = val1
        buff.write(_get_struct_2h2B().pack(_x.x, _x.y, _x.x_sigma, _x.y_sigma))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position_closest_point is None:
        self.position_closest_point = ibeo_msgs.msg.Point2Di()
      if self.object_box_size is None:
        self.object_box_size = ibeo_msgs.msg.Point2Di()
      if self.object_box_size_sigma is None:
        self.object_box_size_sigma = ibeo_msgs.msg.Point2Dui()
      if self.tracking_point_coordinate is None:
        self.tracking_point_coordinate = ibeo_msgs.msg.Point2Di()
      if self.tracking_point_coordinate_sigma is None:
        self.tracking_point_coordinate_sigma = ibeo_msgs.msg.Point2Dui()
      if self.contour_point_list is None:
        self.contour_point_list = None
      end = 0
      _x = self
      start = end
      end += 27
      (_x.relative_time_of_measurement, _x.position_closest_point.x, _x.position_closest_point.y, _x.object_box_size.x, _x.object_box_size.y, _x.object_box_size_sigma.x, _x.object_box_size_sigma.y, _x.object_box_orientation, _x.object_box_orientation_sigma, _x.tracking_point_coordinate.x, _x.tracking_point_coordinate.y, _x.tracking_point_coordinate_sigma.x, _x.tracking_point_coordinate_sigma.y, _x.number_of_contour_points,) = _get_struct_H4h2HhH2h2HB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.ContourPointSigma()
        _x = val1
        start = end
        end += 6
        (_x.x, _x.y, _x.x_sigma, _x.y_sigma,) = _get_struct_2h2B().unpack(str[start:end])
        self.contour_point_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H4h2HhH2h2HB = None
def _get_struct_H4h2HhH2h2HB():
    global _struct_H4h2HhH2h2HB
    if _struct_H4h2HhH2h2HB is None:
        _struct_H4h2HhH2h2HB = struct.Struct("<H4h2HhH2h2HB")
    return _struct_H4h2HhH2h2HB
_struct_2h2B = None
def _get_struct_2h2B():
    global _struct_2h2B
    if _struct_2h2B is None:
        _struct_2h2B = struct.Struct("<2h2B")
    return _struct_2h2B
