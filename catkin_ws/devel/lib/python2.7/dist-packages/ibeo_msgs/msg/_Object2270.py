# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/Object2270.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ibeo_msgs.msg

class Object2270(genpy.Message):
  _md5sum = "be71fe5a58662c19b2a4ddd8ff915219"
  _type = "ibeo_msgs/Object2270"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 id
uint16 age
uint16 prediction_age
uint16 relative_moment_of_measurement
uint8 reference_point_location
int16 reference_point_position_x
int16 reference_point_position_y
uint16 reference_point_position_sigma_x
uint16 reference_point_position_sigma_y
int16 contour_points_cog_x
int16 contour_points_cog_y
uint16 object_box_length
uint16 object_box_width
int16 object_box_orientation_angle
int16 object_box_orientation_angle_sigma
int16 absolute_velocity_x
int16 absolute_velocity_y
uint16 absolute_velocity_sigma_x
uint16 absolute_velocity_sigma_y
int16 relative_velocity_x
int16 relative_velocity_y
uint16 relative_velocity_sigma_x
uint16 relative_velocity_sigma_y
uint8 classification
uint8 tracking_model
bool mobile_detected
bool track_valid
uint16 classification_age
uint16 classification_confidence
uint16 number_of_contour_points
Point2Di[] contour_point_list

# reference_point_location values
uint8 CENTER_OF_GRAVITY=0
uint8 TOP_FRONT_LEFT_CORNER=1
uint8 TOP_FRONT_RIGHT_CORNER=2
uint8 BOTTOM_REAR_RIGHT_CORNER=3
uint8 BOTTOM_REAR_LEFT_CORNER=4
uint8 CENTER_OF_TOP_FRONT_EDGE=5
uint8 CENTER_OF_RIGHT_EDGE=6
uint8 CENTER_OF_BOTTOM_REAR_EDGE=7
uint8 CENTER_OF_LEFT_EDGE=8
uint8 BOX_CENTER=9
uint8 INVALID=255

# classification values
uint8 UNCLASSIFIED=0
uint8 UNKNOWN_SMALL=1
uint8 UNKNOWN_BIG=2
uint8 PEDESTRIAN=3
uint8 BIKE=4
uint8 CAR=5
uint8 TRUCK=6
uint8 OVER_DRIVABLE=10
uint8 UNDER_DRIVABLE=11

# tracking_model values
uint8 DYNAMIC_MODEL=0
uint8 STATIC_MODEL=1

================================================================================
MSG: ibeo_msgs/Point2Di
int16 x
int16 y
"""
  # Pseudo-constants
  CENTER_OF_GRAVITY = 0
  TOP_FRONT_LEFT_CORNER = 1
  TOP_FRONT_RIGHT_CORNER = 2
  BOTTOM_REAR_RIGHT_CORNER = 3
  BOTTOM_REAR_LEFT_CORNER = 4
  CENTER_OF_TOP_FRONT_EDGE = 5
  CENTER_OF_RIGHT_EDGE = 6
  CENTER_OF_BOTTOM_REAR_EDGE = 7
  CENTER_OF_LEFT_EDGE = 8
  BOX_CENTER = 9
  INVALID = 255
  UNCLASSIFIED = 0
  UNKNOWN_SMALL = 1
  UNKNOWN_BIG = 2
  PEDESTRIAN = 3
  BIKE = 4
  CAR = 5
  TRUCK = 6
  OVER_DRIVABLE = 10
  UNDER_DRIVABLE = 11
  DYNAMIC_MODEL = 0
  STATIC_MODEL = 1

  __slots__ = ['id','age','prediction_age','relative_moment_of_measurement','reference_point_location','reference_point_position_x','reference_point_position_y','reference_point_position_sigma_x','reference_point_position_sigma_y','contour_points_cog_x','contour_points_cog_y','object_box_length','object_box_width','object_box_orientation_angle','object_box_orientation_angle_sigma','absolute_velocity_x','absolute_velocity_y','absolute_velocity_sigma_x','absolute_velocity_sigma_y','relative_velocity_x','relative_velocity_y','relative_velocity_sigma_x','relative_velocity_sigma_y','classification','tracking_model','mobile_detected','track_valid','classification_age','classification_confidence','number_of_contour_points','contour_point_list']
  _slot_types = ['uint16','uint16','uint16','uint16','uint8','int16','int16','uint16','uint16','int16','int16','uint16','uint16','int16','int16','int16','int16','uint16','uint16','int16','int16','uint16','uint16','uint8','uint8','bool','bool','uint16','uint16','uint16','ibeo_msgs/Point2Di[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,age,prediction_age,relative_moment_of_measurement,reference_point_location,reference_point_position_x,reference_point_position_y,reference_point_position_sigma_x,reference_point_position_sigma_y,contour_points_cog_x,contour_points_cog_y,object_box_length,object_box_width,object_box_orientation_angle,object_box_orientation_angle_sigma,absolute_velocity_x,absolute_velocity_y,absolute_velocity_sigma_x,absolute_velocity_sigma_y,relative_velocity_x,relative_velocity_y,relative_velocity_sigma_x,relative_velocity_sigma_y,classification,tracking_model,mobile_detected,track_valid,classification_age,classification_confidence,number_of_contour_points,contour_point_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object2270, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.age is None:
        self.age = 0
      if self.prediction_age is None:
        self.prediction_age = 0
      if self.relative_moment_of_measurement is None:
        self.relative_moment_of_measurement = 0
      if self.reference_point_location is None:
        self.reference_point_location = 0
      if self.reference_point_position_x is None:
        self.reference_point_position_x = 0
      if self.reference_point_position_y is None:
        self.reference_point_position_y = 0
      if self.reference_point_position_sigma_x is None:
        self.reference_point_position_sigma_x = 0
      if self.reference_point_position_sigma_y is None:
        self.reference_point_position_sigma_y = 0
      if self.contour_points_cog_x is None:
        self.contour_points_cog_x = 0
      if self.contour_points_cog_y is None:
        self.contour_points_cog_y = 0
      if self.object_box_length is None:
        self.object_box_length = 0
      if self.object_box_width is None:
        self.object_box_width = 0
      if self.object_box_orientation_angle is None:
        self.object_box_orientation_angle = 0
      if self.object_box_orientation_angle_sigma is None:
        self.object_box_orientation_angle_sigma = 0
      if self.absolute_velocity_x is None:
        self.absolute_velocity_x = 0
      if self.absolute_velocity_y is None:
        self.absolute_velocity_y = 0
      if self.absolute_velocity_sigma_x is None:
        self.absolute_velocity_sigma_x = 0
      if self.absolute_velocity_sigma_y is None:
        self.absolute_velocity_sigma_y = 0
      if self.relative_velocity_x is None:
        self.relative_velocity_x = 0
      if self.relative_velocity_y is None:
        self.relative_velocity_y = 0
      if self.relative_velocity_sigma_x is None:
        self.relative_velocity_sigma_x = 0
      if self.relative_velocity_sigma_y is None:
        self.relative_velocity_sigma_y = 0
      if self.classification is None:
        self.classification = 0
      if self.tracking_model is None:
        self.tracking_model = 0
      if self.mobile_detected is None:
        self.mobile_detected = False
      if self.track_valid is None:
        self.track_valid = False
      if self.classification_age is None:
        self.classification_age = 0
      if self.classification_confidence is None:
        self.classification_confidence = 0
      if self.number_of_contour_points is None:
        self.number_of_contour_points = 0
      if self.contour_point_list is None:
        self.contour_point_list = []
    else:
      self.id = 0
      self.age = 0
      self.prediction_age = 0
      self.relative_moment_of_measurement = 0
      self.reference_point_location = 0
      self.reference_point_position_x = 0
      self.reference_point_position_y = 0
      self.reference_point_position_sigma_x = 0
      self.reference_point_position_sigma_y = 0
      self.contour_points_cog_x = 0
      self.contour_points_cog_y = 0
      self.object_box_length = 0
      self.object_box_width = 0
      self.object_box_orientation_angle = 0
      self.object_box_orientation_angle_sigma = 0
      self.absolute_velocity_x = 0
      self.absolute_velocity_y = 0
      self.absolute_velocity_sigma_x = 0
      self.absolute_velocity_sigma_y = 0
      self.relative_velocity_x = 0
      self.relative_velocity_y = 0
      self.relative_velocity_sigma_x = 0
      self.relative_velocity_sigma_y = 0
      self.classification = 0
      self.tracking_model = 0
      self.mobile_detected = False
      self.track_valid = False
      self.classification_age = 0
      self.classification_confidence = 0
      self.number_of_contour_points = 0
      self.contour_point_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4HB2h2H2h2H4h2H2h2H4B3H().pack(_x.id, _x.age, _x.prediction_age, _x.relative_moment_of_measurement, _x.reference_point_location, _x.reference_point_position_x, _x.reference_point_position_y, _x.reference_point_position_sigma_x, _x.reference_point_position_sigma_y, _x.contour_points_cog_x, _x.contour_points_cog_y, _x.object_box_length, _x.object_box_width, _x.object_box_orientation_angle, _x.object_box_orientation_angle_sigma, _x.absolute_velocity_x, _x.absolute_velocity_y, _x.absolute_velocity_sigma_x, _x.absolute_velocity_sigma_y, _x.relative_velocity_x, _x.relative_velocity_y, _x.relative_velocity_sigma_x, _x.relative_velocity_sigma_y, _x.classification, _x.tracking_model, _x.mobile_detected, _x.track_valid, _x.classification_age, _x.classification_confidence, _x.number_of_contour_points))
      length = len(self.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_point_list:
        _x = val1
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.contour_point_list is None:
        self.contour_point_list = None
      end = 0
      _x = self
      start = end
      end += 55
      (_x.id, _x.age, _x.prediction_age, _x.relative_moment_of_measurement, _x.reference_point_location, _x.reference_point_position_x, _x.reference_point_position_y, _x.reference_point_position_sigma_x, _x.reference_point_position_sigma_y, _x.contour_points_cog_x, _x.contour_points_cog_y, _x.object_box_length, _x.object_box_width, _x.object_box_orientation_angle, _x.object_box_orientation_angle_sigma, _x.absolute_velocity_x, _x.absolute_velocity_y, _x.absolute_velocity_sigma_x, _x.absolute_velocity_sigma_y, _x.relative_velocity_x, _x.relative_velocity_y, _x.relative_velocity_sigma_x, _x.relative_velocity_sigma_y, _x.classification, _x.tracking_model, _x.mobile_detected, _x.track_valid, _x.classification_age, _x.classification_confidence, _x.number_of_contour_points,) = _get_struct_4HB2h2H2h2H4h2H2h2H4B3H().unpack(str[start:end])
      self.mobile_detected = bool(self.mobile_detected)
      self.track_valid = bool(self.track_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.Point2Di()
        _x = val1
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        self.contour_point_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4HB2h2H2h2H4h2H2h2H4B3H().pack(_x.id, _x.age, _x.prediction_age, _x.relative_moment_of_measurement, _x.reference_point_location, _x.reference_point_position_x, _x.reference_point_position_y, _x.reference_point_position_sigma_x, _x.reference_point_position_sigma_y, _x.contour_points_cog_x, _x.contour_points_cog_y, _x.object_box_length, _x.object_box_width, _x.object_box_orientation_angle, _x.object_box_orientation_angle_sigma, _x.absolute_velocity_x, _x.absolute_velocity_y, _x.absolute_velocity_sigma_x, _x.absolute_velocity_sigma_y, _x.relative_velocity_x, _x.relative_velocity_y, _x.relative_velocity_sigma_x, _x.relative_velocity_sigma_y, _x.classification, _x.tracking_model, _x.mobile_detected, _x.track_valid, _x.classification_age, _x.classification_confidence, _x.number_of_contour_points))
      length = len(self.contour_point_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.contour_point_list:
        _x = val1
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.contour_point_list is None:
        self.contour_point_list = None
      end = 0
      _x = self
      start = end
      end += 55
      (_x.id, _x.age, _x.prediction_age, _x.relative_moment_of_measurement, _x.reference_point_location, _x.reference_point_position_x, _x.reference_point_position_y, _x.reference_point_position_sigma_x, _x.reference_point_position_sigma_y, _x.contour_points_cog_x, _x.contour_points_cog_y, _x.object_box_length, _x.object_box_width, _x.object_box_orientation_angle, _x.object_box_orientation_angle_sigma, _x.absolute_velocity_x, _x.absolute_velocity_y, _x.absolute_velocity_sigma_x, _x.absolute_velocity_sigma_y, _x.relative_velocity_x, _x.relative_velocity_y, _x.relative_velocity_sigma_x, _x.relative_velocity_sigma_y, _x.classification, _x.tracking_model, _x.mobile_detected, _x.track_valid, _x.classification_age, _x.classification_confidence, _x.number_of_contour_points,) = _get_struct_4HB2h2H2h2H4h2H2h2H4B3H().unpack(str[start:end])
      self.mobile_detected = bool(self.mobile_detected)
      self.track_valid = bool(self.track_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contour_point_list = []
      for i in range(0, length):
        val1 = ibeo_msgs.msg.Point2Di()
        _x = val1
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        self.contour_point_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4HB2h2H2h2H4h2H2h2H4B3H = None
def _get_struct_4HB2h2H2h2H4h2H2h2H4B3H():
    global _struct_4HB2h2H2h2H4h2H2h2H4B3H
    if _struct_4HB2h2H2h2H4h2H2h2H4B3H is None:
        _struct_4HB2h2H2h2H4h2H2h2H4B3H = struct.Struct("<4HB2h2H2h2H4h2H2h2H4B3H")
    return _struct_4HB2h2H2h2H4h2H2h2H4B3H
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
