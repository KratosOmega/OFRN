# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ibeo_msgs/ScanPoint2208.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ScanPoint2208(genpy.Message):
  _md5sum = "fdc87d398fc0cfdeedf159386b96c70f"
  _type = "ibeo_msgs/ScanPoint2208"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 echo
uint8 layer
bool transparent_point
bool clutter_atmospheric
bool ground
bool dirt
int16 horizontal_angle
uint16 radial_distance
uint16 echo_pulse_width
"""
  __slots__ = ['echo','layer','transparent_point','clutter_atmospheric','ground','dirt','horizontal_angle','radial_distance','echo_pulse_width']
  _slot_types = ['uint8','uint8','bool','bool','bool','bool','int16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       echo,layer,transparent_point,clutter_atmospheric,ground,dirt,horizontal_angle,radial_distance,echo_pulse_width

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ScanPoint2208, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.echo is None:
        self.echo = 0
      if self.layer is None:
        self.layer = 0
      if self.transparent_point is None:
        self.transparent_point = False
      if self.clutter_atmospheric is None:
        self.clutter_atmospheric = False
      if self.ground is None:
        self.ground = False
      if self.dirt is None:
        self.dirt = False
      if self.horizontal_angle is None:
        self.horizontal_angle = 0
      if self.radial_distance is None:
        self.radial_distance = 0
      if self.echo_pulse_width is None:
        self.echo_pulse_width = 0
    else:
      self.echo = 0
      self.layer = 0
      self.transparent_point = False
      self.clutter_atmospheric = False
      self.ground = False
      self.dirt = False
      self.horizontal_angle = 0
      self.radial_distance = 0
      self.echo_pulse_width = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6Bh2H().pack(_x.echo, _x.layer, _x.transparent_point, _x.clutter_atmospheric, _x.ground, _x.dirt, _x.horizontal_angle, _x.radial_distance, _x.echo_pulse_width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.echo, _x.layer, _x.transparent_point, _x.clutter_atmospheric, _x.ground, _x.dirt, _x.horizontal_angle, _x.radial_distance, _x.echo_pulse_width,) = _get_struct_6Bh2H().unpack(str[start:end])
      self.transparent_point = bool(self.transparent_point)
      self.clutter_atmospheric = bool(self.clutter_atmospheric)
      self.ground = bool(self.ground)
      self.dirt = bool(self.dirt)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6Bh2H().pack(_x.echo, _x.layer, _x.transparent_point, _x.clutter_atmospheric, _x.ground, _x.dirt, _x.horizontal_angle, _x.radial_distance, _x.echo_pulse_width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.echo, _x.layer, _x.transparent_point, _x.clutter_atmospheric, _x.ground, _x.dirt, _x.horizontal_angle, _x.radial_distance, _x.echo_pulse_width,) = _get_struct_6Bh2H().unpack(str[start:end])
      self.transparent_point = bool(self.transparent_point)
      self.clutter_atmospheric = bool(self.clutter_atmospheric)
      self.ground = bool(self.ground)
      self.dirt = bool(self.dirt)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6Bh2H = None
def _get_struct_6Bh2H():
    global _struct_6Bh2H
    if _struct_6Bh2H is None:
        _struct_6Bh2H = struct.Struct("<6Bh2H")
    return _struct_6Bh2H
