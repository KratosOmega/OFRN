# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_srr_msgs/SrrDebug3.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SrrDebug3(genpy.Message):
  _md5sum = "83af517ae6abcdcf6b4e46f417ccd4f7"
  _type = "delphi_srr_msgs/SrrDebug3"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message file for srr_debug3

Header header

bool      Timer_Create_Error                      

bool      Thread_Create_Error                     

bool      ARM_Calibration_Error                   

bool      SPI_FEE_Error                           

bool      SPI_Comm_Error                          

bool      Socket_Write_Error                      

bool      DSP_Cal_Obsolete_62_Error               

bool      Socket_Read_error                       

bool      Socket_Init_Error                       

bool      Signal_Wait_Error                       

bool      Signal_Send_Error                       

bool      Signal_Create_Error                     

bool      Shared_Mem_Write_Error                  

bool      Shared_Mem_Read_Error                   

bool      Shared_Mem_Config_Error                 

bool      Share_Mem_Init_Error                    

bool      RAM_Test_Error                          

bool      Num_Errors                              

bool      MMAP_Memory_Error                       

bool      ISR_Attach_Error                        

bool      IPC_DRV_Write_Error                     

bool      IPC_DRV_Trigger_Error                   

bool      IPC_DRV_Sync_Error                      

bool      IPC_DRV_Read_Error                      

bool      IPC_DRV_Init_Error                      

bool      Interrupt_Enable_Error                  

bool      HIL_Format_Error                        

bool      Flash_Filesystem_Error                  

bool      Error_none                              

bool      DSP_Load_Read_Error                     

bool      DSP_Load_Open_Error                     

bool      DSP_Load_Address_Error                  

bool      DSP_ISP_Write_Error                     

bool      DSP_IPC_Read_Error                      

bool      DSP_IPC_Init                            

bool      DSP_Init_Error                          

bool      DSP_DRV_Start_Error                     

bool      DSP_DRV_Load_Error                      

bool      DSP_DRV_Init_Error                      

bool      DSP_DRV_Init2_error                     

bool      DSP_DRV_Init1_error                     

bool      DSP_Calibration_Error                   

bool      CAN_XMT_Error                           

bool      CAN_RCV_Error                           

bool      CAN_Hardware_Error                      

bool      Always_True                             


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','Timer_Create_Error','Thread_Create_Error','ARM_Calibration_Error','SPI_FEE_Error','SPI_Comm_Error','Socket_Write_Error','DSP_Cal_Obsolete_62_Error','Socket_Read_error','Socket_Init_Error','Signal_Wait_Error','Signal_Send_Error','Signal_Create_Error','Shared_Mem_Write_Error','Shared_Mem_Read_Error','Shared_Mem_Config_Error','Share_Mem_Init_Error','RAM_Test_Error','Num_Errors','MMAP_Memory_Error','ISR_Attach_Error','IPC_DRV_Write_Error','IPC_DRV_Trigger_Error','IPC_DRV_Sync_Error','IPC_DRV_Read_Error','IPC_DRV_Init_Error','Interrupt_Enable_Error','HIL_Format_Error','Flash_Filesystem_Error','Error_none','DSP_Load_Read_Error','DSP_Load_Open_Error','DSP_Load_Address_Error','DSP_ISP_Write_Error','DSP_IPC_Read_Error','DSP_IPC_Init','DSP_Init_Error','DSP_DRV_Start_Error','DSP_DRV_Load_Error','DSP_DRV_Init_Error','DSP_DRV_Init2_error','DSP_DRV_Init1_error','DSP_Calibration_Error','CAN_XMT_Error','CAN_RCV_Error','CAN_Hardware_Error','Always_True']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Timer_Create_Error,Thread_Create_Error,ARM_Calibration_Error,SPI_FEE_Error,SPI_Comm_Error,Socket_Write_Error,DSP_Cal_Obsolete_62_Error,Socket_Read_error,Socket_Init_Error,Signal_Wait_Error,Signal_Send_Error,Signal_Create_Error,Shared_Mem_Write_Error,Shared_Mem_Read_Error,Shared_Mem_Config_Error,Share_Mem_Init_Error,RAM_Test_Error,Num_Errors,MMAP_Memory_Error,ISR_Attach_Error,IPC_DRV_Write_Error,IPC_DRV_Trigger_Error,IPC_DRV_Sync_Error,IPC_DRV_Read_Error,IPC_DRV_Init_Error,Interrupt_Enable_Error,HIL_Format_Error,Flash_Filesystem_Error,Error_none,DSP_Load_Read_Error,DSP_Load_Open_Error,DSP_Load_Address_Error,DSP_ISP_Write_Error,DSP_IPC_Read_Error,DSP_IPC_Init,DSP_Init_Error,DSP_DRV_Start_Error,DSP_DRV_Load_Error,DSP_DRV_Init_Error,DSP_DRV_Init2_error,DSP_DRV_Init1_error,DSP_Calibration_Error,CAN_XMT_Error,CAN_RCV_Error,CAN_Hardware_Error,Always_True

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SrrDebug3, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Timer_Create_Error is None:
        self.Timer_Create_Error = False
      if self.Thread_Create_Error is None:
        self.Thread_Create_Error = False
      if self.ARM_Calibration_Error is None:
        self.ARM_Calibration_Error = False
      if self.SPI_FEE_Error is None:
        self.SPI_FEE_Error = False
      if self.SPI_Comm_Error is None:
        self.SPI_Comm_Error = False
      if self.Socket_Write_Error is None:
        self.Socket_Write_Error = False
      if self.DSP_Cal_Obsolete_62_Error is None:
        self.DSP_Cal_Obsolete_62_Error = False
      if self.Socket_Read_error is None:
        self.Socket_Read_error = False
      if self.Socket_Init_Error is None:
        self.Socket_Init_Error = False
      if self.Signal_Wait_Error is None:
        self.Signal_Wait_Error = False
      if self.Signal_Send_Error is None:
        self.Signal_Send_Error = False
      if self.Signal_Create_Error is None:
        self.Signal_Create_Error = False
      if self.Shared_Mem_Write_Error is None:
        self.Shared_Mem_Write_Error = False
      if self.Shared_Mem_Read_Error is None:
        self.Shared_Mem_Read_Error = False
      if self.Shared_Mem_Config_Error is None:
        self.Shared_Mem_Config_Error = False
      if self.Share_Mem_Init_Error is None:
        self.Share_Mem_Init_Error = False
      if self.RAM_Test_Error is None:
        self.RAM_Test_Error = False
      if self.Num_Errors is None:
        self.Num_Errors = False
      if self.MMAP_Memory_Error is None:
        self.MMAP_Memory_Error = False
      if self.ISR_Attach_Error is None:
        self.ISR_Attach_Error = False
      if self.IPC_DRV_Write_Error is None:
        self.IPC_DRV_Write_Error = False
      if self.IPC_DRV_Trigger_Error is None:
        self.IPC_DRV_Trigger_Error = False
      if self.IPC_DRV_Sync_Error is None:
        self.IPC_DRV_Sync_Error = False
      if self.IPC_DRV_Read_Error is None:
        self.IPC_DRV_Read_Error = False
      if self.IPC_DRV_Init_Error is None:
        self.IPC_DRV_Init_Error = False
      if self.Interrupt_Enable_Error is None:
        self.Interrupt_Enable_Error = False
      if self.HIL_Format_Error is None:
        self.HIL_Format_Error = False
      if self.Flash_Filesystem_Error is None:
        self.Flash_Filesystem_Error = False
      if self.Error_none is None:
        self.Error_none = False
      if self.DSP_Load_Read_Error is None:
        self.DSP_Load_Read_Error = False
      if self.DSP_Load_Open_Error is None:
        self.DSP_Load_Open_Error = False
      if self.DSP_Load_Address_Error is None:
        self.DSP_Load_Address_Error = False
      if self.DSP_ISP_Write_Error is None:
        self.DSP_ISP_Write_Error = False
      if self.DSP_IPC_Read_Error is None:
        self.DSP_IPC_Read_Error = False
      if self.DSP_IPC_Init is None:
        self.DSP_IPC_Init = False
      if self.DSP_Init_Error is None:
        self.DSP_Init_Error = False
      if self.DSP_DRV_Start_Error is None:
        self.DSP_DRV_Start_Error = False
      if self.DSP_DRV_Load_Error is None:
        self.DSP_DRV_Load_Error = False
      if self.DSP_DRV_Init_Error is None:
        self.DSP_DRV_Init_Error = False
      if self.DSP_DRV_Init2_error is None:
        self.DSP_DRV_Init2_error = False
      if self.DSP_DRV_Init1_error is None:
        self.DSP_DRV_Init1_error = False
      if self.DSP_Calibration_Error is None:
        self.DSP_Calibration_Error = False
      if self.CAN_XMT_Error is None:
        self.CAN_XMT_Error = False
      if self.CAN_RCV_Error is None:
        self.CAN_RCV_Error = False
      if self.CAN_Hardware_Error is None:
        self.CAN_Hardware_Error = False
      if self.Always_True is None:
        self.Always_True = False
    else:
      self.header = std_msgs.msg.Header()
      self.Timer_Create_Error = False
      self.Thread_Create_Error = False
      self.ARM_Calibration_Error = False
      self.SPI_FEE_Error = False
      self.SPI_Comm_Error = False
      self.Socket_Write_Error = False
      self.DSP_Cal_Obsolete_62_Error = False
      self.Socket_Read_error = False
      self.Socket_Init_Error = False
      self.Signal_Wait_Error = False
      self.Signal_Send_Error = False
      self.Signal_Create_Error = False
      self.Shared_Mem_Write_Error = False
      self.Shared_Mem_Read_Error = False
      self.Shared_Mem_Config_Error = False
      self.Share_Mem_Init_Error = False
      self.RAM_Test_Error = False
      self.Num_Errors = False
      self.MMAP_Memory_Error = False
      self.ISR_Attach_Error = False
      self.IPC_DRV_Write_Error = False
      self.IPC_DRV_Trigger_Error = False
      self.IPC_DRV_Sync_Error = False
      self.IPC_DRV_Read_Error = False
      self.IPC_DRV_Init_Error = False
      self.Interrupt_Enable_Error = False
      self.HIL_Format_Error = False
      self.Flash_Filesystem_Error = False
      self.Error_none = False
      self.DSP_Load_Read_Error = False
      self.DSP_Load_Open_Error = False
      self.DSP_Load_Address_Error = False
      self.DSP_ISP_Write_Error = False
      self.DSP_IPC_Read_Error = False
      self.DSP_IPC_Init = False
      self.DSP_Init_Error = False
      self.DSP_DRV_Start_Error = False
      self.DSP_DRV_Load_Error = False
      self.DSP_DRV_Init_Error = False
      self.DSP_DRV_Init2_error = False
      self.DSP_DRV_Init1_error = False
      self.DSP_Calibration_Error = False
      self.CAN_XMT_Error = False
      self.CAN_RCV_Error = False
      self.CAN_Hardware_Error = False
      self.Always_True = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_46B().pack(_x.Timer_Create_Error, _x.Thread_Create_Error, _x.ARM_Calibration_Error, _x.SPI_FEE_Error, _x.SPI_Comm_Error, _x.Socket_Write_Error, _x.DSP_Cal_Obsolete_62_Error, _x.Socket_Read_error, _x.Socket_Init_Error, _x.Signal_Wait_Error, _x.Signal_Send_Error, _x.Signal_Create_Error, _x.Shared_Mem_Write_Error, _x.Shared_Mem_Read_Error, _x.Shared_Mem_Config_Error, _x.Share_Mem_Init_Error, _x.RAM_Test_Error, _x.Num_Errors, _x.MMAP_Memory_Error, _x.ISR_Attach_Error, _x.IPC_DRV_Write_Error, _x.IPC_DRV_Trigger_Error, _x.IPC_DRV_Sync_Error, _x.IPC_DRV_Read_Error, _x.IPC_DRV_Init_Error, _x.Interrupt_Enable_Error, _x.HIL_Format_Error, _x.Flash_Filesystem_Error, _x.Error_none, _x.DSP_Load_Read_Error, _x.DSP_Load_Open_Error, _x.DSP_Load_Address_Error, _x.DSP_ISP_Write_Error, _x.DSP_IPC_Read_Error, _x.DSP_IPC_Init, _x.DSP_Init_Error, _x.DSP_DRV_Start_Error, _x.DSP_DRV_Load_Error, _x.DSP_DRV_Init_Error, _x.DSP_DRV_Init2_error, _x.DSP_DRV_Init1_error, _x.DSP_Calibration_Error, _x.CAN_XMT_Error, _x.CAN_RCV_Error, _x.CAN_Hardware_Error, _x.Always_True))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.Timer_Create_Error, _x.Thread_Create_Error, _x.ARM_Calibration_Error, _x.SPI_FEE_Error, _x.SPI_Comm_Error, _x.Socket_Write_Error, _x.DSP_Cal_Obsolete_62_Error, _x.Socket_Read_error, _x.Socket_Init_Error, _x.Signal_Wait_Error, _x.Signal_Send_Error, _x.Signal_Create_Error, _x.Shared_Mem_Write_Error, _x.Shared_Mem_Read_Error, _x.Shared_Mem_Config_Error, _x.Share_Mem_Init_Error, _x.RAM_Test_Error, _x.Num_Errors, _x.MMAP_Memory_Error, _x.ISR_Attach_Error, _x.IPC_DRV_Write_Error, _x.IPC_DRV_Trigger_Error, _x.IPC_DRV_Sync_Error, _x.IPC_DRV_Read_Error, _x.IPC_DRV_Init_Error, _x.Interrupt_Enable_Error, _x.HIL_Format_Error, _x.Flash_Filesystem_Error, _x.Error_none, _x.DSP_Load_Read_Error, _x.DSP_Load_Open_Error, _x.DSP_Load_Address_Error, _x.DSP_ISP_Write_Error, _x.DSP_IPC_Read_Error, _x.DSP_IPC_Init, _x.DSP_Init_Error, _x.DSP_DRV_Start_Error, _x.DSP_DRV_Load_Error, _x.DSP_DRV_Init_Error, _x.DSP_DRV_Init2_error, _x.DSP_DRV_Init1_error, _x.DSP_Calibration_Error, _x.CAN_XMT_Error, _x.CAN_RCV_Error, _x.CAN_Hardware_Error, _x.Always_True,) = _get_struct_46B().unpack(str[start:end])
      self.Timer_Create_Error = bool(self.Timer_Create_Error)
      self.Thread_Create_Error = bool(self.Thread_Create_Error)
      self.ARM_Calibration_Error = bool(self.ARM_Calibration_Error)
      self.SPI_FEE_Error = bool(self.SPI_FEE_Error)
      self.SPI_Comm_Error = bool(self.SPI_Comm_Error)
      self.Socket_Write_Error = bool(self.Socket_Write_Error)
      self.DSP_Cal_Obsolete_62_Error = bool(self.DSP_Cal_Obsolete_62_Error)
      self.Socket_Read_error = bool(self.Socket_Read_error)
      self.Socket_Init_Error = bool(self.Socket_Init_Error)
      self.Signal_Wait_Error = bool(self.Signal_Wait_Error)
      self.Signal_Send_Error = bool(self.Signal_Send_Error)
      self.Signal_Create_Error = bool(self.Signal_Create_Error)
      self.Shared_Mem_Write_Error = bool(self.Shared_Mem_Write_Error)
      self.Shared_Mem_Read_Error = bool(self.Shared_Mem_Read_Error)
      self.Shared_Mem_Config_Error = bool(self.Shared_Mem_Config_Error)
      self.Share_Mem_Init_Error = bool(self.Share_Mem_Init_Error)
      self.RAM_Test_Error = bool(self.RAM_Test_Error)
      self.Num_Errors = bool(self.Num_Errors)
      self.MMAP_Memory_Error = bool(self.MMAP_Memory_Error)
      self.ISR_Attach_Error = bool(self.ISR_Attach_Error)
      self.IPC_DRV_Write_Error = bool(self.IPC_DRV_Write_Error)
      self.IPC_DRV_Trigger_Error = bool(self.IPC_DRV_Trigger_Error)
      self.IPC_DRV_Sync_Error = bool(self.IPC_DRV_Sync_Error)
      self.IPC_DRV_Read_Error = bool(self.IPC_DRV_Read_Error)
      self.IPC_DRV_Init_Error = bool(self.IPC_DRV_Init_Error)
      self.Interrupt_Enable_Error = bool(self.Interrupt_Enable_Error)
      self.HIL_Format_Error = bool(self.HIL_Format_Error)
      self.Flash_Filesystem_Error = bool(self.Flash_Filesystem_Error)
      self.Error_none = bool(self.Error_none)
      self.DSP_Load_Read_Error = bool(self.DSP_Load_Read_Error)
      self.DSP_Load_Open_Error = bool(self.DSP_Load_Open_Error)
      self.DSP_Load_Address_Error = bool(self.DSP_Load_Address_Error)
      self.DSP_ISP_Write_Error = bool(self.DSP_ISP_Write_Error)
      self.DSP_IPC_Read_Error = bool(self.DSP_IPC_Read_Error)
      self.DSP_IPC_Init = bool(self.DSP_IPC_Init)
      self.DSP_Init_Error = bool(self.DSP_Init_Error)
      self.DSP_DRV_Start_Error = bool(self.DSP_DRV_Start_Error)
      self.DSP_DRV_Load_Error = bool(self.DSP_DRV_Load_Error)
      self.DSP_DRV_Init_Error = bool(self.DSP_DRV_Init_Error)
      self.DSP_DRV_Init2_error = bool(self.DSP_DRV_Init2_error)
      self.DSP_DRV_Init1_error = bool(self.DSP_DRV_Init1_error)
      self.DSP_Calibration_Error = bool(self.DSP_Calibration_Error)
      self.CAN_XMT_Error = bool(self.CAN_XMT_Error)
      self.CAN_RCV_Error = bool(self.CAN_RCV_Error)
      self.CAN_Hardware_Error = bool(self.CAN_Hardware_Error)
      self.Always_True = bool(self.Always_True)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_46B().pack(_x.Timer_Create_Error, _x.Thread_Create_Error, _x.ARM_Calibration_Error, _x.SPI_FEE_Error, _x.SPI_Comm_Error, _x.Socket_Write_Error, _x.DSP_Cal_Obsolete_62_Error, _x.Socket_Read_error, _x.Socket_Init_Error, _x.Signal_Wait_Error, _x.Signal_Send_Error, _x.Signal_Create_Error, _x.Shared_Mem_Write_Error, _x.Shared_Mem_Read_Error, _x.Shared_Mem_Config_Error, _x.Share_Mem_Init_Error, _x.RAM_Test_Error, _x.Num_Errors, _x.MMAP_Memory_Error, _x.ISR_Attach_Error, _x.IPC_DRV_Write_Error, _x.IPC_DRV_Trigger_Error, _x.IPC_DRV_Sync_Error, _x.IPC_DRV_Read_Error, _x.IPC_DRV_Init_Error, _x.Interrupt_Enable_Error, _x.HIL_Format_Error, _x.Flash_Filesystem_Error, _x.Error_none, _x.DSP_Load_Read_Error, _x.DSP_Load_Open_Error, _x.DSP_Load_Address_Error, _x.DSP_ISP_Write_Error, _x.DSP_IPC_Read_Error, _x.DSP_IPC_Init, _x.DSP_Init_Error, _x.DSP_DRV_Start_Error, _x.DSP_DRV_Load_Error, _x.DSP_DRV_Init_Error, _x.DSP_DRV_Init2_error, _x.DSP_DRV_Init1_error, _x.DSP_Calibration_Error, _x.CAN_XMT_Error, _x.CAN_RCV_Error, _x.CAN_Hardware_Error, _x.Always_True))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.Timer_Create_Error, _x.Thread_Create_Error, _x.ARM_Calibration_Error, _x.SPI_FEE_Error, _x.SPI_Comm_Error, _x.Socket_Write_Error, _x.DSP_Cal_Obsolete_62_Error, _x.Socket_Read_error, _x.Socket_Init_Error, _x.Signal_Wait_Error, _x.Signal_Send_Error, _x.Signal_Create_Error, _x.Shared_Mem_Write_Error, _x.Shared_Mem_Read_Error, _x.Shared_Mem_Config_Error, _x.Share_Mem_Init_Error, _x.RAM_Test_Error, _x.Num_Errors, _x.MMAP_Memory_Error, _x.ISR_Attach_Error, _x.IPC_DRV_Write_Error, _x.IPC_DRV_Trigger_Error, _x.IPC_DRV_Sync_Error, _x.IPC_DRV_Read_Error, _x.IPC_DRV_Init_Error, _x.Interrupt_Enable_Error, _x.HIL_Format_Error, _x.Flash_Filesystem_Error, _x.Error_none, _x.DSP_Load_Read_Error, _x.DSP_Load_Open_Error, _x.DSP_Load_Address_Error, _x.DSP_ISP_Write_Error, _x.DSP_IPC_Read_Error, _x.DSP_IPC_Init, _x.DSP_Init_Error, _x.DSP_DRV_Start_Error, _x.DSP_DRV_Load_Error, _x.DSP_DRV_Init_Error, _x.DSP_DRV_Init2_error, _x.DSP_DRV_Init1_error, _x.DSP_Calibration_Error, _x.CAN_XMT_Error, _x.CAN_RCV_Error, _x.CAN_Hardware_Error, _x.Always_True,) = _get_struct_46B().unpack(str[start:end])
      self.Timer_Create_Error = bool(self.Timer_Create_Error)
      self.Thread_Create_Error = bool(self.Thread_Create_Error)
      self.ARM_Calibration_Error = bool(self.ARM_Calibration_Error)
      self.SPI_FEE_Error = bool(self.SPI_FEE_Error)
      self.SPI_Comm_Error = bool(self.SPI_Comm_Error)
      self.Socket_Write_Error = bool(self.Socket_Write_Error)
      self.DSP_Cal_Obsolete_62_Error = bool(self.DSP_Cal_Obsolete_62_Error)
      self.Socket_Read_error = bool(self.Socket_Read_error)
      self.Socket_Init_Error = bool(self.Socket_Init_Error)
      self.Signal_Wait_Error = bool(self.Signal_Wait_Error)
      self.Signal_Send_Error = bool(self.Signal_Send_Error)
      self.Signal_Create_Error = bool(self.Signal_Create_Error)
      self.Shared_Mem_Write_Error = bool(self.Shared_Mem_Write_Error)
      self.Shared_Mem_Read_Error = bool(self.Shared_Mem_Read_Error)
      self.Shared_Mem_Config_Error = bool(self.Shared_Mem_Config_Error)
      self.Share_Mem_Init_Error = bool(self.Share_Mem_Init_Error)
      self.RAM_Test_Error = bool(self.RAM_Test_Error)
      self.Num_Errors = bool(self.Num_Errors)
      self.MMAP_Memory_Error = bool(self.MMAP_Memory_Error)
      self.ISR_Attach_Error = bool(self.ISR_Attach_Error)
      self.IPC_DRV_Write_Error = bool(self.IPC_DRV_Write_Error)
      self.IPC_DRV_Trigger_Error = bool(self.IPC_DRV_Trigger_Error)
      self.IPC_DRV_Sync_Error = bool(self.IPC_DRV_Sync_Error)
      self.IPC_DRV_Read_Error = bool(self.IPC_DRV_Read_Error)
      self.IPC_DRV_Init_Error = bool(self.IPC_DRV_Init_Error)
      self.Interrupt_Enable_Error = bool(self.Interrupt_Enable_Error)
      self.HIL_Format_Error = bool(self.HIL_Format_Error)
      self.Flash_Filesystem_Error = bool(self.Flash_Filesystem_Error)
      self.Error_none = bool(self.Error_none)
      self.DSP_Load_Read_Error = bool(self.DSP_Load_Read_Error)
      self.DSP_Load_Open_Error = bool(self.DSP_Load_Open_Error)
      self.DSP_Load_Address_Error = bool(self.DSP_Load_Address_Error)
      self.DSP_ISP_Write_Error = bool(self.DSP_ISP_Write_Error)
      self.DSP_IPC_Read_Error = bool(self.DSP_IPC_Read_Error)
      self.DSP_IPC_Init = bool(self.DSP_IPC_Init)
      self.DSP_Init_Error = bool(self.DSP_Init_Error)
      self.DSP_DRV_Start_Error = bool(self.DSP_DRV_Start_Error)
      self.DSP_DRV_Load_Error = bool(self.DSP_DRV_Load_Error)
      self.DSP_DRV_Init_Error = bool(self.DSP_DRV_Init_Error)
      self.DSP_DRV_Init2_error = bool(self.DSP_DRV_Init2_error)
      self.DSP_DRV_Init1_error = bool(self.DSP_DRV_Init1_error)
      self.DSP_Calibration_Error = bool(self.DSP_Calibration_Error)
      self.CAN_XMT_Error = bool(self.CAN_XMT_Error)
      self.CAN_RCV_Error = bool(self.CAN_RCV_Error)
      self.CAN_Hardware_Error = bool(self.CAN_Hardware_Error)
      self.Always_True = bool(self.Always_True)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_46B = None
def _get_struct_46B():
    global _struct_46B
    if _struct_46B is None:
        _struct_46B = struct.Struct("<46B")
    return _struct_46B
