# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_srr_msgs/SrrTrack.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SrrTrack(genpy.Message):
  _md5sum = "fe266d1721e555c55d5d9c747938f98b"
  _type = "delphi_srr_msgs/SrrTrack"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message file for srr_track

Header header

uint8     CAN_TX_DETECT_VALID_LEVEL               
uint8         CAN_TX_DETECT_VALID_LEVEL_Suspect_Detection=0
uint8         CAN_TX_DETECT_VALID_LEVEL_Level_1=1
uint8         CAN_TX_DETECT_VALID_LEVEL_Level_2=2
uint8         CAN_TX_DETECT_VALID_LEVEL_Level_3=3
uint8         CAN_TX_DETECT_VALID_LEVEL_Level_4=4
uint8         CAN_TX_DETECT_VALID_LEVEL_Level_5=5
uint8         CAN_TX_DETECT_VALID_LEVEL_Level_6=6
uint8         CAN_TX_DETECT_VALID_LEVEL_Level_7=7

bool      CAN_TX_DETECT_STATUS                    
bool          CAN_TX_DETECT_STATUS_No_Data=0
bool          CAN_TX_DETECT_STATUS_Valid_Data_Present=1

float32   CAN_TX_DETECT_RANGE_RATE                 # m/s

float32   CAN_TX_DETECT_RANGE                      # m

float32   CAN_TX_DETECT_ANGLE                      # deg

float32   CAN_TX_DETECT_AMPLITUDE                  # dBsm


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  CAN_TX_DETECT_VALID_LEVEL_Suspect_Detection = 0
  CAN_TX_DETECT_VALID_LEVEL_Level_1 = 1
  CAN_TX_DETECT_VALID_LEVEL_Level_2 = 2
  CAN_TX_DETECT_VALID_LEVEL_Level_3 = 3
  CAN_TX_DETECT_VALID_LEVEL_Level_4 = 4
  CAN_TX_DETECT_VALID_LEVEL_Level_5 = 5
  CAN_TX_DETECT_VALID_LEVEL_Level_6 = 6
  CAN_TX_DETECT_VALID_LEVEL_Level_7 = 7
  CAN_TX_DETECT_STATUS_No_Data = False
  CAN_TX_DETECT_STATUS_Valid_Data_Present = True

  __slots__ = ['header','CAN_TX_DETECT_VALID_LEVEL','CAN_TX_DETECT_STATUS','CAN_TX_DETECT_RANGE_RATE','CAN_TX_DETECT_RANGE','CAN_TX_DETECT_ANGLE','CAN_TX_DETECT_AMPLITUDE']
  _slot_types = ['std_msgs/Header','uint8','bool','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,CAN_TX_DETECT_VALID_LEVEL,CAN_TX_DETECT_STATUS,CAN_TX_DETECT_RANGE_RATE,CAN_TX_DETECT_RANGE,CAN_TX_DETECT_ANGLE,CAN_TX_DETECT_AMPLITUDE

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SrrTrack, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.CAN_TX_DETECT_VALID_LEVEL is None:
        self.CAN_TX_DETECT_VALID_LEVEL = 0
      if self.CAN_TX_DETECT_STATUS is None:
        self.CAN_TX_DETECT_STATUS = False
      if self.CAN_TX_DETECT_RANGE_RATE is None:
        self.CAN_TX_DETECT_RANGE_RATE = 0.
      if self.CAN_TX_DETECT_RANGE is None:
        self.CAN_TX_DETECT_RANGE = 0.
      if self.CAN_TX_DETECT_ANGLE is None:
        self.CAN_TX_DETECT_ANGLE = 0.
      if self.CAN_TX_DETECT_AMPLITUDE is None:
        self.CAN_TX_DETECT_AMPLITUDE = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.CAN_TX_DETECT_VALID_LEVEL = 0
      self.CAN_TX_DETECT_STATUS = False
      self.CAN_TX_DETECT_RANGE_RATE = 0.
      self.CAN_TX_DETECT_RANGE = 0.
      self.CAN_TX_DETECT_ANGLE = 0.
      self.CAN_TX_DETECT_AMPLITUDE = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B4f().pack(_x.CAN_TX_DETECT_VALID_LEVEL, _x.CAN_TX_DETECT_STATUS, _x.CAN_TX_DETECT_RANGE_RATE, _x.CAN_TX_DETECT_RANGE, _x.CAN_TX_DETECT_ANGLE, _x.CAN_TX_DETECT_AMPLITUDE))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.CAN_TX_DETECT_VALID_LEVEL, _x.CAN_TX_DETECT_STATUS, _x.CAN_TX_DETECT_RANGE_RATE, _x.CAN_TX_DETECT_RANGE, _x.CAN_TX_DETECT_ANGLE, _x.CAN_TX_DETECT_AMPLITUDE,) = _get_struct_2B4f().unpack(str[start:end])
      self.CAN_TX_DETECT_STATUS = bool(self.CAN_TX_DETECT_STATUS)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B4f().pack(_x.CAN_TX_DETECT_VALID_LEVEL, _x.CAN_TX_DETECT_STATUS, _x.CAN_TX_DETECT_RANGE_RATE, _x.CAN_TX_DETECT_RANGE, _x.CAN_TX_DETECT_ANGLE, _x.CAN_TX_DETECT_AMPLITUDE))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.CAN_TX_DETECT_VALID_LEVEL, _x.CAN_TX_DETECT_STATUS, _x.CAN_TX_DETECT_RANGE_RATE, _x.CAN_TX_DETECT_RANGE, _x.CAN_TX_DETECT_ANGLE, _x.CAN_TX_DETECT_AMPLITUDE,) = _get_struct_2B4f().unpack(str[start:end])
      self.CAN_TX_DETECT_STATUS = bool(self.CAN_TX_DETECT_STATUS)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2B4f = None
def _get_struct_2B4f():
    global _struct_2B4f
    if _struct_2B4f is None:
        _struct_2B4f = struct.Struct("<2B4f")
    return _struct_2B4f
