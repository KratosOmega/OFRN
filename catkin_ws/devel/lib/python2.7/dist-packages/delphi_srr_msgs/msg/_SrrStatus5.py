# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_srr_msgs/SrrStatus5.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SrrStatus5(genpy.Message):
  _md5sum = "8ac0881115410e342c76d82d29edaf36"
  _type = "delphi_srr_msgs/SrrStatus5"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message file for srr_status5

Header header

bool      Disable_Auto_Align                      

uint8     CAN_TX_YAW_RATE_REF_QF                  
uint8         CAN_TX_YAW_RATE_REF_QF_Undefined=0
uint8         CAN_TX_YAW_RATE_REF_QF_Temp_Undefined=1
uint8         CAN_TX_YAW_RATE_REF_QF_Not_Accurate=2
uint8         CAN_TX_YAW_RATE_REF_QF_Accurate=3

uint8     CAN_TX_YAW_RATE_RAW_QF                  
uint8         CAN_TX_YAW_RATE_RAW_QF_Undefined=0
uint8         CAN_TX_YAW_RATE_RAW_QF_Temp_Undefined=1
uint8         CAN_TX_YAW_RATE_RAW_QF_Not_Accurate=2
uint8         CAN_TX_YAW_RATE_RAW_QF_Accurate=3

float32   CAN_TX_YAW_RATE_REFERENCE                # deg/s

float32   CAN_TX_YAW_RATE_RAW                      # deg/s

uint8     CAN_TX_SYSTEM_STATUS                    
uint8         CAN_TX_SYSTEM_STATUS_Configuration=0
uint8         CAN_TX_SYSTEM_STATUS_StartUp=1
uint8         CAN_TX_SYSTEM_STATUS_Running=2
uint8         CAN_TX_SYSTEM_STATUS_Blocked=3
uint8         CAN_TX_SYSTEM_STATUS_Faulty=4
uint8         CAN_TX_SYSTEM_STATUS_ShutDown=5
uint8         CAN_TX_SYSTEM_STATUS_Hot=6

int16     CAN_TX_OUTSIDE_TEMPERATURE               # degC

bool      CAN_BLOCKAGE_MNR_BLOCKED                

bool      CAN_BLOCKAGE_BB_BLOCKED                 

bool      CAN_BLOCKAGE_RADAR_BLOCKED              

bool      CAN_TD_BLOCKED                          

bool      Radar_TX_Power_Error                    

bool      Radar_LO_Power_Error                    

bool      Radar_Data_sync_error                   

bool      Linearizer_SPI_Transfer_Error           

bool      Saturated_Tuning_Freq_Error             

bool      RTN_SPI_Transfer_Error                  

bool      RRN_SPI_Transfer_Error                  

bool      Video_Port_Capture_Error                

bool      Vertical_Misalignment_error             

bool      TX_Temperature_Fault                    

bool      Transmitter_ID_Error                    

bool      DSP_Unit_Cal_Checksum_Error             

bool      DSP_Unit_Cal_Block_Chcksm_Error         

bool      DSP_Tuning_Sensitivity_Error            

bool      DSP_Loop_Overrun_Error                  

bool      ADC_SPI_Transfer_Error                  


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  CAN_TX_YAW_RATE_REF_QF_Undefined = 0
  CAN_TX_YAW_RATE_REF_QF_Temp_Undefined = 1
  CAN_TX_YAW_RATE_REF_QF_Not_Accurate = 2
  CAN_TX_YAW_RATE_REF_QF_Accurate = 3
  CAN_TX_YAW_RATE_RAW_QF_Undefined = 0
  CAN_TX_YAW_RATE_RAW_QF_Temp_Undefined = 1
  CAN_TX_YAW_RATE_RAW_QF_Not_Accurate = 2
  CAN_TX_YAW_RATE_RAW_QF_Accurate = 3
  CAN_TX_SYSTEM_STATUS_Configuration = 0
  CAN_TX_SYSTEM_STATUS_StartUp = 1
  CAN_TX_SYSTEM_STATUS_Running = 2
  CAN_TX_SYSTEM_STATUS_Blocked = 3
  CAN_TX_SYSTEM_STATUS_Faulty = 4
  CAN_TX_SYSTEM_STATUS_ShutDown = 5
  CAN_TX_SYSTEM_STATUS_Hot = 6

  __slots__ = ['header','Disable_Auto_Align','CAN_TX_YAW_RATE_REF_QF','CAN_TX_YAW_RATE_RAW_QF','CAN_TX_YAW_RATE_REFERENCE','CAN_TX_YAW_RATE_RAW','CAN_TX_SYSTEM_STATUS','CAN_TX_OUTSIDE_TEMPERATURE','CAN_BLOCKAGE_MNR_BLOCKED','CAN_BLOCKAGE_BB_BLOCKED','CAN_BLOCKAGE_RADAR_BLOCKED','CAN_TD_BLOCKED','Radar_TX_Power_Error','Radar_LO_Power_Error','Radar_Data_sync_error','Linearizer_SPI_Transfer_Error','Saturated_Tuning_Freq_Error','RTN_SPI_Transfer_Error','RRN_SPI_Transfer_Error','Video_Port_Capture_Error','Vertical_Misalignment_error','TX_Temperature_Fault','Transmitter_ID_Error','DSP_Unit_Cal_Checksum_Error','DSP_Unit_Cal_Block_Chcksm_Error','DSP_Tuning_Sensitivity_Error','DSP_Loop_Overrun_Error','ADC_SPI_Transfer_Error']
  _slot_types = ['std_msgs/Header','bool','uint8','uint8','float32','float32','uint8','int16','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Disable_Auto_Align,CAN_TX_YAW_RATE_REF_QF,CAN_TX_YAW_RATE_RAW_QF,CAN_TX_YAW_RATE_REFERENCE,CAN_TX_YAW_RATE_RAW,CAN_TX_SYSTEM_STATUS,CAN_TX_OUTSIDE_TEMPERATURE,CAN_BLOCKAGE_MNR_BLOCKED,CAN_BLOCKAGE_BB_BLOCKED,CAN_BLOCKAGE_RADAR_BLOCKED,CAN_TD_BLOCKED,Radar_TX_Power_Error,Radar_LO_Power_Error,Radar_Data_sync_error,Linearizer_SPI_Transfer_Error,Saturated_Tuning_Freq_Error,RTN_SPI_Transfer_Error,RRN_SPI_Transfer_Error,Video_Port_Capture_Error,Vertical_Misalignment_error,TX_Temperature_Fault,Transmitter_ID_Error,DSP_Unit_Cal_Checksum_Error,DSP_Unit_Cal_Block_Chcksm_Error,DSP_Tuning_Sensitivity_Error,DSP_Loop_Overrun_Error,ADC_SPI_Transfer_Error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SrrStatus5, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Disable_Auto_Align is None:
        self.Disable_Auto_Align = False
      if self.CAN_TX_YAW_RATE_REF_QF is None:
        self.CAN_TX_YAW_RATE_REF_QF = 0
      if self.CAN_TX_YAW_RATE_RAW_QF is None:
        self.CAN_TX_YAW_RATE_RAW_QF = 0
      if self.CAN_TX_YAW_RATE_REFERENCE is None:
        self.CAN_TX_YAW_RATE_REFERENCE = 0.
      if self.CAN_TX_YAW_RATE_RAW is None:
        self.CAN_TX_YAW_RATE_RAW = 0.
      if self.CAN_TX_SYSTEM_STATUS is None:
        self.CAN_TX_SYSTEM_STATUS = 0
      if self.CAN_TX_OUTSIDE_TEMPERATURE is None:
        self.CAN_TX_OUTSIDE_TEMPERATURE = 0
      if self.CAN_BLOCKAGE_MNR_BLOCKED is None:
        self.CAN_BLOCKAGE_MNR_BLOCKED = False
      if self.CAN_BLOCKAGE_BB_BLOCKED is None:
        self.CAN_BLOCKAGE_BB_BLOCKED = False
      if self.CAN_BLOCKAGE_RADAR_BLOCKED is None:
        self.CAN_BLOCKAGE_RADAR_BLOCKED = False
      if self.CAN_TD_BLOCKED is None:
        self.CAN_TD_BLOCKED = False
      if self.Radar_TX_Power_Error is None:
        self.Radar_TX_Power_Error = False
      if self.Radar_LO_Power_Error is None:
        self.Radar_LO_Power_Error = False
      if self.Radar_Data_sync_error is None:
        self.Radar_Data_sync_error = False
      if self.Linearizer_SPI_Transfer_Error is None:
        self.Linearizer_SPI_Transfer_Error = False
      if self.Saturated_Tuning_Freq_Error is None:
        self.Saturated_Tuning_Freq_Error = False
      if self.RTN_SPI_Transfer_Error is None:
        self.RTN_SPI_Transfer_Error = False
      if self.RRN_SPI_Transfer_Error is None:
        self.RRN_SPI_Transfer_Error = False
      if self.Video_Port_Capture_Error is None:
        self.Video_Port_Capture_Error = False
      if self.Vertical_Misalignment_error is None:
        self.Vertical_Misalignment_error = False
      if self.TX_Temperature_Fault is None:
        self.TX_Temperature_Fault = False
      if self.Transmitter_ID_Error is None:
        self.Transmitter_ID_Error = False
      if self.DSP_Unit_Cal_Checksum_Error is None:
        self.DSP_Unit_Cal_Checksum_Error = False
      if self.DSP_Unit_Cal_Block_Chcksm_Error is None:
        self.DSP_Unit_Cal_Block_Chcksm_Error = False
      if self.DSP_Tuning_Sensitivity_Error is None:
        self.DSP_Tuning_Sensitivity_Error = False
      if self.DSP_Loop_Overrun_Error is None:
        self.DSP_Loop_Overrun_Error = False
      if self.ADC_SPI_Transfer_Error is None:
        self.ADC_SPI_Transfer_Error = False
    else:
      self.header = std_msgs.msg.Header()
      self.Disable_Auto_Align = False
      self.CAN_TX_YAW_RATE_REF_QF = 0
      self.CAN_TX_YAW_RATE_RAW_QF = 0
      self.CAN_TX_YAW_RATE_REFERENCE = 0.
      self.CAN_TX_YAW_RATE_RAW = 0.
      self.CAN_TX_SYSTEM_STATUS = 0
      self.CAN_TX_OUTSIDE_TEMPERATURE = 0
      self.CAN_BLOCKAGE_MNR_BLOCKED = False
      self.CAN_BLOCKAGE_BB_BLOCKED = False
      self.CAN_BLOCKAGE_RADAR_BLOCKED = False
      self.CAN_TD_BLOCKED = False
      self.Radar_TX_Power_Error = False
      self.Radar_LO_Power_Error = False
      self.Radar_Data_sync_error = False
      self.Linearizer_SPI_Transfer_Error = False
      self.Saturated_Tuning_Freq_Error = False
      self.RTN_SPI_Transfer_Error = False
      self.RRN_SPI_Transfer_Error = False
      self.Video_Port_Capture_Error = False
      self.Vertical_Misalignment_error = False
      self.TX_Temperature_Fault = False
      self.Transmitter_ID_Error = False
      self.DSP_Unit_Cal_Checksum_Error = False
      self.DSP_Unit_Cal_Block_Chcksm_Error = False
      self.DSP_Tuning_Sensitivity_Error = False
      self.DSP_Loop_Overrun_Error = False
      self.ADC_SPI_Transfer_Error = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B2fBh20B().pack(_x.Disable_Auto_Align, _x.CAN_TX_YAW_RATE_REF_QF, _x.CAN_TX_YAW_RATE_RAW_QF, _x.CAN_TX_YAW_RATE_REFERENCE, _x.CAN_TX_YAW_RATE_RAW, _x.CAN_TX_SYSTEM_STATUS, _x.CAN_TX_OUTSIDE_TEMPERATURE, _x.CAN_BLOCKAGE_MNR_BLOCKED, _x.CAN_BLOCKAGE_BB_BLOCKED, _x.CAN_BLOCKAGE_RADAR_BLOCKED, _x.CAN_TD_BLOCKED, _x.Radar_TX_Power_Error, _x.Radar_LO_Power_Error, _x.Radar_Data_sync_error, _x.Linearizer_SPI_Transfer_Error, _x.Saturated_Tuning_Freq_Error, _x.RTN_SPI_Transfer_Error, _x.RRN_SPI_Transfer_Error, _x.Video_Port_Capture_Error, _x.Vertical_Misalignment_error, _x.TX_Temperature_Fault, _x.Transmitter_ID_Error, _x.DSP_Unit_Cal_Checksum_Error, _x.DSP_Unit_Cal_Block_Chcksm_Error, _x.DSP_Tuning_Sensitivity_Error, _x.DSP_Loop_Overrun_Error, _x.ADC_SPI_Transfer_Error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.Disable_Auto_Align, _x.CAN_TX_YAW_RATE_REF_QF, _x.CAN_TX_YAW_RATE_RAW_QF, _x.CAN_TX_YAW_RATE_REFERENCE, _x.CAN_TX_YAW_RATE_RAW, _x.CAN_TX_SYSTEM_STATUS, _x.CAN_TX_OUTSIDE_TEMPERATURE, _x.CAN_BLOCKAGE_MNR_BLOCKED, _x.CAN_BLOCKAGE_BB_BLOCKED, _x.CAN_BLOCKAGE_RADAR_BLOCKED, _x.CAN_TD_BLOCKED, _x.Radar_TX_Power_Error, _x.Radar_LO_Power_Error, _x.Radar_Data_sync_error, _x.Linearizer_SPI_Transfer_Error, _x.Saturated_Tuning_Freq_Error, _x.RTN_SPI_Transfer_Error, _x.RRN_SPI_Transfer_Error, _x.Video_Port_Capture_Error, _x.Vertical_Misalignment_error, _x.TX_Temperature_Fault, _x.Transmitter_ID_Error, _x.DSP_Unit_Cal_Checksum_Error, _x.DSP_Unit_Cal_Block_Chcksm_Error, _x.DSP_Tuning_Sensitivity_Error, _x.DSP_Loop_Overrun_Error, _x.ADC_SPI_Transfer_Error,) = _get_struct_3B2fBh20B().unpack(str[start:end])
      self.Disable_Auto_Align = bool(self.Disable_Auto_Align)
      self.CAN_BLOCKAGE_MNR_BLOCKED = bool(self.CAN_BLOCKAGE_MNR_BLOCKED)
      self.CAN_BLOCKAGE_BB_BLOCKED = bool(self.CAN_BLOCKAGE_BB_BLOCKED)
      self.CAN_BLOCKAGE_RADAR_BLOCKED = bool(self.CAN_BLOCKAGE_RADAR_BLOCKED)
      self.CAN_TD_BLOCKED = bool(self.CAN_TD_BLOCKED)
      self.Radar_TX_Power_Error = bool(self.Radar_TX_Power_Error)
      self.Radar_LO_Power_Error = bool(self.Radar_LO_Power_Error)
      self.Radar_Data_sync_error = bool(self.Radar_Data_sync_error)
      self.Linearizer_SPI_Transfer_Error = bool(self.Linearizer_SPI_Transfer_Error)
      self.Saturated_Tuning_Freq_Error = bool(self.Saturated_Tuning_Freq_Error)
      self.RTN_SPI_Transfer_Error = bool(self.RTN_SPI_Transfer_Error)
      self.RRN_SPI_Transfer_Error = bool(self.RRN_SPI_Transfer_Error)
      self.Video_Port_Capture_Error = bool(self.Video_Port_Capture_Error)
      self.Vertical_Misalignment_error = bool(self.Vertical_Misalignment_error)
      self.TX_Temperature_Fault = bool(self.TX_Temperature_Fault)
      self.Transmitter_ID_Error = bool(self.Transmitter_ID_Error)
      self.DSP_Unit_Cal_Checksum_Error = bool(self.DSP_Unit_Cal_Checksum_Error)
      self.DSP_Unit_Cal_Block_Chcksm_Error = bool(self.DSP_Unit_Cal_Block_Chcksm_Error)
      self.DSP_Tuning_Sensitivity_Error = bool(self.DSP_Tuning_Sensitivity_Error)
      self.DSP_Loop_Overrun_Error = bool(self.DSP_Loop_Overrun_Error)
      self.ADC_SPI_Transfer_Error = bool(self.ADC_SPI_Transfer_Error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B2fBh20B().pack(_x.Disable_Auto_Align, _x.CAN_TX_YAW_RATE_REF_QF, _x.CAN_TX_YAW_RATE_RAW_QF, _x.CAN_TX_YAW_RATE_REFERENCE, _x.CAN_TX_YAW_RATE_RAW, _x.CAN_TX_SYSTEM_STATUS, _x.CAN_TX_OUTSIDE_TEMPERATURE, _x.CAN_BLOCKAGE_MNR_BLOCKED, _x.CAN_BLOCKAGE_BB_BLOCKED, _x.CAN_BLOCKAGE_RADAR_BLOCKED, _x.CAN_TD_BLOCKED, _x.Radar_TX_Power_Error, _x.Radar_LO_Power_Error, _x.Radar_Data_sync_error, _x.Linearizer_SPI_Transfer_Error, _x.Saturated_Tuning_Freq_Error, _x.RTN_SPI_Transfer_Error, _x.RRN_SPI_Transfer_Error, _x.Video_Port_Capture_Error, _x.Vertical_Misalignment_error, _x.TX_Temperature_Fault, _x.Transmitter_ID_Error, _x.DSP_Unit_Cal_Checksum_Error, _x.DSP_Unit_Cal_Block_Chcksm_Error, _x.DSP_Tuning_Sensitivity_Error, _x.DSP_Loop_Overrun_Error, _x.ADC_SPI_Transfer_Error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.Disable_Auto_Align, _x.CAN_TX_YAW_RATE_REF_QF, _x.CAN_TX_YAW_RATE_RAW_QF, _x.CAN_TX_YAW_RATE_REFERENCE, _x.CAN_TX_YAW_RATE_RAW, _x.CAN_TX_SYSTEM_STATUS, _x.CAN_TX_OUTSIDE_TEMPERATURE, _x.CAN_BLOCKAGE_MNR_BLOCKED, _x.CAN_BLOCKAGE_BB_BLOCKED, _x.CAN_BLOCKAGE_RADAR_BLOCKED, _x.CAN_TD_BLOCKED, _x.Radar_TX_Power_Error, _x.Radar_LO_Power_Error, _x.Radar_Data_sync_error, _x.Linearizer_SPI_Transfer_Error, _x.Saturated_Tuning_Freq_Error, _x.RTN_SPI_Transfer_Error, _x.RRN_SPI_Transfer_Error, _x.Video_Port_Capture_Error, _x.Vertical_Misalignment_error, _x.TX_Temperature_Fault, _x.Transmitter_ID_Error, _x.DSP_Unit_Cal_Checksum_Error, _x.DSP_Unit_Cal_Block_Chcksm_Error, _x.DSP_Tuning_Sensitivity_Error, _x.DSP_Loop_Overrun_Error, _x.ADC_SPI_Transfer_Error,) = _get_struct_3B2fBh20B().unpack(str[start:end])
      self.Disable_Auto_Align = bool(self.Disable_Auto_Align)
      self.CAN_BLOCKAGE_MNR_BLOCKED = bool(self.CAN_BLOCKAGE_MNR_BLOCKED)
      self.CAN_BLOCKAGE_BB_BLOCKED = bool(self.CAN_BLOCKAGE_BB_BLOCKED)
      self.CAN_BLOCKAGE_RADAR_BLOCKED = bool(self.CAN_BLOCKAGE_RADAR_BLOCKED)
      self.CAN_TD_BLOCKED = bool(self.CAN_TD_BLOCKED)
      self.Radar_TX_Power_Error = bool(self.Radar_TX_Power_Error)
      self.Radar_LO_Power_Error = bool(self.Radar_LO_Power_Error)
      self.Radar_Data_sync_error = bool(self.Radar_Data_sync_error)
      self.Linearizer_SPI_Transfer_Error = bool(self.Linearizer_SPI_Transfer_Error)
      self.Saturated_Tuning_Freq_Error = bool(self.Saturated_Tuning_Freq_Error)
      self.RTN_SPI_Transfer_Error = bool(self.RTN_SPI_Transfer_Error)
      self.RRN_SPI_Transfer_Error = bool(self.RRN_SPI_Transfer_Error)
      self.Video_Port_Capture_Error = bool(self.Video_Port_Capture_Error)
      self.Vertical_Misalignment_error = bool(self.Vertical_Misalignment_error)
      self.TX_Temperature_Fault = bool(self.TX_Temperature_Fault)
      self.Transmitter_ID_Error = bool(self.Transmitter_ID_Error)
      self.DSP_Unit_Cal_Checksum_Error = bool(self.DSP_Unit_Cal_Checksum_Error)
      self.DSP_Unit_Cal_Block_Chcksm_Error = bool(self.DSP_Unit_Cal_Block_Chcksm_Error)
      self.DSP_Tuning_Sensitivity_Error = bool(self.DSP_Tuning_Sensitivity_Error)
      self.DSP_Loop_Overrun_Error = bool(self.DSP_Loop_Overrun_Error)
      self.ADC_SPI_Transfer_Error = bool(self.ADC_SPI_Transfer_Error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3B2fBh20B = None
def _get_struct_3B2fBh20B():
    global _struct_3B2fBh20B
    if _struct_3B2fBh20B is None:
        _struct_3B2fBh20B = struct.Struct("<3B2fBh20B")
    return _struct_3B2fBh20B
