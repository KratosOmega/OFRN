# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from delphi_mrr_msgs/VehicleStateMsg1.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class VehicleStateMsg1(genpy.Message):
  _md5sum = "53be32b71bd306ada4e80cf033b07db5"
  _type = "delphi_mrr_msgs/VehicleStateMsg1"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint8 canFcwSensitivityLevel
bool  canVehicleStationary
uint8 canIntfMinorVersion
uint8 canIntfMajorVersion
uint8 canBrakePedal
bool  canHighWheelSlip
bool  canWasherFrontCmd
bool  canWiperFrontCmd
uint8 canWiperSpeedInfo
bool  canReverseGear
uint8 canBeamShapeActualRight
uint8 canBeamShapeActualLeft
bool  canMainBeamIndication
uint16 canVehicleIndex

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','canFcwSensitivityLevel','canVehicleStationary','canIntfMinorVersion','canIntfMajorVersion','canBrakePedal','canHighWheelSlip','canWasherFrontCmd','canWiperFrontCmd','canWiperSpeedInfo','canReverseGear','canBeamShapeActualRight','canBeamShapeActualLeft','canMainBeamIndication','canVehicleIndex']
  _slot_types = ['std_msgs/Header','uint8','bool','uint8','uint8','uint8','bool','bool','bool','uint8','bool','uint8','uint8','bool','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,canFcwSensitivityLevel,canVehicleStationary,canIntfMinorVersion,canIntfMajorVersion,canBrakePedal,canHighWheelSlip,canWasherFrontCmd,canWiperFrontCmd,canWiperSpeedInfo,canReverseGear,canBeamShapeActualRight,canBeamShapeActualLeft,canMainBeamIndication,canVehicleIndex

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleStateMsg1, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.canFcwSensitivityLevel is None:
        self.canFcwSensitivityLevel = 0
      if self.canVehicleStationary is None:
        self.canVehicleStationary = False
      if self.canIntfMinorVersion is None:
        self.canIntfMinorVersion = 0
      if self.canIntfMajorVersion is None:
        self.canIntfMajorVersion = 0
      if self.canBrakePedal is None:
        self.canBrakePedal = 0
      if self.canHighWheelSlip is None:
        self.canHighWheelSlip = False
      if self.canWasherFrontCmd is None:
        self.canWasherFrontCmd = False
      if self.canWiperFrontCmd is None:
        self.canWiperFrontCmd = False
      if self.canWiperSpeedInfo is None:
        self.canWiperSpeedInfo = 0
      if self.canReverseGear is None:
        self.canReverseGear = False
      if self.canBeamShapeActualRight is None:
        self.canBeamShapeActualRight = 0
      if self.canBeamShapeActualLeft is None:
        self.canBeamShapeActualLeft = 0
      if self.canMainBeamIndication is None:
        self.canMainBeamIndication = False
      if self.canVehicleIndex is None:
        self.canVehicleIndex = 0
    else:
      self.header = std_msgs.msg.Header()
      self.canFcwSensitivityLevel = 0
      self.canVehicleStationary = False
      self.canIntfMinorVersion = 0
      self.canIntfMajorVersion = 0
      self.canBrakePedal = 0
      self.canHighWheelSlip = False
      self.canWasherFrontCmd = False
      self.canWiperFrontCmd = False
      self.canWiperSpeedInfo = 0
      self.canReverseGear = False
      self.canBeamShapeActualRight = 0
      self.canBeamShapeActualLeft = 0
      self.canMainBeamIndication = False
      self.canVehicleIndex = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_13BH().pack(_x.canFcwSensitivityLevel, _x.canVehicleStationary, _x.canIntfMinorVersion, _x.canIntfMajorVersion, _x.canBrakePedal, _x.canHighWheelSlip, _x.canWasherFrontCmd, _x.canWiperFrontCmd, _x.canWiperSpeedInfo, _x.canReverseGear, _x.canBeamShapeActualRight, _x.canBeamShapeActualLeft, _x.canMainBeamIndication, _x.canVehicleIndex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.canFcwSensitivityLevel, _x.canVehicleStationary, _x.canIntfMinorVersion, _x.canIntfMajorVersion, _x.canBrakePedal, _x.canHighWheelSlip, _x.canWasherFrontCmd, _x.canWiperFrontCmd, _x.canWiperSpeedInfo, _x.canReverseGear, _x.canBeamShapeActualRight, _x.canBeamShapeActualLeft, _x.canMainBeamIndication, _x.canVehicleIndex,) = _get_struct_13BH().unpack(str[start:end])
      self.canVehicleStationary = bool(self.canVehicleStationary)
      self.canHighWheelSlip = bool(self.canHighWheelSlip)
      self.canWasherFrontCmd = bool(self.canWasherFrontCmd)
      self.canWiperFrontCmd = bool(self.canWiperFrontCmd)
      self.canReverseGear = bool(self.canReverseGear)
      self.canMainBeamIndication = bool(self.canMainBeamIndication)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_13BH().pack(_x.canFcwSensitivityLevel, _x.canVehicleStationary, _x.canIntfMinorVersion, _x.canIntfMajorVersion, _x.canBrakePedal, _x.canHighWheelSlip, _x.canWasherFrontCmd, _x.canWiperFrontCmd, _x.canWiperSpeedInfo, _x.canReverseGear, _x.canBeamShapeActualRight, _x.canBeamShapeActualLeft, _x.canMainBeamIndication, _x.canVehicleIndex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.canFcwSensitivityLevel, _x.canVehicleStationary, _x.canIntfMinorVersion, _x.canIntfMajorVersion, _x.canBrakePedal, _x.canHighWheelSlip, _x.canWasherFrontCmd, _x.canWiperFrontCmd, _x.canWiperSpeedInfo, _x.canReverseGear, _x.canBeamShapeActualRight, _x.canBeamShapeActualLeft, _x.canMainBeamIndication, _x.canVehicleIndex,) = _get_struct_13BH().unpack(str[start:end])
      self.canVehicleStationary = bool(self.canVehicleStationary)
      self.canHighWheelSlip = bool(self.canHighWheelSlip)
      self.canWasherFrontCmd = bool(self.canWasherFrontCmd)
      self.canWiperFrontCmd = bool(self.canWiperFrontCmd)
      self.canReverseGear = bool(self.canReverseGear)
      self.canMainBeamIndication = bool(self.canMainBeamIndication)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_13BH = None
def _get_struct_13BH():
    global _struct_13BH
    if _struct_13BH is None:
        _struct_13BH = struct.Struct("<13BH")
    return _struct_13BH
