# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from automotive_platform_msgs/CabinReport.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class CabinReport(genpy.Message):
  _md5sum = "63611b37cea8020053088e5a34aead53"
  _type = "automotive_platform_msgs/CabinReport"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Status of vehicle cabin sensors
Header header

# The door positions below are from the point of view of someone sitting
# in the vehicle, facing the X positive direction. Not using driver/passenger
# since this is different in left- vs right-hand drive vehicles.
bool door_open_front_right       # Status of the door nearest the front of the vehicle in the Y+ direction
bool door_open_front_left        # Status of the door nearest the front of the vehicle in the Y- direction
bool door_open_rear_right        # Status of the door nearest the rear of the vehicle in the Y+ direction
bool door_open_rear_left         # Status of the door nearest the rear of the vehicle in the Y- direction
bool hood_open                   # Status of the front compartment cover
bool trunk_open                  # Status of the rear compartment cover

bool passenger_present           # Whether or not a passenger is detected in the front non-driving seat
bool passenger_airbag_enabled    # Whether or not the passenger-side airbag is enabled

bool seatbelt_engaged_driver     # Whether or not the seatbelt for the driver's seat is buckled
bool seatbelt_engaged_passenger  # Whether or not the seatbelt for the passenger's seat is buckled

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','door_open_front_right','door_open_front_left','door_open_rear_right','door_open_rear_left','hood_open','trunk_open','passenger_present','passenger_airbag_enabled','seatbelt_engaged_driver','seatbelt_engaged_passenger']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,door_open_front_right,door_open_front_left,door_open_rear_right,door_open_rear_left,hood_open,trunk_open,passenger_present,passenger_airbag_enabled,seatbelt_engaged_driver,seatbelt_engaged_passenger

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CabinReport, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.door_open_front_right is None:
        self.door_open_front_right = False
      if self.door_open_front_left is None:
        self.door_open_front_left = False
      if self.door_open_rear_right is None:
        self.door_open_rear_right = False
      if self.door_open_rear_left is None:
        self.door_open_rear_left = False
      if self.hood_open is None:
        self.hood_open = False
      if self.trunk_open is None:
        self.trunk_open = False
      if self.passenger_present is None:
        self.passenger_present = False
      if self.passenger_airbag_enabled is None:
        self.passenger_airbag_enabled = False
      if self.seatbelt_engaged_driver is None:
        self.seatbelt_engaged_driver = False
      if self.seatbelt_engaged_passenger is None:
        self.seatbelt_engaged_passenger = False
    else:
      self.header = std_msgs.msg.Header()
      self.door_open_front_right = False
      self.door_open_front_left = False
      self.door_open_rear_right = False
      self.door_open_rear_left = False
      self.hood_open = False
      self.trunk_open = False
      self.passenger_present = False
      self.passenger_airbag_enabled = False
      self.seatbelt_engaged_driver = False
      self.seatbelt_engaged_passenger = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10B().pack(_x.door_open_front_right, _x.door_open_front_left, _x.door_open_rear_right, _x.door_open_rear_left, _x.hood_open, _x.trunk_open, _x.passenger_present, _x.passenger_airbag_enabled, _x.seatbelt_engaged_driver, _x.seatbelt_engaged_passenger))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.door_open_front_right, _x.door_open_front_left, _x.door_open_rear_right, _x.door_open_rear_left, _x.hood_open, _x.trunk_open, _x.passenger_present, _x.passenger_airbag_enabled, _x.seatbelt_engaged_driver, _x.seatbelt_engaged_passenger,) = _get_struct_10B().unpack(str[start:end])
      self.door_open_front_right = bool(self.door_open_front_right)
      self.door_open_front_left = bool(self.door_open_front_left)
      self.door_open_rear_right = bool(self.door_open_rear_right)
      self.door_open_rear_left = bool(self.door_open_rear_left)
      self.hood_open = bool(self.hood_open)
      self.trunk_open = bool(self.trunk_open)
      self.passenger_present = bool(self.passenger_present)
      self.passenger_airbag_enabled = bool(self.passenger_airbag_enabled)
      self.seatbelt_engaged_driver = bool(self.seatbelt_engaged_driver)
      self.seatbelt_engaged_passenger = bool(self.seatbelt_engaged_passenger)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10B().pack(_x.door_open_front_right, _x.door_open_front_left, _x.door_open_rear_right, _x.door_open_rear_left, _x.hood_open, _x.trunk_open, _x.passenger_present, _x.passenger_airbag_enabled, _x.seatbelt_engaged_driver, _x.seatbelt_engaged_passenger))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.door_open_front_right, _x.door_open_front_left, _x.door_open_rear_right, _x.door_open_rear_left, _x.hood_open, _x.trunk_open, _x.passenger_present, _x.passenger_airbag_enabled, _x.seatbelt_engaged_driver, _x.seatbelt_engaged_passenger,) = _get_struct_10B().unpack(str[start:end])
      self.door_open_front_right = bool(self.door_open_front_right)
      self.door_open_front_left = bool(self.door_open_front_left)
      self.door_open_rear_right = bool(self.door_open_rear_right)
      self.door_open_rear_left = bool(self.door_open_rear_left)
      self.hood_open = bool(self.hood_open)
      self.trunk_open = bool(self.trunk_open)
      self.passenger_present = bool(self.passenger_present)
      self.passenger_airbag_enabled = bool(self.passenger_airbag_enabled)
      self.seatbelt_engaged_driver = bool(self.seatbelt_engaged_driver)
      self.seatbelt_engaged_passenger = bool(self.seatbelt_engaged_passenger)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10B = None
def _get_struct_10B():
    global _struct_10B
    if _struct_10B is None:
        _struct_10B = struct.Struct("<10B")
    return _struct_10B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
