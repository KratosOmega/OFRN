// Generated by gencpp from file radar_msgs/RadarDetection.msg
// DO NOT EDIT!


#ifndef RADAR_MSGS_MESSAGE_RADARDETECTION_H
#define RADAR_MSGS_MESSAGE_RADARDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>

namespace radar_msgs
{
template <class ContainerAllocator>
struct RadarDetection_
{
  typedef RadarDetection_<ContainerAllocator> Type;

  RadarDetection_()
    : detection_id(0)
    , position()
    , velocity()
    , amplitude(0.0)  {
    }
  RadarDetection_(const ContainerAllocator& _alloc)
    : detection_id(0)
    , position(_alloc)
    , velocity(_alloc)
    , amplitude(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _detection_id_type;
  _detection_id_type detection_id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef double _amplitude_type;
  _amplitude_type amplitude;





  typedef boost::shared_ptr< ::radar_msgs::RadarDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radar_msgs::RadarDetection_<ContainerAllocator> const> ConstPtr;

}; // struct RadarDetection_

typedef ::radar_msgs::RadarDetection_<std::allocator<void> > RadarDetection;

typedef boost::shared_ptr< ::radar_msgs::RadarDetection > RadarDetectionPtr;
typedef boost::shared_ptr< ::radar_msgs::RadarDetection const> RadarDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radar_msgs::RadarDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radar_msgs::RadarDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace radar_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'radar_msgs': ['/home/kratos/OFRN/catkin_ws/src/radar_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::radar_msgs::RadarDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radar_msgs::RadarDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_msgs::RadarDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radar_msgs::RadarDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_msgs::RadarDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radar_msgs::RadarDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radar_msgs::RadarDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5eb81a43632fa3ab61f658171a9b6c5b";
  }

  static const char* value(const ::radar_msgs::RadarDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5eb81a43632fa3abULL;
  static const uint64_t static_value2 = 0x61f658171a9b6c5bULL;
};

template<class ContainerAllocator>
struct DataType< ::radar_msgs::RadarDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radar_msgs/RadarDetection";
  }

  static const char* value(const ::radar_msgs::RadarDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radar_msgs::RadarDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# All variables below are relative to the radar's frame of reference.\n\
# This message is not meant to be used alone but as part of a stamped or array message.\n\
\n\
uint16 detection_id                         # The ID of this detection generated by the radar. If\n\
                                            # the radar does not generate IDs, this is intended as\n\
                                            # a sequential identifier for each detection in a scan.\n\
\n\
geometry_msgs/Point position                # Only the x and y components are valid.\n\
geometry_msgs/Vector3 velocity              # range_rate rectangular transformation to x and y components\n\
float64 amplitude                           # The detection amplitude in dB.\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::radar_msgs::RadarDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radar_msgs::RadarDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detection_id);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.amplitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radar_msgs::RadarDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radar_msgs::RadarDetection_<ContainerAllocator>& v)
  {
    s << indent << "detection_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.detection_id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "amplitude: ";
    Printer<double>::stream(s, indent + "  ", v.amplitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADAR_MSGS_MESSAGE_RADARDETECTION_H
