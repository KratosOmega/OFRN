// Generated by gencpp from file delphi_srr_msgs/SrrFeatureAlert.msg
// DO NOT EDIT!


#ifndef DELPHI_SRR_MSGS_MESSAGE_SRRFEATUREALERT_H
#define DELPHI_SRR_MSGS_MESSAGE_SRRFEATUREALERT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_srr_msgs
{
template <class ContainerAllocator>
struct SrrFeatureAlert_
{
  typedef SrrFeatureAlert_<ContainerAllocator> Type;

  SrrFeatureAlert_()
    : header()
    , LCMA_blis_ignored_track_id(0)
    , LCMA_blis_track_id(0)
    , LCMA_cvw_TTC(0.0)
    , CTA_TTC_Alert(false)
    , CTA_selected_track_ttc(0.0)
    , CTA_selected_track(0)
    , CTA_Alert(0)
    , CTA_Active(false)
    , LCMA_cvw_cipv(0)
    , LCMA_cvw_alert_state(0)
    , LCMA_blis_alert_state(0)
    , LCMA_Active(false)  {
    }
  SrrFeatureAlert_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , LCMA_blis_ignored_track_id(0)
    , LCMA_blis_track_id(0)
    , LCMA_cvw_TTC(0.0)
    , CTA_TTC_Alert(false)
    , CTA_selected_track_ttc(0.0)
    , CTA_selected_track(0)
    , CTA_Alert(0)
    , CTA_Active(false)
    , LCMA_cvw_cipv(0)
    , LCMA_cvw_alert_state(0)
    , LCMA_blis_alert_state(0)
    , LCMA_Active(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _LCMA_blis_ignored_track_id_type;
  _LCMA_blis_ignored_track_id_type LCMA_blis_ignored_track_id;

   typedef uint8_t _LCMA_blis_track_id_type;
  _LCMA_blis_track_id_type LCMA_blis_track_id;

   typedef float _LCMA_cvw_TTC_type;
  _LCMA_cvw_TTC_type LCMA_cvw_TTC;

   typedef uint8_t _CTA_TTC_Alert_type;
  _CTA_TTC_Alert_type CTA_TTC_Alert;

   typedef float _CTA_selected_track_ttc_type;
  _CTA_selected_track_ttc_type CTA_selected_track_ttc;

   typedef uint16_t _CTA_selected_track_type;
  _CTA_selected_track_type CTA_selected_track;

   typedef uint8_t _CTA_Alert_type;
  _CTA_Alert_type CTA_Alert;

   typedef uint8_t _CTA_Active_type;
  _CTA_Active_type CTA_Active;

   typedef uint8_t _LCMA_cvw_cipv_type;
  _LCMA_cvw_cipv_type LCMA_cvw_cipv;

   typedef uint8_t _LCMA_cvw_alert_state_type;
  _LCMA_cvw_alert_state_type LCMA_cvw_alert_state;

   typedef uint8_t _LCMA_blis_alert_state_type;
  _LCMA_blis_alert_state_type LCMA_blis_alert_state;

   typedef uint8_t _LCMA_Active_type;
  _LCMA_Active_type LCMA_Active;





  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> const> ConstPtr;

}; // struct SrrFeatureAlert_

typedef ::delphi_srr_msgs::SrrFeatureAlert_<std::allocator<void> > SrrFeatureAlert;

typedef boost::shared_ptr< ::delphi_srr_msgs::SrrFeatureAlert > SrrFeatureAlertPtr;
typedef boost::shared_ptr< ::delphi_srr_msgs::SrrFeatureAlert const> SrrFeatureAlertConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace delphi_srr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'delphi_srr_msgs': ['/home/kratos/OFRN/catkin_ws/src/delphi_srr_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ccc2c20c174aa66456bfbd940c23205";
  }

  static const char* value(const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ccc2c20c174aa66ULL;
  static const uint64_t static_value2 = 0x456bfbd940c23205ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_srr_msgs/SrrFeatureAlert";
  }

  static const char* value(const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message file for srr_feature_alert\n\
\n\
Header header\n\
\n\
uint8     LCMA_blis_ignored_track_id              \n\
\n\
uint8     LCMA_blis_track_id                      \n\
\n\
float32   LCMA_cvw_TTC                             # seconds\n\
\n\
bool      CTA_TTC_Alert                           \n\
\n\
float32   CTA_selected_track_ttc                   # seconds\n\
\n\
uint16    CTA_selected_track                      \n\
\n\
uint8     CTA_Alert                                # binary\n\
\n\
bool      CTA_Active                               # binary\n\
\n\
uint8     LCMA_cvw_cipv                           \n\
\n\
uint8     LCMA_cvw_alert_state                    \n\
\n\
uint8     LCMA_blis_alert_state                   \n\
\n\
bool      LCMA_Active                             \n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.LCMA_blis_ignored_track_id);
      stream.next(m.LCMA_blis_track_id);
      stream.next(m.LCMA_cvw_TTC);
      stream.next(m.CTA_TTC_Alert);
      stream.next(m.CTA_selected_track_ttc);
      stream.next(m.CTA_selected_track);
      stream.next(m.CTA_Alert);
      stream.next(m.CTA_Active);
      stream.next(m.LCMA_cvw_cipv);
      stream.next(m.LCMA_cvw_alert_state);
      stream.next(m.LCMA_blis_alert_state);
      stream.next(m.LCMA_Active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SrrFeatureAlert_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_srr_msgs::SrrFeatureAlert_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "LCMA_blis_ignored_track_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LCMA_blis_ignored_track_id);
    s << indent << "LCMA_blis_track_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LCMA_blis_track_id);
    s << indent << "LCMA_cvw_TTC: ";
    Printer<float>::stream(s, indent + "  ", v.LCMA_cvw_TTC);
    s << indent << "CTA_TTC_Alert: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CTA_TTC_Alert);
    s << indent << "CTA_selected_track_ttc: ";
    Printer<float>::stream(s, indent + "  ", v.CTA_selected_track_ttc);
    s << indent << "CTA_selected_track: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.CTA_selected_track);
    s << indent << "CTA_Alert: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CTA_Alert);
    s << indent << "CTA_Active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CTA_Active);
    s << indent << "LCMA_cvw_cipv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LCMA_cvw_cipv);
    s << indent << "LCMA_cvw_alert_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LCMA_cvw_alert_state);
    s << indent << "LCMA_blis_alert_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LCMA_blis_alert_state);
    s << indent << "LCMA_Active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LCMA_Active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_SRR_MSGS_MESSAGE_SRRFEATUREALERT_H
