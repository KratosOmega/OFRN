// Generated by gencpp from file delphi_srr_msgs/SrrStatus3.msg
// DO NOT EDIT!


#ifndef DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS3_H
#define DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS3_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_srr_msgs
{
template <class ContainerAllocator>
struct SrrStatus3_
{
  typedef SrrStatus3_<ContainerAllocator> Type;

  SrrStatus3_()
    : header()
    , CAN_TX_ALIGNMENT_STATE(0)
    , CAN_TX_INTERFACE_VER_MINOR(0)
    , CAN_TX_SW_VERSION_ARM(0)
    , CAN_TX_HW_VERSION(0)
    , CAN_TX_INTERFACE_VERSION(0)
    , CAN_TX_SERIAL_NUM(0)  {
    }
  SrrStatus3_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , CAN_TX_ALIGNMENT_STATE(0)
    , CAN_TX_INTERFACE_VER_MINOR(0)
    , CAN_TX_SW_VERSION_ARM(0)
    , CAN_TX_HW_VERSION(0)
    , CAN_TX_INTERFACE_VERSION(0)
    , CAN_TX_SERIAL_NUM(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _CAN_TX_ALIGNMENT_STATE_type;
  _CAN_TX_ALIGNMENT_STATE_type CAN_TX_ALIGNMENT_STATE;

   typedef uint8_t _CAN_TX_INTERFACE_VER_MINOR_type;
  _CAN_TX_INTERFACE_VER_MINOR_type CAN_TX_INTERFACE_VER_MINOR;

   typedef uint32_t _CAN_TX_SW_VERSION_ARM_type;
  _CAN_TX_SW_VERSION_ARM_type CAN_TX_SW_VERSION_ARM;

   typedef uint8_t _CAN_TX_HW_VERSION_type;
  _CAN_TX_HW_VERSION_type CAN_TX_HW_VERSION;

   typedef uint8_t _CAN_TX_INTERFACE_VERSION_type;
  _CAN_TX_INTERFACE_VERSION_type CAN_TX_INTERFACE_VERSION;

   typedef uint32_t _CAN_TX_SERIAL_NUM_type;
  _CAN_TX_SERIAL_NUM_type CAN_TX_SERIAL_NUM;



  enum {
    CAN_TX_ALIGNMENT_STATE_Off = 0u,
    CAN_TX_ALIGNMENT_STATE_Init = 1u,
    CAN_TX_ALIGNMENT_STATE_Automatic_Alignment = 2u,
    CAN_TX_ALIGNMENT_STATE_Factory_Alignment = 3u,
    CAN_TX_ALIGNMENT_STATE_Service_Alignment = 4u,
  };


  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> const> ConstPtr;

}; // struct SrrStatus3_

typedef ::delphi_srr_msgs::SrrStatus3_<std::allocator<void> > SrrStatus3;

typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus3 > SrrStatus3Ptr;
typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus3 const> SrrStatus3ConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace delphi_srr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'delphi_srr_msgs': ['/home/kratos/OFRN/catkin_ws/src/delphi_srr_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b101ee95bfdae3b068ba15b3a182b1e2";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb101ee95bfdae3b0ULL;
  static const uint64_t static_value2 = 0x68ba15b3a182b1e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_srr_msgs/SrrStatus3";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message file for srr_status3\n\
\n\
Header header\n\
\n\
uint8     CAN_TX_ALIGNMENT_STATE                  \n\
uint8         CAN_TX_ALIGNMENT_STATE_Off=0\n\
uint8         CAN_TX_ALIGNMENT_STATE_Init=1\n\
uint8         CAN_TX_ALIGNMENT_STATE_Automatic_Alignment=2\n\
uint8         CAN_TX_ALIGNMENT_STATE_Factory_Alignment=3\n\
uint8         CAN_TX_ALIGNMENT_STATE_Service_Alignment=4\n\
\n\
uint8     CAN_TX_INTERFACE_VER_MINOR              \n\
\n\
uint32    CAN_TX_SW_VERSION_ARM                   \n\
\n\
uint8     CAN_TX_HW_VERSION                       \n\
\n\
uint8     CAN_TX_INTERFACE_VERSION                \n\
\n\
uint32    CAN_TX_SERIAL_NUM                       \n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.CAN_TX_ALIGNMENT_STATE);
      stream.next(m.CAN_TX_INTERFACE_VER_MINOR);
      stream.next(m.CAN_TX_SW_VERSION_ARM);
      stream.next(m.CAN_TX_HW_VERSION);
      stream.next(m.CAN_TX_INTERFACE_VERSION);
      stream.next(m.CAN_TX_SERIAL_NUM);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SrrStatus3_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_srr_msgs::SrrStatus3_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "CAN_TX_ALIGNMENT_STATE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_ALIGNMENT_STATE);
    s << indent << "CAN_TX_INTERFACE_VER_MINOR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_INTERFACE_VER_MINOR);
    s << indent << "CAN_TX_SW_VERSION_ARM: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.CAN_TX_SW_VERSION_ARM);
    s << indent << "CAN_TX_HW_VERSION: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_HW_VERSION);
    s << indent << "CAN_TX_INTERFACE_VERSION: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_INTERFACE_VERSION);
    s << indent << "CAN_TX_SERIAL_NUM: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.CAN_TX_SERIAL_NUM);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS3_H
