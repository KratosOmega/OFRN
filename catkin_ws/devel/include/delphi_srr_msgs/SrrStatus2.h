// Generated by gencpp from file delphi_srr_msgs/SrrStatus2.msg
// DO NOT EDIT!


#ifndef DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS2_H
#define DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_srr_msgs
{
template <class ContainerAllocator>
struct SrrStatus2_
{
  typedef SrrStatus2_<ContainerAllocator> Type;

  SrrStatus2_()
    : header()
    , CAN_TX_ALIGNMENT_STATUS(0)
    , CAN_TX_COMM_ERROR(false)
    , CAN_TX_STEERING_ANGLE_SIGN(false)
    , CAN_TX_YAW_RATE_BIAS(0.0)
    , CAN_TX_VEH_SPD_COMP_FACTOR(0.0)
    , CAN_TX_SW_VERSION_DSP(0)
    , CAN_TX_TEMPERATURE(0)
    , CAN_TX_RANGE_PERF_ERROR(false)
    , CAN_TX_OVERHEAT_ERROR(false)
    , CAN_TX_INTERNAL_ERROR(false)
    , CAN_TX_XCVR_OPERATIONAL(false)
    , CAN_TX_STEERING_ANGLE(0)
    , CAN_TX_ROLLING_COUNT_2(0)  {
    }
  SrrStatus2_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , CAN_TX_ALIGNMENT_STATUS(0)
    , CAN_TX_COMM_ERROR(false)
    , CAN_TX_STEERING_ANGLE_SIGN(false)
    , CAN_TX_YAW_RATE_BIAS(0.0)
    , CAN_TX_VEH_SPD_COMP_FACTOR(0.0)
    , CAN_TX_SW_VERSION_DSP(0)
    , CAN_TX_TEMPERATURE(0)
    , CAN_TX_RANGE_PERF_ERROR(false)
    , CAN_TX_OVERHEAT_ERROR(false)
    , CAN_TX_INTERNAL_ERROR(false)
    , CAN_TX_XCVR_OPERATIONAL(false)
    , CAN_TX_STEERING_ANGLE(0)
    , CAN_TX_ROLLING_COUNT_2(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _CAN_TX_ALIGNMENT_STATUS_type;
  _CAN_TX_ALIGNMENT_STATUS_type CAN_TX_ALIGNMENT_STATUS;

   typedef uint8_t _CAN_TX_COMM_ERROR_type;
  _CAN_TX_COMM_ERROR_type CAN_TX_COMM_ERROR;

   typedef uint8_t _CAN_TX_STEERING_ANGLE_SIGN_type;
  _CAN_TX_STEERING_ANGLE_SIGN_type CAN_TX_STEERING_ANGLE_SIGN;

   typedef float _CAN_TX_YAW_RATE_BIAS_type;
  _CAN_TX_YAW_RATE_BIAS_type CAN_TX_YAW_RATE_BIAS;

   typedef float _CAN_TX_VEH_SPD_COMP_FACTOR_type;
  _CAN_TX_VEH_SPD_COMP_FACTOR_type CAN_TX_VEH_SPD_COMP_FACTOR;

   typedef uint16_t _CAN_TX_SW_VERSION_DSP_type;
  _CAN_TX_SW_VERSION_DSP_type CAN_TX_SW_VERSION_DSP;

   typedef int16_t _CAN_TX_TEMPERATURE_type;
  _CAN_TX_TEMPERATURE_type CAN_TX_TEMPERATURE;

   typedef uint8_t _CAN_TX_RANGE_PERF_ERROR_type;
  _CAN_TX_RANGE_PERF_ERROR_type CAN_TX_RANGE_PERF_ERROR;

   typedef uint8_t _CAN_TX_OVERHEAT_ERROR_type;
  _CAN_TX_OVERHEAT_ERROR_type CAN_TX_OVERHEAT_ERROR;

   typedef uint8_t _CAN_TX_INTERNAL_ERROR_type;
  _CAN_TX_INTERNAL_ERROR_type CAN_TX_INTERNAL_ERROR;

   typedef uint8_t _CAN_TX_XCVR_OPERATIONAL_type;
  _CAN_TX_XCVR_OPERATIONAL_type CAN_TX_XCVR_OPERATIONAL;

   typedef uint16_t _CAN_TX_STEERING_ANGLE_type;
  _CAN_TX_STEERING_ANGLE_type CAN_TX_STEERING_ANGLE;

   typedef uint8_t _CAN_TX_ROLLING_COUNT_2_type;
  _CAN_TX_ROLLING_COUNT_2_type CAN_TX_ROLLING_COUNT_2;



  enum {
    CAN_TX_ALIGNMENT_STATUS_Unknown = 0u,
    CAN_TX_ALIGNMENT_STATUS_Converged = 1u,
    CAN_TX_ALIGNMENT_STATUS_Failed = 2u,
    CAN_TX_ALIGNMENT_STATUS_Reserved = 3u,
  };

  static const uint8_t CAN_TX_RANGE_PERF_ERROR_Not_Blocked;
  static const uint8_t CAN_TX_RANGE_PERF_ERROR_Blocked;
  static const uint8_t CAN_TX_OVERHEAT_ERROR_Not_OverTemp;
  static const uint8_t CAN_TX_OVERHEAT_ERROR_OverTemp;
  static const uint8_t CAN_TX_INTERNAL_ERROR_Not_Failed;
  static const uint8_t CAN_TX_INTERNAL_ERROR_Failed;
  static const uint8_t CAN_TX_XCVR_OPERATIONAL_Off;
  static const uint8_t CAN_TX_XCVR_OPERATIONAL_On;

  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> const> ConstPtr;

}; // struct SrrStatus2_

typedef ::delphi_srr_msgs::SrrStatus2_<std::allocator<void> > SrrStatus2;

typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus2 > SrrStatus2Ptr;
typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus2 const> SrrStatus2ConstPtr;

// constants requiring out of line definition

   

   

   

   

   
   template<typename ContainerAllocator> const uint8_t
      SrrStatus2_<ContainerAllocator>::CAN_TX_RANGE_PERF_ERROR_Not_Blocked =
        
           0
        
        ;
   

   
   template<typename ContainerAllocator> const uint8_t
      SrrStatus2_<ContainerAllocator>::CAN_TX_RANGE_PERF_ERROR_Blocked =
        
           1
        
        ;
   

   
   template<typename ContainerAllocator> const uint8_t
      SrrStatus2_<ContainerAllocator>::CAN_TX_OVERHEAT_ERROR_Not_OverTemp =
        
           0
        
        ;
   

   
   template<typename ContainerAllocator> const uint8_t
      SrrStatus2_<ContainerAllocator>::CAN_TX_OVERHEAT_ERROR_OverTemp =
        
           1
        
        ;
   

   
   template<typename ContainerAllocator> const uint8_t
      SrrStatus2_<ContainerAllocator>::CAN_TX_INTERNAL_ERROR_Not_Failed =
        
           0
        
        ;
   

   
   template<typename ContainerAllocator> const uint8_t
      SrrStatus2_<ContainerAllocator>::CAN_TX_INTERNAL_ERROR_Failed =
        
           1
        
        ;
   

   
   template<typename ContainerAllocator> const uint8_t
      SrrStatus2_<ContainerAllocator>::CAN_TX_XCVR_OPERATIONAL_Off =
        
           0
        
        ;
   

   
   template<typename ContainerAllocator> const uint8_t
      SrrStatus2_<ContainerAllocator>::CAN_TX_XCVR_OPERATIONAL_On =
        
           1
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace delphi_srr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'delphi_srr_msgs': ['/home/kratos/OFRN/catkin_ws/src/delphi_srr_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6c9e5a365813e1b4a1c283a90194218";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6c9e5a365813e1bULL;
  static const uint64_t static_value2 = 0x4a1c283a90194218ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_srr_msgs/SrrStatus2";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message file for srr_status2\n\
\n\
Header header\n\
\n\
uint8     CAN_TX_ALIGNMENT_STATUS                 \n\
uint8         CAN_TX_ALIGNMENT_STATUS_Unknown=0\n\
uint8         CAN_TX_ALIGNMENT_STATUS_Converged=1\n\
uint8         CAN_TX_ALIGNMENT_STATUS_Failed=2\n\
uint8         CAN_TX_ALIGNMENT_STATUS_Reserved=3\n\
\n\
bool      CAN_TX_COMM_ERROR                       \n\
\n\
bool      CAN_TX_STEERING_ANGLE_SIGN              \n\
\n\
float32   CAN_TX_YAW_RATE_BIAS                    \n\
\n\
float32   CAN_TX_VEH_SPD_COMP_FACTOR              \n\
\n\
uint16    CAN_TX_SW_VERSION_DSP                   \n\
\n\
int16     CAN_TX_TEMPERATURE                       # degC\n\
\n\
bool      CAN_TX_RANGE_PERF_ERROR                 \n\
bool          CAN_TX_RANGE_PERF_ERROR_Not_Blocked=0\n\
bool          CAN_TX_RANGE_PERF_ERROR_Blocked=1\n\
\n\
bool      CAN_TX_OVERHEAT_ERROR                   \n\
bool          CAN_TX_OVERHEAT_ERROR_Not_OverTemp=0\n\
bool          CAN_TX_OVERHEAT_ERROR_OverTemp=1\n\
\n\
bool      CAN_TX_INTERNAL_ERROR                   \n\
bool          CAN_TX_INTERNAL_ERROR_Not_Failed=0\n\
bool          CAN_TX_INTERNAL_ERROR_Failed=1\n\
\n\
bool      CAN_TX_XCVR_OPERATIONAL                 \n\
bool          CAN_TX_XCVR_OPERATIONAL_Off=0\n\
bool          CAN_TX_XCVR_OPERATIONAL_On=1\n\
\n\
uint16    CAN_TX_STEERING_ANGLE                    # deg\n\
\n\
uint8     CAN_TX_ROLLING_COUNT_2                  \n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.CAN_TX_ALIGNMENT_STATUS);
      stream.next(m.CAN_TX_COMM_ERROR);
      stream.next(m.CAN_TX_STEERING_ANGLE_SIGN);
      stream.next(m.CAN_TX_YAW_RATE_BIAS);
      stream.next(m.CAN_TX_VEH_SPD_COMP_FACTOR);
      stream.next(m.CAN_TX_SW_VERSION_DSP);
      stream.next(m.CAN_TX_TEMPERATURE);
      stream.next(m.CAN_TX_RANGE_PERF_ERROR);
      stream.next(m.CAN_TX_OVERHEAT_ERROR);
      stream.next(m.CAN_TX_INTERNAL_ERROR);
      stream.next(m.CAN_TX_XCVR_OPERATIONAL);
      stream.next(m.CAN_TX_STEERING_ANGLE);
      stream.next(m.CAN_TX_ROLLING_COUNT_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SrrStatus2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_srr_msgs::SrrStatus2_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "CAN_TX_ALIGNMENT_STATUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_ALIGNMENT_STATUS);
    s << indent << "CAN_TX_COMM_ERROR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_COMM_ERROR);
    s << indent << "CAN_TX_STEERING_ANGLE_SIGN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_STEERING_ANGLE_SIGN);
    s << indent << "CAN_TX_YAW_RATE_BIAS: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_TX_YAW_RATE_BIAS);
    s << indent << "CAN_TX_VEH_SPD_COMP_FACTOR: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_TX_VEH_SPD_COMP_FACTOR);
    s << indent << "CAN_TX_SW_VERSION_DSP: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.CAN_TX_SW_VERSION_DSP);
    s << indent << "CAN_TX_TEMPERATURE: ";
    Printer<int16_t>::stream(s, indent + "  ", v.CAN_TX_TEMPERATURE);
    s << indent << "CAN_TX_RANGE_PERF_ERROR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_RANGE_PERF_ERROR);
    s << indent << "CAN_TX_OVERHEAT_ERROR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_OVERHEAT_ERROR);
    s << indent << "CAN_TX_INTERNAL_ERROR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_INTERNAL_ERROR);
    s << indent << "CAN_TX_XCVR_OPERATIONAL: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_XCVR_OPERATIONAL);
    s << indent << "CAN_TX_STEERING_ANGLE: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.CAN_TX_STEERING_ANGLE);
    s << indent << "CAN_TX_ROLLING_COUNT_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_ROLLING_COUNT_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS2_H
