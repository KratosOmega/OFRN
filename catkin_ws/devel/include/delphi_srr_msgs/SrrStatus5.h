// Generated by gencpp from file delphi_srr_msgs/SrrStatus5.msg
// DO NOT EDIT!


#ifndef DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS5_H
#define DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS5_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_srr_msgs
{
template <class ContainerAllocator>
struct SrrStatus5_
{
  typedef SrrStatus5_<ContainerAllocator> Type;

  SrrStatus5_()
    : header()
    , Disable_Auto_Align(false)
    , CAN_TX_YAW_RATE_REF_QF(0)
    , CAN_TX_YAW_RATE_RAW_QF(0)
    , CAN_TX_YAW_RATE_REFERENCE(0.0)
    , CAN_TX_YAW_RATE_RAW(0.0)
    , CAN_TX_SYSTEM_STATUS(0)
    , CAN_TX_OUTSIDE_TEMPERATURE(0)
    , CAN_BLOCKAGE_MNR_BLOCKED(false)
    , CAN_BLOCKAGE_BB_BLOCKED(false)
    , CAN_BLOCKAGE_RADAR_BLOCKED(false)
    , CAN_TD_BLOCKED(false)
    , Radar_TX_Power_Error(false)
    , Radar_LO_Power_Error(false)
    , Radar_Data_sync_error(false)
    , Linearizer_SPI_Transfer_Error(false)
    , Saturated_Tuning_Freq_Error(false)
    , RTN_SPI_Transfer_Error(false)
    , RRN_SPI_Transfer_Error(false)
    , Video_Port_Capture_Error(false)
    , Vertical_Misalignment_error(false)
    , TX_Temperature_Fault(false)
    , Transmitter_ID_Error(false)
    , DSP_Unit_Cal_Checksum_Error(false)
    , DSP_Unit_Cal_Block_Chcksm_Error(false)
    , DSP_Tuning_Sensitivity_Error(false)
    , DSP_Loop_Overrun_Error(false)
    , ADC_SPI_Transfer_Error(false)  {
    }
  SrrStatus5_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Disable_Auto_Align(false)
    , CAN_TX_YAW_RATE_REF_QF(0)
    , CAN_TX_YAW_RATE_RAW_QF(0)
    , CAN_TX_YAW_RATE_REFERENCE(0.0)
    , CAN_TX_YAW_RATE_RAW(0.0)
    , CAN_TX_SYSTEM_STATUS(0)
    , CAN_TX_OUTSIDE_TEMPERATURE(0)
    , CAN_BLOCKAGE_MNR_BLOCKED(false)
    , CAN_BLOCKAGE_BB_BLOCKED(false)
    , CAN_BLOCKAGE_RADAR_BLOCKED(false)
    , CAN_TD_BLOCKED(false)
    , Radar_TX_Power_Error(false)
    , Radar_LO_Power_Error(false)
    , Radar_Data_sync_error(false)
    , Linearizer_SPI_Transfer_Error(false)
    , Saturated_Tuning_Freq_Error(false)
    , RTN_SPI_Transfer_Error(false)
    , RRN_SPI_Transfer_Error(false)
    , Video_Port_Capture_Error(false)
    , Vertical_Misalignment_error(false)
    , TX_Temperature_Fault(false)
    , Transmitter_ID_Error(false)
    , DSP_Unit_Cal_Checksum_Error(false)
    , DSP_Unit_Cal_Block_Chcksm_Error(false)
    , DSP_Tuning_Sensitivity_Error(false)
    , DSP_Loop_Overrun_Error(false)
    , ADC_SPI_Transfer_Error(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _Disable_Auto_Align_type;
  _Disable_Auto_Align_type Disable_Auto_Align;

   typedef uint8_t _CAN_TX_YAW_RATE_REF_QF_type;
  _CAN_TX_YAW_RATE_REF_QF_type CAN_TX_YAW_RATE_REF_QF;

   typedef uint8_t _CAN_TX_YAW_RATE_RAW_QF_type;
  _CAN_TX_YAW_RATE_RAW_QF_type CAN_TX_YAW_RATE_RAW_QF;

   typedef float _CAN_TX_YAW_RATE_REFERENCE_type;
  _CAN_TX_YAW_RATE_REFERENCE_type CAN_TX_YAW_RATE_REFERENCE;

   typedef float _CAN_TX_YAW_RATE_RAW_type;
  _CAN_TX_YAW_RATE_RAW_type CAN_TX_YAW_RATE_RAW;

   typedef uint8_t _CAN_TX_SYSTEM_STATUS_type;
  _CAN_TX_SYSTEM_STATUS_type CAN_TX_SYSTEM_STATUS;

   typedef int16_t _CAN_TX_OUTSIDE_TEMPERATURE_type;
  _CAN_TX_OUTSIDE_TEMPERATURE_type CAN_TX_OUTSIDE_TEMPERATURE;

   typedef uint8_t _CAN_BLOCKAGE_MNR_BLOCKED_type;
  _CAN_BLOCKAGE_MNR_BLOCKED_type CAN_BLOCKAGE_MNR_BLOCKED;

   typedef uint8_t _CAN_BLOCKAGE_BB_BLOCKED_type;
  _CAN_BLOCKAGE_BB_BLOCKED_type CAN_BLOCKAGE_BB_BLOCKED;

   typedef uint8_t _CAN_BLOCKAGE_RADAR_BLOCKED_type;
  _CAN_BLOCKAGE_RADAR_BLOCKED_type CAN_BLOCKAGE_RADAR_BLOCKED;

   typedef uint8_t _CAN_TD_BLOCKED_type;
  _CAN_TD_BLOCKED_type CAN_TD_BLOCKED;

   typedef uint8_t _Radar_TX_Power_Error_type;
  _Radar_TX_Power_Error_type Radar_TX_Power_Error;

   typedef uint8_t _Radar_LO_Power_Error_type;
  _Radar_LO_Power_Error_type Radar_LO_Power_Error;

   typedef uint8_t _Radar_Data_sync_error_type;
  _Radar_Data_sync_error_type Radar_Data_sync_error;

   typedef uint8_t _Linearizer_SPI_Transfer_Error_type;
  _Linearizer_SPI_Transfer_Error_type Linearizer_SPI_Transfer_Error;

   typedef uint8_t _Saturated_Tuning_Freq_Error_type;
  _Saturated_Tuning_Freq_Error_type Saturated_Tuning_Freq_Error;

   typedef uint8_t _RTN_SPI_Transfer_Error_type;
  _RTN_SPI_Transfer_Error_type RTN_SPI_Transfer_Error;

   typedef uint8_t _RRN_SPI_Transfer_Error_type;
  _RRN_SPI_Transfer_Error_type RRN_SPI_Transfer_Error;

   typedef uint8_t _Video_Port_Capture_Error_type;
  _Video_Port_Capture_Error_type Video_Port_Capture_Error;

   typedef uint8_t _Vertical_Misalignment_error_type;
  _Vertical_Misalignment_error_type Vertical_Misalignment_error;

   typedef uint8_t _TX_Temperature_Fault_type;
  _TX_Temperature_Fault_type TX_Temperature_Fault;

   typedef uint8_t _Transmitter_ID_Error_type;
  _Transmitter_ID_Error_type Transmitter_ID_Error;

   typedef uint8_t _DSP_Unit_Cal_Checksum_Error_type;
  _DSP_Unit_Cal_Checksum_Error_type DSP_Unit_Cal_Checksum_Error;

   typedef uint8_t _DSP_Unit_Cal_Block_Chcksm_Error_type;
  _DSP_Unit_Cal_Block_Chcksm_Error_type DSP_Unit_Cal_Block_Chcksm_Error;

   typedef uint8_t _DSP_Tuning_Sensitivity_Error_type;
  _DSP_Tuning_Sensitivity_Error_type DSP_Tuning_Sensitivity_Error;

   typedef uint8_t _DSP_Loop_Overrun_Error_type;
  _DSP_Loop_Overrun_Error_type DSP_Loop_Overrun_Error;

   typedef uint8_t _ADC_SPI_Transfer_Error_type;
  _ADC_SPI_Transfer_Error_type ADC_SPI_Transfer_Error;



  enum {
    CAN_TX_YAW_RATE_REF_QF_Undefined = 0u,
    CAN_TX_YAW_RATE_REF_QF_Temp_Undefined = 1u,
    CAN_TX_YAW_RATE_REF_QF_Not_Accurate = 2u,
    CAN_TX_YAW_RATE_REF_QF_Accurate = 3u,
    CAN_TX_YAW_RATE_RAW_QF_Undefined = 0u,
    CAN_TX_YAW_RATE_RAW_QF_Temp_Undefined = 1u,
    CAN_TX_YAW_RATE_RAW_QF_Not_Accurate = 2u,
    CAN_TX_YAW_RATE_RAW_QF_Accurate = 3u,
    CAN_TX_SYSTEM_STATUS_Configuration = 0u,
    CAN_TX_SYSTEM_STATUS_StartUp = 1u,
    CAN_TX_SYSTEM_STATUS_Running = 2u,
    CAN_TX_SYSTEM_STATUS_Blocked = 3u,
    CAN_TX_SYSTEM_STATUS_Faulty = 4u,
    CAN_TX_SYSTEM_STATUS_ShutDown = 5u,
    CAN_TX_SYSTEM_STATUS_Hot = 6u,
  };


  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> const> ConstPtr;

}; // struct SrrStatus5_

typedef ::delphi_srr_msgs::SrrStatus5_<std::allocator<void> > SrrStatus5;

typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus5 > SrrStatus5Ptr;
typedef boost::shared_ptr< ::delphi_srr_msgs::SrrStatus5 const> SrrStatus5ConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace delphi_srr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'delphi_srr_msgs': ['/home/kratos/OFRN/catkin_ws/src/delphi_srr_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ac0881115410e342c76d82d29edaf36";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ac0881115410e34ULL;
  static const uint64_t static_value2 = 0x2c76d82d29edaf36ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_srr_msgs/SrrStatus5";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message file for srr_status5\n\
\n\
Header header\n\
\n\
bool      Disable_Auto_Align                      \n\
\n\
uint8     CAN_TX_YAW_RATE_REF_QF                  \n\
uint8         CAN_TX_YAW_RATE_REF_QF_Undefined=0\n\
uint8         CAN_TX_YAW_RATE_REF_QF_Temp_Undefined=1\n\
uint8         CAN_TX_YAW_RATE_REF_QF_Not_Accurate=2\n\
uint8         CAN_TX_YAW_RATE_REF_QF_Accurate=3\n\
\n\
uint8     CAN_TX_YAW_RATE_RAW_QF                  \n\
uint8         CAN_TX_YAW_RATE_RAW_QF_Undefined=0\n\
uint8         CAN_TX_YAW_RATE_RAW_QF_Temp_Undefined=1\n\
uint8         CAN_TX_YAW_RATE_RAW_QF_Not_Accurate=2\n\
uint8         CAN_TX_YAW_RATE_RAW_QF_Accurate=3\n\
\n\
float32   CAN_TX_YAW_RATE_REFERENCE                # deg/s\n\
\n\
float32   CAN_TX_YAW_RATE_RAW                      # deg/s\n\
\n\
uint8     CAN_TX_SYSTEM_STATUS                    \n\
uint8         CAN_TX_SYSTEM_STATUS_Configuration=0\n\
uint8         CAN_TX_SYSTEM_STATUS_StartUp=1\n\
uint8         CAN_TX_SYSTEM_STATUS_Running=2\n\
uint8         CAN_TX_SYSTEM_STATUS_Blocked=3\n\
uint8         CAN_TX_SYSTEM_STATUS_Faulty=4\n\
uint8         CAN_TX_SYSTEM_STATUS_ShutDown=5\n\
uint8         CAN_TX_SYSTEM_STATUS_Hot=6\n\
\n\
int16     CAN_TX_OUTSIDE_TEMPERATURE               # degC\n\
\n\
bool      CAN_BLOCKAGE_MNR_BLOCKED                \n\
\n\
bool      CAN_BLOCKAGE_BB_BLOCKED                 \n\
\n\
bool      CAN_BLOCKAGE_RADAR_BLOCKED              \n\
\n\
bool      CAN_TD_BLOCKED                          \n\
\n\
bool      Radar_TX_Power_Error                    \n\
\n\
bool      Radar_LO_Power_Error                    \n\
\n\
bool      Radar_Data_sync_error                   \n\
\n\
bool      Linearizer_SPI_Transfer_Error           \n\
\n\
bool      Saturated_Tuning_Freq_Error             \n\
\n\
bool      RTN_SPI_Transfer_Error                  \n\
\n\
bool      RRN_SPI_Transfer_Error                  \n\
\n\
bool      Video_Port_Capture_Error                \n\
\n\
bool      Vertical_Misalignment_error             \n\
\n\
bool      TX_Temperature_Fault                    \n\
\n\
bool      Transmitter_ID_Error                    \n\
\n\
bool      DSP_Unit_Cal_Checksum_Error             \n\
\n\
bool      DSP_Unit_Cal_Block_Chcksm_Error         \n\
\n\
bool      DSP_Tuning_Sensitivity_Error            \n\
\n\
bool      DSP_Loop_Overrun_Error                  \n\
\n\
bool      ADC_SPI_Transfer_Error                  \n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Disable_Auto_Align);
      stream.next(m.CAN_TX_YAW_RATE_REF_QF);
      stream.next(m.CAN_TX_YAW_RATE_RAW_QF);
      stream.next(m.CAN_TX_YAW_RATE_REFERENCE);
      stream.next(m.CAN_TX_YAW_RATE_RAW);
      stream.next(m.CAN_TX_SYSTEM_STATUS);
      stream.next(m.CAN_TX_OUTSIDE_TEMPERATURE);
      stream.next(m.CAN_BLOCKAGE_MNR_BLOCKED);
      stream.next(m.CAN_BLOCKAGE_BB_BLOCKED);
      stream.next(m.CAN_BLOCKAGE_RADAR_BLOCKED);
      stream.next(m.CAN_TD_BLOCKED);
      stream.next(m.Radar_TX_Power_Error);
      stream.next(m.Radar_LO_Power_Error);
      stream.next(m.Radar_Data_sync_error);
      stream.next(m.Linearizer_SPI_Transfer_Error);
      stream.next(m.Saturated_Tuning_Freq_Error);
      stream.next(m.RTN_SPI_Transfer_Error);
      stream.next(m.RRN_SPI_Transfer_Error);
      stream.next(m.Video_Port_Capture_Error);
      stream.next(m.Vertical_Misalignment_error);
      stream.next(m.TX_Temperature_Fault);
      stream.next(m.Transmitter_ID_Error);
      stream.next(m.DSP_Unit_Cal_Checksum_Error);
      stream.next(m.DSP_Unit_Cal_Block_Chcksm_Error);
      stream.next(m.DSP_Tuning_Sensitivity_Error);
      stream.next(m.DSP_Loop_Overrun_Error);
      stream.next(m.ADC_SPI_Transfer_Error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SrrStatus5_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_srr_msgs::SrrStatus5_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Disable_Auto_Align: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Disable_Auto_Align);
    s << indent << "CAN_TX_YAW_RATE_REF_QF: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_YAW_RATE_REF_QF);
    s << indent << "CAN_TX_YAW_RATE_RAW_QF: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_YAW_RATE_RAW_QF);
    s << indent << "CAN_TX_YAW_RATE_REFERENCE: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_TX_YAW_RATE_REFERENCE);
    s << indent << "CAN_TX_YAW_RATE_RAW: ";
    Printer<float>::stream(s, indent + "  ", v.CAN_TX_YAW_RATE_RAW);
    s << indent << "CAN_TX_SYSTEM_STATUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TX_SYSTEM_STATUS);
    s << indent << "CAN_TX_OUTSIDE_TEMPERATURE: ";
    Printer<int16_t>::stream(s, indent + "  ", v.CAN_TX_OUTSIDE_TEMPERATURE);
    s << indent << "CAN_BLOCKAGE_MNR_BLOCKED: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_BLOCKAGE_MNR_BLOCKED);
    s << indent << "CAN_BLOCKAGE_BB_BLOCKED: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_BLOCKAGE_BB_BLOCKED);
    s << indent << "CAN_BLOCKAGE_RADAR_BLOCKED: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_BLOCKAGE_RADAR_BLOCKED);
    s << indent << "CAN_TD_BLOCKED: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAN_TD_BLOCKED);
    s << indent << "Radar_TX_Power_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Radar_TX_Power_Error);
    s << indent << "Radar_LO_Power_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Radar_LO_Power_Error);
    s << indent << "Radar_Data_sync_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Radar_Data_sync_error);
    s << indent << "Linearizer_SPI_Transfer_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Linearizer_SPI_Transfer_Error);
    s << indent << "Saturated_Tuning_Freq_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Saturated_Tuning_Freq_Error);
    s << indent << "RTN_SPI_Transfer_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RTN_SPI_Transfer_Error);
    s << indent << "RRN_SPI_Transfer_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RRN_SPI_Transfer_Error);
    s << indent << "Video_Port_Capture_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Video_Port_Capture_Error);
    s << indent << "Vertical_Misalignment_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Vertical_Misalignment_error);
    s << indent << "TX_Temperature_Fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TX_Temperature_Fault);
    s << indent << "Transmitter_ID_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Transmitter_ID_Error);
    s << indent << "DSP_Unit_Cal_Checksum_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DSP_Unit_Cal_Checksum_Error);
    s << indent << "DSP_Unit_Cal_Block_Chcksm_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DSP_Unit_Cal_Block_Chcksm_Error);
    s << indent << "DSP_Tuning_Sensitivity_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DSP_Tuning_Sensitivity_Error);
    s << indent << "DSP_Loop_Overrun_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DSP_Loop_Overrun_Error);
    s << indent << "ADC_SPI_Transfer_Error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADC_SPI_Transfer_Error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_SRR_MSGS_MESSAGE_SRRSTATUS5_H
