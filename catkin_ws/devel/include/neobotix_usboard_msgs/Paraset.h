// Generated by gencpp from file neobotix_usboard_msgs/Paraset.msg
// DO NOT EDIT!


#ifndef NEOBOTIX_USBOARD_MSGS_MESSAGE_PARASET_H
#define NEOBOTIX_USBOARD_MSGS_MESSAGE_PARASET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace neobotix_usboard_msgs
{
template <class ContainerAllocator>
struct Paraset_
{
  typedef Paraset_<ContainerAllocator> Type;

  Paraset_()
    : header()
    , command(0)
    , set_num(0)
    , paraset_byte54(0)
    , paraset_byte53(0)
    , paraset_byte52(0)
    , paraset_byte51(0)
    , paraset_byte50(0)
    , paraset_byte49(0)
    , paraset_byte48(0)
    , paraset_byte47(0)
    , paraset_byte46(0)
    , paraset_byte45(0)
    , paraset_byte44(0)
    , paraset_byte43(0)
    , paraset_byte42(0)
    , paraset_byte41(0)
    , paraset_byte40(0)
    , paraset_byte39(0)
    , paraset_byte38(0)
    , paraset_byte37(0)
    , paraset_byte36(0)
    , paraset_byte35(0)
    , paraset_byte34(0)
    , paraset_byte33(0)
    , paraset_byte32(0)
    , paraset_byte31(0)
    , paraset_byte30(0)
    , paraset_byte29(0)
    , paraset_byte28(0)
    , paraset_byte27(0)
    , paraset_byte26(0)
    , paraset_byte25(0)
    , paraset_byte24(0)
    , paraset_byte23(0)
    , paraset_byte22(0)
    , paraset_byte21(0)
    , paraset_byte20(0)
    , paraset_byte19(0)
    , paraset_byte18(0)
    , paraset_byte17(0)
    , paraset_byte16(0)
    , paraset_byte15(0)
    , paraset_byte14(0)
    , paraset_byte13(0)
    , paraset_byte12(0)
    , paraset_byte11(0)
    , paraset_byte10(0)
    , paraset_byte9(0)
    , paraset_byte8(0)
    , paraset_byte7(0)
    , paraset_byte6(0)
    , paraset_byte5(0)
    , paraset_byte4(0)
    , paraset_byte3(0)
    , paraset_byte2(0)
    , paraset_byte1(0)  {
    }
  Paraset_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , command(0)
    , set_num(0)
    , paraset_byte54(0)
    , paraset_byte53(0)
    , paraset_byte52(0)
    , paraset_byte51(0)
    , paraset_byte50(0)
    , paraset_byte49(0)
    , paraset_byte48(0)
    , paraset_byte47(0)
    , paraset_byte46(0)
    , paraset_byte45(0)
    , paraset_byte44(0)
    , paraset_byte43(0)
    , paraset_byte42(0)
    , paraset_byte41(0)
    , paraset_byte40(0)
    , paraset_byte39(0)
    , paraset_byte38(0)
    , paraset_byte37(0)
    , paraset_byte36(0)
    , paraset_byte35(0)
    , paraset_byte34(0)
    , paraset_byte33(0)
    , paraset_byte32(0)
    , paraset_byte31(0)
    , paraset_byte30(0)
    , paraset_byte29(0)
    , paraset_byte28(0)
    , paraset_byte27(0)
    , paraset_byte26(0)
    , paraset_byte25(0)
    , paraset_byte24(0)
    , paraset_byte23(0)
    , paraset_byte22(0)
    , paraset_byte21(0)
    , paraset_byte20(0)
    , paraset_byte19(0)
    , paraset_byte18(0)
    , paraset_byte17(0)
    , paraset_byte16(0)
    , paraset_byte15(0)
    , paraset_byte14(0)
    , paraset_byte13(0)
    , paraset_byte12(0)
    , paraset_byte11(0)
    , paraset_byte10(0)
    , paraset_byte9(0)
    , paraset_byte8(0)
    , paraset_byte7(0)
    , paraset_byte6(0)
    , paraset_byte5(0)
    , paraset_byte4(0)
    , paraset_byte3(0)
    , paraset_byte2(0)
    , paraset_byte1(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _command_type;
  _command_type command;

   typedef uint8_t _set_num_type;
  _set_num_type set_num;

   typedef uint8_t _paraset_byte54_type;
  _paraset_byte54_type paraset_byte54;

   typedef uint8_t _paraset_byte53_type;
  _paraset_byte53_type paraset_byte53;

   typedef uint8_t _paraset_byte52_type;
  _paraset_byte52_type paraset_byte52;

   typedef uint8_t _paraset_byte51_type;
  _paraset_byte51_type paraset_byte51;

   typedef uint8_t _paraset_byte50_type;
  _paraset_byte50_type paraset_byte50;

   typedef uint8_t _paraset_byte49_type;
  _paraset_byte49_type paraset_byte49;

   typedef uint8_t _paraset_byte48_type;
  _paraset_byte48_type paraset_byte48;

   typedef uint8_t _paraset_byte47_type;
  _paraset_byte47_type paraset_byte47;

   typedef uint8_t _paraset_byte46_type;
  _paraset_byte46_type paraset_byte46;

   typedef uint8_t _paraset_byte45_type;
  _paraset_byte45_type paraset_byte45;

   typedef uint8_t _paraset_byte44_type;
  _paraset_byte44_type paraset_byte44;

   typedef uint8_t _paraset_byte43_type;
  _paraset_byte43_type paraset_byte43;

   typedef uint8_t _paraset_byte42_type;
  _paraset_byte42_type paraset_byte42;

   typedef uint8_t _paraset_byte41_type;
  _paraset_byte41_type paraset_byte41;

   typedef uint8_t _paraset_byte40_type;
  _paraset_byte40_type paraset_byte40;

   typedef uint8_t _paraset_byte39_type;
  _paraset_byte39_type paraset_byte39;

   typedef uint8_t _paraset_byte38_type;
  _paraset_byte38_type paraset_byte38;

   typedef uint8_t _paraset_byte37_type;
  _paraset_byte37_type paraset_byte37;

   typedef uint8_t _paraset_byte36_type;
  _paraset_byte36_type paraset_byte36;

   typedef uint8_t _paraset_byte35_type;
  _paraset_byte35_type paraset_byte35;

   typedef uint8_t _paraset_byte34_type;
  _paraset_byte34_type paraset_byte34;

   typedef uint8_t _paraset_byte33_type;
  _paraset_byte33_type paraset_byte33;

   typedef uint8_t _paraset_byte32_type;
  _paraset_byte32_type paraset_byte32;

   typedef uint8_t _paraset_byte31_type;
  _paraset_byte31_type paraset_byte31;

   typedef uint8_t _paraset_byte30_type;
  _paraset_byte30_type paraset_byte30;

   typedef uint8_t _paraset_byte29_type;
  _paraset_byte29_type paraset_byte29;

   typedef uint8_t _paraset_byte28_type;
  _paraset_byte28_type paraset_byte28;

   typedef uint8_t _paraset_byte27_type;
  _paraset_byte27_type paraset_byte27;

   typedef uint8_t _paraset_byte26_type;
  _paraset_byte26_type paraset_byte26;

   typedef uint8_t _paraset_byte25_type;
  _paraset_byte25_type paraset_byte25;

   typedef uint8_t _paraset_byte24_type;
  _paraset_byte24_type paraset_byte24;

   typedef uint8_t _paraset_byte23_type;
  _paraset_byte23_type paraset_byte23;

   typedef uint8_t _paraset_byte22_type;
  _paraset_byte22_type paraset_byte22;

   typedef uint8_t _paraset_byte21_type;
  _paraset_byte21_type paraset_byte21;

   typedef uint8_t _paraset_byte20_type;
  _paraset_byte20_type paraset_byte20;

   typedef uint8_t _paraset_byte19_type;
  _paraset_byte19_type paraset_byte19;

   typedef uint8_t _paraset_byte18_type;
  _paraset_byte18_type paraset_byte18;

   typedef uint8_t _paraset_byte17_type;
  _paraset_byte17_type paraset_byte17;

   typedef uint8_t _paraset_byte16_type;
  _paraset_byte16_type paraset_byte16;

   typedef uint8_t _paraset_byte15_type;
  _paraset_byte15_type paraset_byte15;

   typedef uint8_t _paraset_byte14_type;
  _paraset_byte14_type paraset_byte14;

   typedef uint8_t _paraset_byte13_type;
  _paraset_byte13_type paraset_byte13;

   typedef uint8_t _paraset_byte12_type;
  _paraset_byte12_type paraset_byte12;

   typedef uint8_t _paraset_byte11_type;
  _paraset_byte11_type paraset_byte11;

   typedef uint8_t _paraset_byte10_type;
  _paraset_byte10_type paraset_byte10;

   typedef uint8_t _paraset_byte9_type;
  _paraset_byte9_type paraset_byte9;

   typedef uint8_t _paraset_byte8_type;
  _paraset_byte8_type paraset_byte8;

   typedef uint8_t _paraset_byte7_type;
  _paraset_byte7_type paraset_byte7;

   typedef uint8_t _paraset_byte6_type;
  _paraset_byte6_type paraset_byte6;

   typedef uint8_t _paraset_byte5_type;
  _paraset_byte5_type paraset_byte5;

   typedef uint8_t _paraset_byte4_type;
  _paraset_byte4_type paraset_byte4;

   typedef uint8_t _paraset_byte3_type;
  _paraset_byte3_type paraset_byte3;

   typedef uint8_t _paraset_byte2_type;
  _paraset_byte2_type paraset_byte2;

   typedef uint8_t _paraset_byte1_type;
  _paraset_byte1_type paraset_byte1;





  typedef boost::shared_ptr< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> const> ConstPtr;

}; // struct Paraset_

typedef ::neobotix_usboard_msgs::Paraset_<std::allocator<void> > Paraset;

typedef boost::shared_ptr< ::neobotix_usboard_msgs::Paraset > ParasetPtr;
typedef boost::shared_ptr< ::neobotix_usboard_msgs::Paraset const> ParasetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace neobotix_usboard_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'neobotix_usboard_msgs': ['/home/kratos/OFRN/catkin_ws/src/neobotix_usboard_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88e510d038a634b40698407f2e433138";
  }

  static const char* value(const ::neobotix_usboard_msgs::Paraset_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88e510d038a634b4ULL;
  static const uint64_t static_value2 = 0x0698407f2e433138ULL;
};

template<class ContainerAllocator>
struct DataType< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neobotix_usboard_msgs/Paraset";
  }

  static const char* value(const ::neobotix_usboard_msgs::Paraset_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message file for Paramset\n\
\n\
Header header\n\
\n\
uint8      command                                 \n\
\n\
uint8      set_num                                 \n\
\n\
uint8      paraset_byte54                    \n\
\n\
uint8      paraset_byte53                    \n\
\n\
uint8      paraset_byte52                    \n\
\n\
uint8      paraset_byte51                    \n\
\n\
uint8      paraset_byte50                    \n\
\n\
uint8      paraset_byte49                    \n\
\n\
uint8      paraset_byte48                    \n\
\n\
uint8      paraset_byte47                    \n\
\n\
uint8      paraset_byte46                    \n\
\n\
uint8      paraset_byte45                    \n\
\n\
uint8      paraset_byte44                    \n\
\n\
uint8      paraset_byte43                    \n\
\n\
uint8      paraset_byte42                    \n\
\n\
uint8      paraset_byte41                    \n\
\n\
uint8      paraset_byte40                    \n\
\n\
uint8      paraset_byte39                    \n\
\n\
uint8      paraset_byte38                    \n\
\n\
uint8      paraset_byte37                    \n\
\n\
uint8      paraset_byte36                    \n\
\n\
uint8      paraset_byte35                    \n\
\n\
uint8      paraset_byte34                    \n\
\n\
uint8      paraset_byte33                    \n\
\n\
uint8      paraset_byte32                    \n\
\n\
uint8      paraset_byte31                    \n\
\n\
uint8      paraset_byte30                    \n\
\n\
uint8      paraset_byte29                    \n\
\n\
uint8      paraset_byte28                    \n\
\n\
uint8      paraset_byte27                    \n\
\n\
uint8      paraset_byte26                    \n\
\n\
uint8      paraset_byte25                    \n\
\n\
uint8      paraset_byte24                    \n\
\n\
uint8      paraset_byte23                    \n\
\n\
uint8      paraset_byte22                    \n\
\n\
uint8      paraset_byte21                    \n\
\n\
uint8      paraset_byte20                    \n\
\n\
uint8      paraset_byte19                    \n\
\n\
uint8      paraset_byte18                    \n\
\n\
uint8      paraset_byte17                    \n\
\n\
uint8      paraset_byte16                    \n\
\n\
uint8      paraset_byte15                    \n\
\n\
uint8      paraset_byte14                    \n\
\n\
uint8      paraset_byte13                    \n\
\n\
uint8      paraset_byte12                    \n\
\n\
uint8      paraset_byte11                    \n\
\n\
uint8      paraset_byte10                    \n\
\n\
uint8      paraset_byte9                     \n\
\n\
uint8      paraset_byte8                     \n\
\n\
uint8      paraset_byte7                     \n\
\n\
uint8      paraset_byte6                     \n\
\n\
uint8      paraset_byte5                     \n\
\n\
uint8      paraset_byte4                     \n\
\n\
uint8      paraset_byte3                     \n\
\n\
uint8      paraset_byte2                     \n\
\n\
uint8      paraset_byte1                     \n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::neobotix_usboard_msgs::Paraset_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.command);
      stream.next(m.set_num);
      stream.next(m.paraset_byte54);
      stream.next(m.paraset_byte53);
      stream.next(m.paraset_byte52);
      stream.next(m.paraset_byte51);
      stream.next(m.paraset_byte50);
      stream.next(m.paraset_byte49);
      stream.next(m.paraset_byte48);
      stream.next(m.paraset_byte47);
      stream.next(m.paraset_byte46);
      stream.next(m.paraset_byte45);
      stream.next(m.paraset_byte44);
      stream.next(m.paraset_byte43);
      stream.next(m.paraset_byte42);
      stream.next(m.paraset_byte41);
      stream.next(m.paraset_byte40);
      stream.next(m.paraset_byte39);
      stream.next(m.paraset_byte38);
      stream.next(m.paraset_byte37);
      stream.next(m.paraset_byte36);
      stream.next(m.paraset_byte35);
      stream.next(m.paraset_byte34);
      stream.next(m.paraset_byte33);
      stream.next(m.paraset_byte32);
      stream.next(m.paraset_byte31);
      stream.next(m.paraset_byte30);
      stream.next(m.paraset_byte29);
      stream.next(m.paraset_byte28);
      stream.next(m.paraset_byte27);
      stream.next(m.paraset_byte26);
      stream.next(m.paraset_byte25);
      stream.next(m.paraset_byte24);
      stream.next(m.paraset_byte23);
      stream.next(m.paraset_byte22);
      stream.next(m.paraset_byte21);
      stream.next(m.paraset_byte20);
      stream.next(m.paraset_byte19);
      stream.next(m.paraset_byte18);
      stream.next(m.paraset_byte17);
      stream.next(m.paraset_byte16);
      stream.next(m.paraset_byte15);
      stream.next(m.paraset_byte14);
      stream.next(m.paraset_byte13);
      stream.next(m.paraset_byte12);
      stream.next(m.paraset_byte11);
      stream.next(m.paraset_byte10);
      stream.next(m.paraset_byte9);
      stream.next(m.paraset_byte8);
      stream.next(m.paraset_byte7);
      stream.next(m.paraset_byte6);
      stream.next(m.paraset_byte5);
      stream.next(m.paraset_byte4);
      stream.next(m.paraset_byte3);
      stream.next(m.paraset_byte2);
      stream.next(m.paraset_byte1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Paraset_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neobotix_usboard_msgs::Paraset_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neobotix_usboard_msgs::Paraset_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "set_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_num);
    s << indent << "paraset_byte54: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte54);
    s << indent << "paraset_byte53: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte53);
    s << indent << "paraset_byte52: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte52);
    s << indent << "paraset_byte51: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte51);
    s << indent << "paraset_byte50: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte50);
    s << indent << "paraset_byte49: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte49);
    s << indent << "paraset_byte48: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte48);
    s << indent << "paraset_byte47: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte47);
    s << indent << "paraset_byte46: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte46);
    s << indent << "paraset_byte45: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte45);
    s << indent << "paraset_byte44: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte44);
    s << indent << "paraset_byte43: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte43);
    s << indent << "paraset_byte42: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte42);
    s << indent << "paraset_byte41: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte41);
    s << indent << "paraset_byte40: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte40);
    s << indent << "paraset_byte39: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte39);
    s << indent << "paraset_byte38: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte38);
    s << indent << "paraset_byte37: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte37);
    s << indent << "paraset_byte36: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte36);
    s << indent << "paraset_byte35: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte35);
    s << indent << "paraset_byte34: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte34);
    s << indent << "paraset_byte33: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte33);
    s << indent << "paraset_byte32: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte32);
    s << indent << "paraset_byte31: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte31);
    s << indent << "paraset_byte30: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte30);
    s << indent << "paraset_byte29: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte29);
    s << indent << "paraset_byte28: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte28);
    s << indent << "paraset_byte27: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte27);
    s << indent << "paraset_byte26: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte26);
    s << indent << "paraset_byte25: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte25);
    s << indent << "paraset_byte24: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte24);
    s << indent << "paraset_byte23: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte23);
    s << indent << "paraset_byte22: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte22);
    s << indent << "paraset_byte21: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte21);
    s << indent << "paraset_byte20: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte20);
    s << indent << "paraset_byte19: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte19);
    s << indent << "paraset_byte18: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte18);
    s << indent << "paraset_byte17: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte17);
    s << indent << "paraset_byte16: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte16);
    s << indent << "paraset_byte15: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte15);
    s << indent << "paraset_byte14: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte14);
    s << indent << "paraset_byte13: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte13);
    s << indent << "paraset_byte12: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte12);
    s << indent << "paraset_byte11: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte11);
    s << indent << "paraset_byte10: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte10);
    s << indent << "paraset_byte9: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte9);
    s << indent << "paraset_byte8: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte8);
    s << indent << "paraset_byte7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte7);
    s << indent << "paraset_byte6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte6);
    s << indent << "paraset_byte5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte5);
    s << indent << "paraset_byte4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte4);
    s << indent << "paraset_byte3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte3);
    s << indent << "paraset_byte2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte2);
    s << indent << "paraset_byte1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.paraset_byte1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEOBOTIX_USBOARD_MSGS_MESSAGE_PARASET_H
