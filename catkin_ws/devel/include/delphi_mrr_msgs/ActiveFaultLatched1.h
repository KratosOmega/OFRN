// Generated by gencpp from file delphi_mrr_msgs/ActiveFaultLatched1.msg
// DO NOT EDIT!


#ifndef DELPHI_MRR_MSGS_MESSAGE_ACTIVEFAULTLATCHED1_H
#define DELPHI_MRR_MSGS_MESSAGE_ACTIVEFAULTLATCHED1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_mrr_msgs
{
template <class ContainerAllocator>
struct ActiveFaultLatched1_
{
  typedef ActiveFaultLatched1_<ContainerAllocator> Type;

  ActiveFaultLatched1_()
    : header()
    , activeFltLatchedByte7Bit7(false)
    , activeFltLatchedByte7Bit6(false)
    , activeFltLatchedByte7Bit5(false)
    , activeFltLatchedByte7Bit4(false)
    , armToDspChksumFault(false)
    , dspToArmChksumFault(false)
    , hostToArmChksumFault(false)
    , armToHostChksumFault(false)
    , loopBwOutofRange(false)
    , dspOverrunFault(false)
    , activeFltLatchedByte6Bit5(false)
    , tuningSensitivityFault(false)
    , saturatedTuningFreqFault(false)
    , localOscPowerFault(false)
    , transmitterPowerFault(false)
    , activeFltLatchedByte6Bit0(false)
    , activeFltLatchedByte5Bit7(false)
    , activeFltLatchedByte5Bit6(false)
    , xcvrDeviceSpiFault(false)
    , freqSynthesizerSpiFault(false)
    , analogConverterDevicSpiFault(false)
    , sideLobeBlockage(false)
    , activeFltLatchedByte5Bit1(false)
    , mnrBlocked(false)
    , ecuTempHighFault(false)
    , transmitterTempHighFault(false)
    , alignmentRoutineFailedFault(false)
    , unreasonableRadarData(false)
    , microprocessorTempHighFault(false)
    , verticalAlignmentOutofRange(false)
    , horizontalAlignmentOutofRange(false)
    , factoryAlignmentMode(false)
    , batteryLowFault(false)
    , batteryHighFault(false)
    , v_1p25SupplyOutofRange(false)
    , activeFltLatchedByte3Bit4(false)
    , thermistorOutofRange(false)
    , v_3p3DacSupplyOutofRange(false)
    , v_3p3RawSupplyOutofRange(false)
    , v_5_SupplyOutofRange(false)
    , transmitterIdFault(false)
    , activeFltLatchedByte2Bit6(false)
    , activeFltLatchedByte2Bit5(false)
    , activeFltLatchedByte2Bit4(false)
    , activeFltLatchedByte2Bit3(false)
    , activeFltLatchedByte2Bit2(false)
    , pcanMissingMsgFault(false)
    , pcanBusOff(false)
    , activeFltLatchedByte1Bit7(false)
    , activeFltLatchedByte1Bit6(false)
    , instructionSetCheckFault(false)
    , stackOverflowFault(false)
    , watchdogFault(false)
    , pllLockFault(false)
    , activeFltLatchedByte1Bit1(false)
    , ramMemoryTestFault(false)
    , uscValidationFault(false)
    , activeFltLatchedByte0Bit6(false)
    , activeFltLatchedByte0Bit5(false)
    , activeFltLatchedByte0Bit4(false)
    , activeFltLatchedByte0Bit3(false)
    , keepAliveChecksumFault(false)
    , programCalibrationFlashChecksum(false)
    , applicationFlashChecksumFault(false)  {
    }
  ActiveFaultLatched1_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , activeFltLatchedByte7Bit7(false)
    , activeFltLatchedByte7Bit6(false)
    , activeFltLatchedByte7Bit5(false)
    , activeFltLatchedByte7Bit4(false)
    , armToDspChksumFault(false)
    , dspToArmChksumFault(false)
    , hostToArmChksumFault(false)
    , armToHostChksumFault(false)
    , loopBwOutofRange(false)
    , dspOverrunFault(false)
    , activeFltLatchedByte6Bit5(false)
    , tuningSensitivityFault(false)
    , saturatedTuningFreqFault(false)
    , localOscPowerFault(false)
    , transmitterPowerFault(false)
    , activeFltLatchedByte6Bit0(false)
    , activeFltLatchedByte5Bit7(false)
    , activeFltLatchedByte5Bit6(false)
    , xcvrDeviceSpiFault(false)
    , freqSynthesizerSpiFault(false)
    , analogConverterDevicSpiFault(false)
    , sideLobeBlockage(false)
    , activeFltLatchedByte5Bit1(false)
    , mnrBlocked(false)
    , ecuTempHighFault(false)
    , transmitterTempHighFault(false)
    , alignmentRoutineFailedFault(false)
    , unreasonableRadarData(false)
    , microprocessorTempHighFault(false)
    , verticalAlignmentOutofRange(false)
    , horizontalAlignmentOutofRange(false)
    , factoryAlignmentMode(false)
    , batteryLowFault(false)
    , batteryHighFault(false)
    , v_1p25SupplyOutofRange(false)
    , activeFltLatchedByte3Bit4(false)
    , thermistorOutofRange(false)
    , v_3p3DacSupplyOutofRange(false)
    , v_3p3RawSupplyOutofRange(false)
    , v_5_SupplyOutofRange(false)
    , transmitterIdFault(false)
    , activeFltLatchedByte2Bit6(false)
    , activeFltLatchedByte2Bit5(false)
    , activeFltLatchedByte2Bit4(false)
    , activeFltLatchedByte2Bit3(false)
    , activeFltLatchedByte2Bit2(false)
    , pcanMissingMsgFault(false)
    , pcanBusOff(false)
    , activeFltLatchedByte1Bit7(false)
    , activeFltLatchedByte1Bit6(false)
    , instructionSetCheckFault(false)
    , stackOverflowFault(false)
    , watchdogFault(false)
    , pllLockFault(false)
    , activeFltLatchedByte1Bit1(false)
    , ramMemoryTestFault(false)
    , uscValidationFault(false)
    , activeFltLatchedByte0Bit6(false)
    , activeFltLatchedByte0Bit5(false)
    , activeFltLatchedByte0Bit4(false)
    , activeFltLatchedByte0Bit3(false)
    , keepAliveChecksumFault(false)
    , programCalibrationFlashChecksum(false)
    , applicationFlashChecksumFault(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _activeFltLatchedByte7Bit7_type;
  _activeFltLatchedByte7Bit7_type activeFltLatchedByte7Bit7;

   typedef uint8_t _activeFltLatchedByte7Bit6_type;
  _activeFltLatchedByte7Bit6_type activeFltLatchedByte7Bit6;

   typedef uint8_t _activeFltLatchedByte7Bit5_type;
  _activeFltLatchedByte7Bit5_type activeFltLatchedByte7Bit5;

   typedef uint8_t _activeFltLatchedByte7Bit4_type;
  _activeFltLatchedByte7Bit4_type activeFltLatchedByte7Bit4;

   typedef uint8_t _armToDspChksumFault_type;
  _armToDspChksumFault_type armToDspChksumFault;

   typedef uint8_t _dspToArmChksumFault_type;
  _dspToArmChksumFault_type dspToArmChksumFault;

   typedef uint8_t _hostToArmChksumFault_type;
  _hostToArmChksumFault_type hostToArmChksumFault;

   typedef uint8_t _armToHostChksumFault_type;
  _armToHostChksumFault_type armToHostChksumFault;

   typedef uint8_t _loopBwOutofRange_type;
  _loopBwOutofRange_type loopBwOutofRange;

   typedef uint8_t _dspOverrunFault_type;
  _dspOverrunFault_type dspOverrunFault;

   typedef uint8_t _activeFltLatchedByte6Bit5_type;
  _activeFltLatchedByte6Bit5_type activeFltLatchedByte6Bit5;

   typedef uint8_t _tuningSensitivityFault_type;
  _tuningSensitivityFault_type tuningSensitivityFault;

   typedef uint8_t _saturatedTuningFreqFault_type;
  _saturatedTuningFreqFault_type saturatedTuningFreqFault;

   typedef uint8_t _localOscPowerFault_type;
  _localOscPowerFault_type localOscPowerFault;

   typedef uint8_t _transmitterPowerFault_type;
  _transmitterPowerFault_type transmitterPowerFault;

   typedef uint8_t _activeFltLatchedByte6Bit0_type;
  _activeFltLatchedByte6Bit0_type activeFltLatchedByte6Bit0;

   typedef uint8_t _activeFltLatchedByte5Bit7_type;
  _activeFltLatchedByte5Bit7_type activeFltLatchedByte5Bit7;

   typedef uint8_t _activeFltLatchedByte5Bit6_type;
  _activeFltLatchedByte5Bit6_type activeFltLatchedByte5Bit6;

   typedef uint8_t _xcvrDeviceSpiFault_type;
  _xcvrDeviceSpiFault_type xcvrDeviceSpiFault;

   typedef uint8_t _freqSynthesizerSpiFault_type;
  _freqSynthesizerSpiFault_type freqSynthesizerSpiFault;

   typedef uint8_t _analogConverterDevicSpiFault_type;
  _analogConverterDevicSpiFault_type analogConverterDevicSpiFault;

   typedef uint8_t _sideLobeBlockage_type;
  _sideLobeBlockage_type sideLobeBlockage;

   typedef uint8_t _activeFltLatchedByte5Bit1_type;
  _activeFltLatchedByte5Bit1_type activeFltLatchedByte5Bit1;

   typedef uint8_t _mnrBlocked_type;
  _mnrBlocked_type mnrBlocked;

   typedef uint8_t _ecuTempHighFault_type;
  _ecuTempHighFault_type ecuTempHighFault;

   typedef uint8_t _transmitterTempHighFault_type;
  _transmitterTempHighFault_type transmitterTempHighFault;

   typedef uint8_t _alignmentRoutineFailedFault_type;
  _alignmentRoutineFailedFault_type alignmentRoutineFailedFault;

   typedef uint8_t _unreasonableRadarData_type;
  _unreasonableRadarData_type unreasonableRadarData;

   typedef uint8_t _microprocessorTempHighFault_type;
  _microprocessorTempHighFault_type microprocessorTempHighFault;

   typedef uint8_t _verticalAlignmentOutofRange_type;
  _verticalAlignmentOutofRange_type verticalAlignmentOutofRange;

   typedef uint8_t _horizontalAlignmentOutofRange_type;
  _horizontalAlignmentOutofRange_type horizontalAlignmentOutofRange;

   typedef uint8_t _factoryAlignmentMode_type;
  _factoryAlignmentMode_type factoryAlignmentMode;

   typedef uint8_t _batteryLowFault_type;
  _batteryLowFault_type batteryLowFault;

   typedef uint8_t _batteryHighFault_type;
  _batteryHighFault_type batteryHighFault;

   typedef uint8_t _v_1p25SupplyOutofRange_type;
  _v_1p25SupplyOutofRange_type v_1p25SupplyOutofRange;

   typedef uint8_t _activeFltLatchedByte3Bit4_type;
  _activeFltLatchedByte3Bit4_type activeFltLatchedByte3Bit4;

   typedef uint8_t _thermistorOutofRange_type;
  _thermistorOutofRange_type thermistorOutofRange;

   typedef uint8_t _v_3p3DacSupplyOutofRange_type;
  _v_3p3DacSupplyOutofRange_type v_3p3DacSupplyOutofRange;

   typedef uint8_t _v_3p3RawSupplyOutofRange_type;
  _v_3p3RawSupplyOutofRange_type v_3p3RawSupplyOutofRange;

   typedef uint8_t _v_5_SupplyOutofRange_type;
  _v_5_SupplyOutofRange_type v_5_SupplyOutofRange;

   typedef uint8_t _transmitterIdFault_type;
  _transmitterIdFault_type transmitterIdFault;

   typedef uint8_t _activeFltLatchedByte2Bit6_type;
  _activeFltLatchedByte2Bit6_type activeFltLatchedByte2Bit6;

   typedef uint8_t _activeFltLatchedByte2Bit5_type;
  _activeFltLatchedByte2Bit5_type activeFltLatchedByte2Bit5;

   typedef uint8_t _activeFltLatchedByte2Bit4_type;
  _activeFltLatchedByte2Bit4_type activeFltLatchedByte2Bit4;

   typedef uint8_t _activeFltLatchedByte2Bit3_type;
  _activeFltLatchedByte2Bit3_type activeFltLatchedByte2Bit3;

   typedef uint8_t _activeFltLatchedByte2Bit2_type;
  _activeFltLatchedByte2Bit2_type activeFltLatchedByte2Bit2;

   typedef uint8_t _pcanMissingMsgFault_type;
  _pcanMissingMsgFault_type pcanMissingMsgFault;

   typedef uint8_t _pcanBusOff_type;
  _pcanBusOff_type pcanBusOff;

   typedef uint8_t _activeFltLatchedByte1Bit7_type;
  _activeFltLatchedByte1Bit7_type activeFltLatchedByte1Bit7;

   typedef uint8_t _activeFltLatchedByte1Bit6_type;
  _activeFltLatchedByte1Bit6_type activeFltLatchedByte1Bit6;

   typedef uint8_t _instructionSetCheckFault_type;
  _instructionSetCheckFault_type instructionSetCheckFault;

   typedef uint8_t _stackOverflowFault_type;
  _stackOverflowFault_type stackOverflowFault;

   typedef uint8_t _watchdogFault_type;
  _watchdogFault_type watchdogFault;

   typedef uint8_t _pllLockFault_type;
  _pllLockFault_type pllLockFault;

   typedef uint8_t _activeFltLatchedByte1Bit1_type;
  _activeFltLatchedByte1Bit1_type activeFltLatchedByte1Bit1;

   typedef uint8_t _ramMemoryTestFault_type;
  _ramMemoryTestFault_type ramMemoryTestFault;

   typedef uint8_t _uscValidationFault_type;
  _uscValidationFault_type uscValidationFault;

   typedef uint8_t _activeFltLatchedByte0Bit6_type;
  _activeFltLatchedByte0Bit6_type activeFltLatchedByte0Bit6;

   typedef uint8_t _activeFltLatchedByte0Bit5_type;
  _activeFltLatchedByte0Bit5_type activeFltLatchedByte0Bit5;

   typedef uint8_t _activeFltLatchedByte0Bit4_type;
  _activeFltLatchedByte0Bit4_type activeFltLatchedByte0Bit4;

   typedef uint8_t _activeFltLatchedByte0Bit3_type;
  _activeFltLatchedByte0Bit3_type activeFltLatchedByte0Bit3;

   typedef uint8_t _keepAliveChecksumFault_type;
  _keepAliveChecksumFault_type keepAliveChecksumFault;

   typedef uint8_t _programCalibrationFlashChecksum_type;
  _programCalibrationFlashChecksum_type programCalibrationFlashChecksum;

   typedef uint8_t _applicationFlashChecksumFault_type;
  _applicationFlashChecksumFault_type applicationFlashChecksumFault;





  typedef boost::shared_ptr< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> const> ConstPtr;

}; // struct ActiveFaultLatched1_

typedef ::delphi_mrr_msgs::ActiveFaultLatched1_<std::allocator<void> > ActiveFaultLatched1;

typedef boost::shared_ptr< ::delphi_mrr_msgs::ActiveFaultLatched1 > ActiveFaultLatched1Ptr;
typedef boost::shared_ptr< ::delphi_mrr_msgs::ActiveFaultLatched1 const> ActiveFaultLatched1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace delphi_mrr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'delphi_mrr_msgs': ['/home/kratos/OFRN/catkin_ws/src/delphi_mrr_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "655662e3ba0854eb2ed67584af5a9d9f";
  }

  static const char* value(const ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x655662e3ba0854ebULL;
  static const uint64_t static_value2 = 0x2ed67584af5a9d9fULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_mrr_msgs/ActiveFaultLatched1";
  }

  static const char* value(const ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
\n\
bool activeFltLatchedByte7Bit7\n\
bool activeFltLatchedByte7Bit6\n\
bool activeFltLatchedByte7Bit5\n\
bool activeFltLatchedByte7Bit4\n\
bool armToDspChksumFault\n\
bool dspToArmChksumFault\n\
bool hostToArmChksumFault\n\
bool armToHostChksumFault\n\
bool loopBwOutofRange\n\
bool dspOverrunFault\n\
bool activeFltLatchedByte6Bit5\n\
bool tuningSensitivityFault\n\
bool saturatedTuningFreqFault\n\
bool localOscPowerFault\n\
bool transmitterPowerFault\n\
bool activeFltLatchedByte6Bit0\n\
bool activeFltLatchedByte5Bit7\n\
bool activeFltLatchedByte5Bit6\n\
bool xcvrDeviceSpiFault\n\
bool freqSynthesizerSpiFault\n\
bool analogConverterDevicSpiFault\n\
bool sideLobeBlockage\n\
bool activeFltLatchedByte5Bit1\n\
bool mnrBlocked\n\
bool ecuTempHighFault\n\
bool transmitterTempHighFault\n\
bool alignmentRoutineFailedFault\n\
bool unreasonableRadarData\n\
bool microprocessorTempHighFault\n\
bool verticalAlignmentOutofRange\n\
bool horizontalAlignmentOutofRange\n\
bool factoryAlignmentMode\n\
bool batteryLowFault\n\
bool batteryHighFault\n\
bool v_1p25SupplyOutofRange\n\
bool activeFltLatchedByte3Bit4\n\
bool thermistorOutofRange\n\
bool v_3p3DacSupplyOutofRange\n\
bool v_3p3RawSupplyOutofRange\n\
bool v_5_SupplyOutofRange\n\
bool transmitterIdFault\n\
bool activeFltLatchedByte2Bit6\n\
bool activeFltLatchedByte2Bit5\n\
bool activeFltLatchedByte2Bit4\n\
bool activeFltLatchedByte2Bit3\n\
bool activeFltLatchedByte2Bit2\n\
bool pcanMissingMsgFault\n\
bool pcanBusOff\n\
bool activeFltLatchedByte1Bit7\n\
bool activeFltLatchedByte1Bit6\n\
bool instructionSetCheckFault\n\
bool stackOverflowFault\n\
bool watchdogFault\n\
bool pllLockFault\n\
bool activeFltLatchedByte1Bit1\n\
bool ramMemoryTestFault\n\
bool uscValidationFault\n\
bool activeFltLatchedByte0Bit6\n\
bool activeFltLatchedByte0Bit5\n\
bool activeFltLatchedByte0Bit4\n\
bool activeFltLatchedByte0Bit3\n\
bool keepAliveChecksumFault\n\
bool programCalibrationFlashChecksum\n\
bool applicationFlashChecksumFault\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.activeFltLatchedByte7Bit7);
      stream.next(m.activeFltLatchedByte7Bit6);
      stream.next(m.activeFltLatchedByte7Bit5);
      stream.next(m.activeFltLatchedByte7Bit4);
      stream.next(m.armToDspChksumFault);
      stream.next(m.dspToArmChksumFault);
      stream.next(m.hostToArmChksumFault);
      stream.next(m.armToHostChksumFault);
      stream.next(m.loopBwOutofRange);
      stream.next(m.dspOverrunFault);
      stream.next(m.activeFltLatchedByte6Bit5);
      stream.next(m.tuningSensitivityFault);
      stream.next(m.saturatedTuningFreqFault);
      stream.next(m.localOscPowerFault);
      stream.next(m.transmitterPowerFault);
      stream.next(m.activeFltLatchedByte6Bit0);
      stream.next(m.activeFltLatchedByte5Bit7);
      stream.next(m.activeFltLatchedByte5Bit6);
      stream.next(m.xcvrDeviceSpiFault);
      stream.next(m.freqSynthesizerSpiFault);
      stream.next(m.analogConverterDevicSpiFault);
      stream.next(m.sideLobeBlockage);
      stream.next(m.activeFltLatchedByte5Bit1);
      stream.next(m.mnrBlocked);
      stream.next(m.ecuTempHighFault);
      stream.next(m.transmitterTempHighFault);
      stream.next(m.alignmentRoutineFailedFault);
      stream.next(m.unreasonableRadarData);
      stream.next(m.microprocessorTempHighFault);
      stream.next(m.verticalAlignmentOutofRange);
      stream.next(m.horizontalAlignmentOutofRange);
      stream.next(m.factoryAlignmentMode);
      stream.next(m.batteryLowFault);
      stream.next(m.batteryHighFault);
      stream.next(m.v_1p25SupplyOutofRange);
      stream.next(m.activeFltLatchedByte3Bit4);
      stream.next(m.thermistorOutofRange);
      stream.next(m.v_3p3DacSupplyOutofRange);
      stream.next(m.v_3p3RawSupplyOutofRange);
      stream.next(m.v_5_SupplyOutofRange);
      stream.next(m.transmitterIdFault);
      stream.next(m.activeFltLatchedByte2Bit6);
      stream.next(m.activeFltLatchedByte2Bit5);
      stream.next(m.activeFltLatchedByte2Bit4);
      stream.next(m.activeFltLatchedByte2Bit3);
      stream.next(m.activeFltLatchedByte2Bit2);
      stream.next(m.pcanMissingMsgFault);
      stream.next(m.pcanBusOff);
      stream.next(m.activeFltLatchedByte1Bit7);
      stream.next(m.activeFltLatchedByte1Bit6);
      stream.next(m.instructionSetCheckFault);
      stream.next(m.stackOverflowFault);
      stream.next(m.watchdogFault);
      stream.next(m.pllLockFault);
      stream.next(m.activeFltLatchedByte1Bit1);
      stream.next(m.ramMemoryTestFault);
      stream.next(m.uscValidationFault);
      stream.next(m.activeFltLatchedByte0Bit6);
      stream.next(m.activeFltLatchedByte0Bit5);
      stream.next(m.activeFltLatchedByte0Bit4);
      stream.next(m.activeFltLatchedByte0Bit3);
      stream.next(m.keepAliveChecksumFault);
      stream.next(m.programCalibrationFlashChecksum);
      stream.next(m.applicationFlashChecksumFault);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActiveFaultLatched1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_mrr_msgs::ActiveFaultLatched1_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "activeFltLatchedByte7Bit7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte7Bit7);
    s << indent << "activeFltLatchedByte7Bit6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte7Bit6);
    s << indent << "activeFltLatchedByte7Bit5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte7Bit5);
    s << indent << "activeFltLatchedByte7Bit4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte7Bit4);
    s << indent << "armToDspChksumFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armToDspChksumFault);
    s << indent << "dspToArmChksumFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dspToArmChksumFault);
    s << indent << "hostToArmChksumFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hostToArmChksumFault);
    s << indent << "armToHostChksumFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armToHostChksumFault);
    s << indent << "loopBwOutofRange: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.loopBwOutofRange);
    s << indent << "dspOverrunFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dspOverrunFault);
    s << indent << "activeFltLatchedByte6Bit5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte6Bit5);
    s << indent << "tuningSensitivityFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tuningSensitivityFault);
    s << indent << "saturatedTuningFreqFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.saturatedTuningFreqFault);
    s << indent << "localOscPowerFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.localOscPowerFault);
    s << indent << "transmitterPowerFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.transmitterPowerFault);
    s << indent << "activeFltLatchedByte6Bit0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte6Bit0);
    s << indent << "activeFltLatchedByte5Bit7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte5Bit7);
    s << indent << "activeFltLatchedByte5Bit6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte5Bit6);
    s << indent << "xcvrDeviceSpiFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.xcvrDeviceSpiFault);
    s << indent << "freqSynthesizerSpiFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.freqSynthesizerSpiFault);
    s << indent << "analogConverterDevicSpiFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.analogConverterDevicSpiFault);
    s << indent << "sideLobeBlockage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sideLobeBlockage);
    s << indent << "activeFltLatchedByte5Bit1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte5Bit1);
    s << indent << "mnrBlocked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mnrBlocked);
    s << indent << "ecuTempHighFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ecuTempHighFault);
    s << indent << "transmitterTempHighFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.transmitterTempHighFault);
    s << indent << "alignmentRoutineFailedFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alignmentRoutineFailedFault);
    s << indent << "unreasonableRadarData: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.unreasonableRadarData);
    s << indent << "microprocessorTempHighFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.microprocessorTempHighFault);
    s << indent << "verticalAlignmentOutofRange: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.verticalAlignmentOutofRange);
    s << indent << "horizontalAlignmentOutofRange: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horizontalAlignmentOutofRange);
    s << indent << "factoryAlignmentMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.factoryAlignmentMode);
    s << indent << "batteryLowFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.batteryLowFault);
    s << indent << "batteryHighFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.batteryHighFault);
    s << indent << "v_1p25SupplyOutofRange: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.v_1p25SupplyOutofRange);
    s << indent << "activeFltLatchedByte3Bit4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte3Bit4);
    s << indent << "thermistorOutofRange: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.thermistorOutofRange);
    s << indent << "v_3p3DacSupplyOutofRange: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.v_3p3DacSupplyOutofRange);
    s << indent << "v_3p3RawSupplyOutofRange: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.v_3p3RawSupplyOutofRange);
    s << indent << "v_5_SupplyOutofRange: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.v_5_SupplyOutofRange);
    s << indent << "transmitterIdFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.transmitterIdFault);
    s << indent << "activeFltLatchedByte2Bit6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte2Bit6);
    s << indent << "activeFltLatchedByte2Bit5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte2Bit5);
    s << indent << "activeFltLatchedByte2Bit4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte2Bit4);
    s << indent << "activeFltLatchedByte2Bit3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte2Bit3);
    s << indent << "activeFltLatchedByte2Bit2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte2Bit2);
    s << indent << "pcanMissingMsgFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pcanMissingMsgFault);
    s << indent << "pcanBusOff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pcanBusOff);
    s << indent << "activeFltLatchedByte1Bit7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte1Bit7);
    s << indent << "activeFltLatchedByte1Bit6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte1Bit6);
    s << indent << "instructionSetCheckFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.instructionSetCheckFault);
    s << indent << "stackOverflowFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stackOverflowFault);
    s << indent << "watchdogFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.watchdogFault);
    s << indent << "pllLockFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pllLockFault);
    s << indent << "activeFltLatchedByte1Bit1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte1Bit1);
    s << indent << "ramMemoryTestFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ramMemoryTestFault);
    s << indent << "uscValidationFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uscValidationFault);
    s << indent << "activeFltLatchedByte0Bit6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte0Bit6);
    s << indent << "activeFltLatchedByte0Bit5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte0Bit5);
    s << indent << "activeFltLatchedByte0Bit4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte0Bit4);
    s << indent << "activeFltLatchedByte0Bit3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activeFltLatchedByte0Bit3);
    s << indent << "keepAliveChecksumFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.keepAliveChecksumFault);
    s << indent << "programCalibrationFlashChecksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.programCalibrationFlashChecksum);
    s << indent << "applicationFlashChecksumFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.applicationFlashChecksumFault);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_MRR_MSGS_MESSAGE_ACTIVEFAULTLATCHED1_H
