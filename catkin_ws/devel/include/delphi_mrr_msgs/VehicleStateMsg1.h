// Generated by gencpp from file delphi_mrr_msgs/VehicleStateMsg1.msg
// DO NOT EDIT!


#ifndef DELPHI_MRR_MSGS_MESSAGE_VEHICLESTATEMSG1_H
#define DELPHI_MRR_MSGS_MESSAGE_VEHICLESTATEMSG1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace delphi_mrr_msgs
{
template <class ContainerAllocator>
struct VehicleStateMsg1_
{
  typedef VehicleStateMsg1_<ContainerAllocator> Type;

  VehicleStateMsg1_()
    : header()
    , canFcwSensitivityLevel(0)
    , canVehicleStationary(false)
    , canIntfMinorVersion(0)
    , canIntfMajorVersion(0)
    , canBrakePedal(0)
    , canHighWheelSlip(false)
    , canWasherFrontCmd(false)
    , canWiperFrontCmd(false)
    , canWiperSpeedInfo(0)
    , canReverseGear(false)
    , canBeamShapeActualRight(0)
    , canBeamShapeActualLeft(0)
    , canMainBeamIndication(false)
    , canVehicleIndex(0)  {
    }
  VehicleStateMsg1_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , canFcwSensitivityLevel(0)
    , canVehicleStationary(false)
    , canIntfMinorVersion(0)
    , canIntfMajorVersion(0)
    , canBrakePedal(0)
    , canHighWheelSlip(false)
    , canWasherFrontCmd(false)
    , canWiperFrontCmd(false)
    , canWiperSpeedInfo(0)
    , canReverseGear(false)
    , canBeamShapeActualRight(0)
    , canBeamShapeActualLeft(0)
    , canMainBeamIndication(false)
    , canVehicleIndex(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _canFcwSensitivityLevel_type;
  _canFcwSensitivityLevel_type canFcwSensitivityLevel;

   typedef uint8_t _canVehicleStationary_type;
  _canVehicleStationary_type canVehicleStationary;

   typedef uint8_t _canIntfMinorVersion_type;
  _canIntfMinorVersion_type canIntfMinorVersion;

   typedef uint8_t _canIntfMajorVersion_type;
  _canIntfMajorVersion_type canIntfMajorVersion;

   typedef uint8_t _canBrakePedal_type;
  _canBrakePedal_type canBrakePedal;

   typedef uint8_t _canHighWheelSlip_type;
  _canHighWheelSlip_type canHighWheelSlip;

   typedef uint8_t _canWasherFrontCmd_type;
  _canWasherFrontCmd_type canWasherFrontCmd;

   typedef uint8_t _canWiperFrontCmd_type;
  _canWiperFrontCmd_type canWiperFrontCmd;

   typedef uint8_t _canWiperSpeedInfo_type;
  _canWiperSpeedInfo_type canWiperSpeedInfo;

   typedef uint8_t _canReverseGear_type;
  _canReverseGear_type canReverseGear;

   typedef uint8_t _canBeamShapeActualRight_type;
  _canBeamShapeActualRight_type canBeamShapeActualRight;

   typedef uint8_t _canBeamShapeActualLeft_type;
  _canBeamShapeActualLeft_type canBeamShapeActualLeft;

   typedef uint8_t _canMainBeamIndication_type;
  _canMainBeamIndication_type canMainBeamIndication;

   typedef uint16_t _canVehicleIndex_type;
  _canVehicleIndex_type canVehicleIndex;





  typedef boost::shared_ptr< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleStateMsg1_

typedef ::delphi_mrr_msgs::VehicleStateMsg1_<std::allocator<void> > VehicleStateMsg1;

typedef boost::shared_ptr< ::delphi_mrr_msgs::VehicleStateMsg1 > VehicleStateMsg1Ptr;
typedef boost::shared_ptr< ::delphi_mrr_msgs::VehicleStateMsg1 const> VehicleStateMsg1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace delphi_mrr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'delphi_mrr_msgs': ['/home/kratos/OFRN/catkin_ws/src/delphi_mrr_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53be32b71bd306ada4e80cf033b07db5";
  }

  static const char* value(const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53be32b71bd306adULL;
  static const uint64_t static_value2 = 0xa4e80cf033b07db5ULL;
};

template<class ContainerAllocator>
struct DataType< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delphi_mrr_msgs/VehicleStateMsg1";
  }

  static const char* value(const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
uint8 canFcwSensitivityLevel\n\
bool  canVehicleStationary\n\
uint8 canIntfMinorVersion\n\
uint8 canIntfMajorVersion\n\
uint8 canBrakePedal\n\
bool  canHighWheelSlip\n\
bool  canWasherFrontCmd\n\
bool  canWiperFrontCmd\n\
uint8 canWiperSpeedInfo\n\
bool  canReverseGear\n\
uint8 canBeamShapeActualRight\n\
uint8 canBeamShapeActualLeft\n\
bool  canMainBeamIndication\n\
uint16 canVehicleIndex\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.canFcwSensitivityLevel);
      stream.next(m.canVehicleStationary);
      stream.next(m.canIntfMinorVersion);
      stream.next(m.canIntfMajorVersion);
      stream.next(m.canBrakePedal);
      stream.next(m.canHighWheelSlip);
      stream.next(m.canWasherFrontCmd);
      stream.next(m.canWiperFrontCmd);
      stream.next(m.canWiperSpeedInfo);
      stream.next(m.canReverseGear);
      stream.next(m.canBeamShapeActualRight);
      stream.next(m.canBeamShapeActualLeft);
      stream.next(m.canMainBeamIndication);
      stream.next(m.canVehicleIndex);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleStateMsg1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delphi_mrr_msgs::VehicleStateMsg1_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "canFcwSensitivityLevel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canFcwSensitivityLevel);
    s << indent << "canVehicleStationary: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canVehicleStationary);
    s << indent << "canIntfMinorVersion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canIntfMinorVersion);
    s << indent << "canIntfMajorVersion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canIntfMajorVersion);
    s << indent << "canBrakePedal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canBrakePedal);
    s << indent << "canHighWheelSlip: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canHighWheelSlip);
    s << indent << "canWasherFrontCmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canWasherFrontCmd);
    s << indent << "canWiperFrontCmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canWiperFrontCmd);
    s << indent << "canWiperSpeedInfo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canWiperSpeedInfo);
    s << indent << "canReverseGear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canReverseGear);
    s << indent << "canBeamShapeActualRight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canBeamShapeActualRight);
    s << indent << "canBeamShapeActualLeft: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canBeamShapeActualLeft);
    s << indent << "canMainBeamIndication: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canMainBeamIndication);
    s << indent << "canVehicleIndex: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.canVehicleIndex);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELPHI_MRR_MSGS_MESSAGE_VEHICLESTATEMSG1_H
