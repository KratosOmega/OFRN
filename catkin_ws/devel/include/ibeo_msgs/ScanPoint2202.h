// Generated by gencpp from file ibeo_msgs/ScanPoint2202.msg
// DO NOT EDIT!


#ifndef IBEO_MSGS_MESSAGE_SCANPOINT2202_H
#define IBEO_MSGS_MESSAGE_SCANPOINT2202_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ibeo_msgs
{
template <class ContainerAllocator>
struct ScanPoint2202_
{
  typedef ScanPoint2202_<ContainerAllocator> Type;

  ScanPoint2202_()
    : layer(0)
    , echo(0)
    , transparent_point(false)
    , clutter_atmospheric(false)
    , ground(false)
    , dirt(false)
    , horizontal_angle(0)
    , radial_distance(0)
    , echo_pulse_width(0)  {
    }
  ScanPoint2202_(const ContainerAllocator& _alloc)
    : layer(0)
    , echo(0)
    , transparent_point(false)
    , clutter_atmospheric(false)
    , ground(false)
    , dirt(false)
    , horizontal_angle(0)
    , radial_distance(0)
    , echo_pulse_width(0)  {
  (void)_alloc;
    }



   typedef uint8_t _layer_type;
  _layer_type layer;

   typedef uint8_t _echo_type;
  _echo_type echo;

   typedef uint8_t _transparent_point_type;
  _transparent_point_type transparent_point;

   typedef uint8_t _clutter_atmospheric_type;
  _clutter_atmospheric_type clutter_atmospheric;

   typedef uint8_t _ground_type;
  _ground_type ground;

   typedef uint8_t _dirt_type;
  _dirt_type dirt;

   typedef int16_t _horizontal_angle_type;
  _horizontal_angle_type horizontal_angle;

   typedef uint16_t _radial_distance_type;
  _radial_distance_type radial_distance;

   typedef uint16_t _echo_pulse_width_type;
  _echo_pulse_width_type echo_pulse_width;





  typedef boost::shared_ptr< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> const> ConstPtr;

}; // struct ScanPoint2202_

typedef ::ibeo_msgs::ScanPoint2202_<std::allocator<void> > ScanPoint2202;

typedef boost::shared_ptr< ::ibeo_msgs::ScanPoint2202 > ScanPoint2202Ptr;
typedef boost::shared_ptr< ::ibeo_msgs::ScanPoint2202 const> ScanPoint2202ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ibeo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ibeo_msgs': ['/home/kratos/OFRN/catkin_ws/src/ibeo_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a31dc17b84b821e8ab826a44186fc392";
  }

  static const char* value(const ::ibeo_msgs::ScanPoint2202_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa31dc17b84b821e8ULL;
  static const uint64_t static_value2 = 0xab826a44186fc392ULL;
};

template<class ContainerAllocator>
struct DataType< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibeo_msgs/ScanPoint2202";
  }

  static const char* value(const ::ibeo_msgs::ScanPoint2202_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 layer\n\
uint8 echo\n\
bool transparent_point\n\
bool clutter_atmospheric\n\
bool ground\n\
bool dirt\n\
int16 horizontal_angle\n\
uint16 radial_distance\n\
uint16 echo_pulse_width\n\
";
  }

  static const char* value(const ::ibeo_msgs::ScanPoint2202_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.layer);
      stream.next(m.echo);
      stream.next(m.transparent_point);
      stream.next(m.clutter_atmospheric);
      stream.next(m.ground);
      stream.next(m.dirt);
      stream.next(m.horizontal_angle);
      stream.next(m.radial_distance);
      stream.next(m.echo_pulse_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScanPoint2202_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibeo_msgs::ScanPoint2202_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibeo_msgs::ScanPoint2202_<ContainerAllocator>& v)
  {
    s << indent << "layer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.layer);
    s << indent << "echo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.echo);
    s << indent << "transparent_point: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.transparent_point);
    s << indent << "clutter_atmospheric: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clutter_atmospheric);
    s << indent << "ground: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ground);
    s << indent << "dirt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dirt);
    s << indent << "horizontal_angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.horizontal_angle);
    s << indent << "radial_distance: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.radial_distance);
    s << indent << "echo_pulse_width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.echo_pulse_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBEO_MSGS_MESSAGE_SCANPOINT2202_H
