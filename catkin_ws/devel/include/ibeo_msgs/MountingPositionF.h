// Generated by gencpp from file ibeo_msgs/MountingPositionF.msg
// DO NOT EDIT!


#ifndef IBEO_MSGS_MESSAGE_MOUNTINGPOSITIONF_H
#define IBEO_MSGS_MESSAGE_MOUNTINGPOSITIONF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ibeo_msgs
{
template <class ContainerAllocator>
struct MountingPositionF_
{
  typedef MountingPositionF_<ContainerAllocator> Type;

  MountingPositionF_()
    : yaw_angle(0.0)
    , pitch_angle(0.0)
    , roll_angle(0.0)
    , x_position(0.0)
    , y_position(0.0)
    , z_position(0.0)  {
    }
  MountingPositionF_(const ContainerAllocator& _alloc)
    : yaw_angle(0.0)
    , pitch_angle(0.0)
    , roll_angle(0.0)
    , x_position(0.0)
    , y_position(0.0)
    , z_position(0.0)  {
  (void)_alloc;
    }



   typedef float _yaw_angle_type;
  _yaw_angle_type yaw_angle;

   typedef float _pitch_angle_type;
  _pitch_angle_type pitch_angle;

   typedef float _roll_angle_type;
  _roll_angle_type roll_angle;

   typedef float _x_position_type;
  _x_position_type x_position;

   typedef float _y_position_type;
  _y_position_type y_position;

   typedef float _z_position_type;
  _z_position_type z_position;





  typedef boost::shared_ptr< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> const> ConstPtr;

}; // struct MountingPositionF_

typedef ::ibeo_msgs::MountingPositionF_<std::allocator<void> > MountingPositionF;

typedef boost::shared_ptr< ::ibeo_msgs::MountingPositionF > MountingPositionFPtr;
typedef boost::shared_ptr< ::ibeo_msgs::MountingPositionF const> MountingPositionFConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibeo_msgs::MountingPositionF_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ibeo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ibeo_msgs': ['/home/kratos/OFRN/catkin_ws/src/ibeo_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42c754da1a60587d019330c7258a6f65";
  }

  static const char* value(const ::ibeo_msgs::MountingPositionF_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42c754da1a60587dULL;
  static const uint64_t static_value2 = 0x019330c7258a6f65ULL;
};

template<class ContainerAllocator>
struct DataType< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibeo_msgs/MountingPositionF";
  }

  static const char* value(const ::ibeo_msgs::MountingPositionF_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 yaw_angle\n\
float32 pitch_angle\n\
float32 roll_angle\n\
float32 x_position\n\
float32 y_position\n\
float32 z_position\n\
";
  }

  static const char* value(const ::ibeo_msgs::MountingPositionF_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yaw_angle);
      stream.next(m.pitch_angle);
      stream.next(m.roll_angle);
      stream.next(m.x_position);
      stream.next(m.y_position);
      stream.next(m.z_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MountingPositionF_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibeo_msgs::MountingPositionF_<ContainerAllocator>& v)
  {
    s << indent << "yaw_angle: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_angle);
    s << indent << "pitch_angle: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_angle);
    s << indent << "roll_angle: ";
    Printer<float>::stream(s, indent + "  ", v.roll_angle);
    s << indent << "x_position: ";
    Printer<float>::stream(s, indent + "  ", v.x_position);
    s << indent << "y_position: ";
    Printer<float>::stream(s, indent + "  ", v.y_position);
    s << indent << "z_position: ";
    Printer<float>::stream(s, indent + "  ", v.z_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBEO_MSGS_MESSAGE_MOUNTINGPOSITIONF_H
