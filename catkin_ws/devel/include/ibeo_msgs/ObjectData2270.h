// Generated by gencpp from file ibeo_msgs/ObjectData2270.msg
// DO NOT EDIT!


#ifndef IBEO_MSGS_MESSAGE_OBJECTDATA2270_H
#define IBEO_MSGS_MESSAGE_OBJECTDATA2270_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ibeo_msgs/IbeoDataHeader.h>
#include <ibeo_msgs/Object2270.h>

namespace ibeo_msgs
{
template <class ContainerAllocator>
struct ObjectData2270_
{
  typedef ObjectData2270_<ContainerAllocator> Type;

  ObjectData2270_()
    : header()
    , ibeo_header()
    , start_scan_timestamp()
    , object_list_number(0)
    , number_of_objects(0)
    , object_list()  {
    }
  ObjectData2270_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ibeo_header(_alloc)
    , start_scan_timestamp()
    , object_list_number(0)
    , number_of_objects(0)
    , object_list(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ibeo_msgs::IbeoDataHeader_<ContainerAllocator>  _ibeo_header_type;
  _ibeo_header_type ibeo_header;

   typedef ros::Time _start_scan_timestamp_type;
  _start_scan_timestamp_type start_scan_timestamp;

   typedef uint16_t _object_list_number_type;
  _object_list_number_type object_list_number;

   typedef uint16_t _number_of_objects_type;
  _number_of_objects_type number_of_objects;

   typedef std::vector< ::ibeo_msgs::Object2270_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ibeo_msgs::Object2270_<ContainerAllocator> >::other >  _object_list_type;
  _object_list_type object_list;





  typedef boost::shared_ptr< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectData2270_

typedef ::ibeo_msgs::ObjectData2270_<std::allocator<void> > ObjectData2270;

typedef boost::shared_ptr< ::ibeo_msgs::ObjectData2270 > ObjectData2270Ptr;
typedef boost::shared_ptr< ::ibeo_msgs::ObjectData2270 const> ObjectData2270ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibeo_msgs::ObjectData2270_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ibeo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'ibeo_msgs': ['/home/kratos/OFRN/catkin_ws/src/ibeo_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3ffc6b7c28b1c16f910eb3e3bd67fd5";
  }

  static const char* value(const ::ibeo_msgs::ObjectData2270_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3ffc6b7c28b1c16ULL;
  static const uint64_t static_value2 = 0xf910eb3e3bd67fd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibeo_msgs/ObjectData2270";
  }

  static const char* value(const ::ibeo_msgs::ObjectData2270_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
IbeoDataHeader ibeo_header\n\
time start_scan_timestamp\n\
uint16 object_list_number\n\
uint16 number_of_objects\n\
Object2270[] object_list\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/IbeoDataHeader\n\
uint32 previous_message_size\n\
uint32 message_size\n\
uint8 device_id\n\
uint16 data_type_id\n\
time stamp\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/Object2270\n\
uint16 id\n\
uint16 age\n\
uint16 prediction_age\n\
uint16 relative_moment_of_measurement\n\
uint8 reference_point_location\n\
int16 reference_point_position_x\n\
int16 reference_point_position_y\n\
uint16 reference_point_position_sigma_x\n\
uint16 reference_point_position_sigma_y\n\
int16 contour_points_cog_x\n\
int16 contour_points_cog_y\n\
uint16 object_box_length\n\
uint16 object_box_width\n\
int16 object_box_orientation_angle\n\
int16 object_box_orientation_angle_sigma\n\
int16 absolute_velocity_x\n\
int16 absolute_velocity_y\n\
uint16 absolute_velocity_sigma_x\n\
uint16 absolute_velocity_sigma_y\n\
int16 relative_velocity_x\n\
int16 relative_velocity_y\n\
uint16 relative_velocity_sigma_x\n\
uint16 relative_velocity_sigma_y\n\
uint8 classification\n\
uint8 tracking_model\n\
bool mobile_detected\n\
bool track_valid\n\
uint16 classification_age\n\
uint16 classification_confidence\n\
uint16 number_of_contour_points\n\
Point2Di[] contour_point_list\n\
\n\
# reference_point_location values\n\
uint8 CENTER_OF_GRAVITY=0\n\
uint8 TOP_FRONT_LEFT_CORNER=1\n\
uint8 TOP_FRONT_RIGHT_CORNER=2\n\
uint8 BOTTOM_REAR_RIGHT_CORNER=3\n\
uint8 BOTTOM_REAR_LEFT_CORNER=4\n\
uint8 CENTER_OF_TOP_FRONT_EDGE=5\n\
uint8 CENTER_OF_RIGHT_EDGE=6\n\
uint8 CENTER_OF_BOTTOM_REAR_EDGE=7\n\
uint8 CENTER_OF_LEFT_EDGE=8\n\
uint8 BOX_CENTER=9\n\
uint8 INVALID=255\n\
\n\
# classification values\n\
uint8 UNCLASSIFIED=0\n\
uint8 UNKNOWN_SMALL=1\n\
uint8 UNKNOWN_BIG=2\n\
uint8 PEDESTRIAN=3\n\
uint8 BIKE=4\n\
uint8 CAR=5\n\
uint8 TRUCK=6\n\
uint8 OVER_DRIVABLE=10\n\
uint8 UNDER_DRIVABLE=11\n\
\n\
# tracking_model values\n\
uint8 DYNAMIC_MODEL=0\n\
uint8 STATIC_MODEL=1\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/Point2Di\n\
int16 x\n\
int16 y\n\
";
  }

  static const char* value(const ::ibeo_msgs::ObjectData2270_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ibeo_header);
      stream.next(m.start_scan_timestamp);
      stream.next(m.object_list_number);
      stream.next(m.number_of_objects);
      stream.next(m.object_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectData2270_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibeo_msgs::ObjectData2270_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibeo_msgs::ObjectData2270_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ibeo_header: ";
    s << std::endl;
    Printer< ::ibeo_msgs::IbeoDataHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ibeo_header);
    s << indent << "start_scan_timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_scan_timestamp);
    s << indent << "object_list_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.object_list_number);
    s << indent << "number_of_objects: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.number_of_objects);
    s << indent << "object_list[]" << std::endl;
    for (size_t i = 0; i < v.object_list.size(); ++i)
    {
      s << indent << "  object_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ibeo_msgs::Object2270_<ContainerAllocator> >::stream(s, indent + "    ", v.object_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBEO_MSGS_MESSAGE_OBJECTDATA2270_H
