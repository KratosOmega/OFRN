// Generated by gencpp from file ibeo_msgs/ScannerInfo2204.msg
// DO NOT EDIT!


#ifndef IBEO_MSGS_MESSAGE_SCANNERINFO2204_H
#define IBEO_MSGS_MESSAGE_SCANNERINFO2204_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ibeo_msgs
{
template <class ContainerAllocator>
struct ScannerInfo2204_
{
  typedef ScannerInfo2204_<ContainerAllocator> Type;

  ScannerInfo2204_()
    : device_id(0)
    , scanner_type(0)
    , scan_number(0)
    , start_angle(0.0)
    , end_angle(0.0)
    , yaw_angle(0.0)
    , pitch_angle(0.0)
    , roll_angle(0.0)
    , offset_x(0.0)
    , offset_y(0.0)
    , offset_z(0.0)  {
    }
  ScannerInfo2204_(const ContainerAllocator& _alloc)
    : device_id(0)
    , scanner_type(0)
    , scan_number(0)
    , start_angle(0.0)
    , end_angle(0.0)
    , yaw_angle(0.0)
    , pitch_angle(0.0)
    , roll_angle(0.0)
    , offset_x(0.0)
    , offset_y(0.0)
    , offset_z(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _device_id_type;
  _device_id_type device_id;

   typedef uint8_t _scanner_type_type;
  _scanner_type_type scanner_type;

   typedef uint16_t _scan_number_type;
  _scan_number_type scan_number;

   typedef float _start_angle_type;
  _start_angle_type start_angle;

   typedef float _end_angle_type;
  _end_angle_type end_angle;

   typedef float _yaw_angle_type;
  _yaw_angle_type yaw_angle;

   typedef float _pitch_angle_type;
  _pitch_angle_type pitch_angle;

   typedef float _roll_angle_type;
  _roll_angle_type roll_angle;

   typedef float _offset_x_type;
  _offset_x_type offset_x;

   typedef float _offset_y_type;
  _offset_y_type offset_y;

   typedef float _offset_z_type;
  _offset_z_type offset_z;



  enum {
    ALASCA_XT = 3u,
    LUX_ECU = 4u,
    LUX_PROTOTYPE = 5u,
    LUX = 6u,
    SCALA_B1 = 96u,
  };


  typedef boost::shared_ptr< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> const> ConstPtr;

}; // struct ScannerInfo2204_

typedef ::ibeo_msgs::ScannerInfo2204_<std::allocator<void> > ScannerInfo2204;

typedef boost::shared_ptr< ::ibeo_msgs::ScannerInfo2204 > ScannerInfo2204Ptr;
typedef boost::shared_ptr< ::ibeo_msgs::ScannerInfo2204 const> ScannerInfo2204ConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ibeo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ibeo_msgs': ['/home/kratos/OFRN/catkin_ws/src/ibeo_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3fdd091a3811a112b34b4431c6e8f360";
  }

  static const char* value(const ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3fdd091a3811a112ULL;
  static const uint64_t static_value2 = 0xb34b4431c6e8f360ULL;
};

template<class ContainerAllocator>
struct DataType< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibeo_msgs/ScannerInfo2204";
  }

  static const char* value(const ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 device_id\n\
uint8 scanner_type\n\
uint16 scan_number\n\
float32 start_angle\n\
float32 end_angle\n\
float32 yaw_angle\n\
float32 pitch_angle\n\
float32 roll_angle\n\
float32 offset_x\n\
float32 offset_y\n\
float32 offset_z\n\
\n\
# scanner_type values\n\
uint8 ALASCA_XT=3\n\
uint8 LUX_ECU=4\n\
uint8 LUX_PROTOTYPE=5\n\
uint8 LUX=6\n\
uint8 SCALA_B1=96\n\
";
  }

  static const char* value(const ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_id);
      stream.next(m.scanner_type);
      stream.next(m.scan_number);
      stream.next(m.start_angle);
      stream.next(m.end_angle);
      stream.next(m.yaw_angle);
      stream.next(m.pitch_angle);
      stream.next(m.roll_angle);
      stream.next(m.offset_x);
      stream.next(m.offset_y);
      stream.next(m.offset_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScannerInfo2204_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator>& v)
  {
    s << indent << "device_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.device_id);
    s << indent << "scanner_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.scanner_type);
    s << indent << "scan_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.scan_number);
    s << indent << "start_angle: ";
    Printer<float>::stream(s, indent + "  ", v.start_angle);
    s << indent << "end_angle: ";
    Printer<float>::stream(s, indent + "  ", v.end_angle);
    s << indent << "yaw_angle: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_angle);
    s << indent << "pitch_angle: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_angle);
    s << indent << "roll_angle: ";
    Printer<float>::stream(s, indent + "  ", v.roll_angle);
    s << indent << "offset_x: ";
    Printer<float>::stream(s, indent + "  ", v.offset_x);
    s << indent << "offset_y: ";
    Printer<float>::stream(s, indent + "  ", v.offset_y);
    s << indent << "offset_z: ";
    Printer<float>::stream(s, indent + "  ", v.offset_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBEO_MSGS_MESSAGE_SCANNERINFO2204_H
