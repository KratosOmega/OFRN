// Generated by gencpp from file ibeo_msgs/ScannerInfo2205.msg
// DO NOT EDIT!


#ifndef IBEO_MSGS_MESSAGE_SCANNERINFO2205_H
#define IBEO_MSGS_MESSAGE_SCANNERINFO2205_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ibeo_msgs/MountingPositionF.h>
#include <ibeo_msgs/ResolutionInfo.h>

namespace ibeo_msgs
{
template <class ContainerAllocator>
struct ScannerInfo2205_
{
  typedef ScannerInfo2205_<ContainerAllocator> Type;

  ScannerInfo2205_()
    : device_id(0)
    , scanner_type(0)
    , scan_number(0)
    , start_angle(0.0)
    , end_angle(0.0)
    , scan_start_time()
    , scan_end_time()
    , scan_start_time_from_device()
    , scan_end_time_from_device()
    , scan_frequency(0.0)
    , beam_tilt(0.0)
    , scan_flags(0)
    , mounting_position()
    , resolutions()  {
    }
  ScannerInfo2205_(const ContainerAllocator& _alloc)
    : device_id(0)
    , scanner_type(0)
    , scan_number(0)
    , start_angle(0.0)
    , end_angle(0.0)
    , scan_start_time()
    , scan_end_time()
    , scan_start_time_from_device()
    , scan_end_time_from_device()
    , scan_frequency(0.0)
    , beam_tilt(0.0)
    , scan_flags(0)
    , mounting_position(_alloc)
    , resolutions()  {
  (void)_alloc;
      resolutions.assign( ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> (_alloc));
  }



   typedef uint8_t _device_id_type;
  _device_id_type device_id;

   typedef uint8_t _scanner_type_type;
  _scanner_type_type scanner_type;

   typedef uint16_t _scan_number_type;
  _scan_number_type scan_number;

   typedef float _start_angle_type;
  _start_angle_type start_angle;

   typedef float _end_angle_type;
  _end_angle_type end_angle;

   typedef ros::Time _scan_start_time_type;
  _scan_start_time_type scan_start_time;

   typedef ros::Time _scan_end_time_type;
  _scan_end_time_type scan_end_time;

   typedef ros::Time _scan_start_time_from_device_type;
  _scan_start_time_from_device_type scan_start_time_from_device;

   typedef ros::Time _scan_end_time_from_device_type;
  _scan_end_time_from_device_type scan_end_time_from_device;

   typedef float _scan_frequency_type;
  _scan_frequency_type scan_frequency;

   typedef float _beam_tilt_type;
  _beam_tilt_type beam_tilt;

   typedef uint32_t _scan_flags_type;
  _scan_flags_type scan_flags;

   typedef  ::ibeo_msgs::MountingPositionF_<ContainerAllocator>  _mounting_position_type;
  _mounting_position_type mounting_position;

   typedef boost::array< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> , 8>  _resolutions_type;
  _resolutions_type resolutions;



  enum {
    ALASCA_XT = 3u,
    LUX_ECU = 4u,
    LUX_PROTOTYPE = 5u,
    LUX = 6u,
    SCALA_B1 = 96u,
  };


  typedef boost::shared_ptr< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> const> ConstPtr;

}; // struct ScannerInfo2205_

typedef ::ibeo_msgs::ScannerInfo2205_<std::allocator<void> > ScannerInfo2205;

typedef boost::shared_ptr< ::ibeo_msgs::ScannerInfo2205 > ScannerInfo2205Ptr;
typedef boost::shared_ptr< ::ibeo_msgs::ScannerInfo2205 const> ScannerInfo2205ConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ibeo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ibeo_msgs': ['/home/kratos/OFRN/catkin_ws/src/ibeo_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79f253f5127e7e8a6ca7b4129fa5c4b1";
  }

  static const char* value(const ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79f253f5127e7e8aULL;
  static const uint64_t static_value2 = 0x6ca7b4129fa5c4b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibeo_msgs/ScannerInfo2205";
  }

  static const char* value(const ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 device_id\n\
uint8 scanner_type\n\
uint16 scan_number\n\
float32 start_angle\n\
float32 end_angle\n\
time scan_start_time\n\
time scan_end_time\n\
time scan_start_time_from_device\n\
time scan_end_time_from_device\n\
float32 scan_frequency\n\
float32 beam_tilt\n\
uint32 scan_flags\n\
MountingPositionF mounting_position\n\
ResolutionInfo[8] resolutions\n\
\n\
# scanner_type values\n\
uint8 ALASCA_XT=3\n\
uint8 LUX_ECU=4\n\
uint8 LUX_PROTOTYPE=5\n\
uint8 LUX=6\n\
uint8 SCALA_B1=96\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/MountingPositionF\n\
float32 yaw_angle\n\
float32 pitch_angle\n\
float32 roll_angle\n\
float32 x_position\n\
float32 y_position\n\
float32 z_position\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/ResolutionInfo\n\
float32 resolution_start_angle\n\
float32 resolution\n\
";
  }

  static const char* value(const ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_id);
      stream.next(m.scanner_type);
      stream.next(m.scan_number);
      stream.next(m.start_angle);
      stream.next(m.end_angle);
      stream.next(m.scan_start_time);
      stream.next(m.scan_end_time);
      stream.next(m.scan_start_time_from_device);
      stream.next(m.scan_end_time_from_device);
      stream.next(m.scan_frequency);
      stream.next(m.beam_tilt);
      stream.next(m.scan_flags);
      stream.next(m.mounting_position);
      stream.next(m.resolutions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScannerInfo2205_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibeo_msgs::ScannerInfo2205_<ContainerAllocator>& v)
  {
    s << indent << "device_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.device_id);
    s << indent << "scanner_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.scanner_type);
    s << indent << "scan_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.scan_number);
    s << indent << "start_angle: ";
    Printer<float>::stream(s, indent + "  ", v.start_angle);
    s << indent << "end_angle: ";
    Printer<float>::stream(s, indent + "  ", v.end_angle);
    s << indent << "scan_start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.scan_start_time);
    s << indent << "scan_end_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.scan_end_time);
    s << indent << "scan_start_time_from_device: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.scan_start_time_from_device);
    s << indent << "scan_end_time_from_device: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.scan_end_time_from_device);
    s << indent << "scan_frequency: ";
    Printer<float>::stream(s, indent + "  ", v.scan_frequency);
    s << indent << "beam_tilt: ";
    Printer<float>::stream(s, indent + "  ", v.beam_tilt);
    s << indent << "scan_flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.scan_flags);
    s << indent << "mounting_position: ";
    s << std::endl;
    Printer< ::ibeo_msgs::MountingPositionF_<ContainerAllocator> >::stream(s, indent + "  ", v.mounting_position);
    s << indent << "resolutions[]" << std::endl;
    for (size_t i = 0; i < v.resolutions.size(); ++i)
    {
      s << indent << "  resolutions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.resolutions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBEO_MSGS_MESSAGE_SCANNERINFO2205_H
