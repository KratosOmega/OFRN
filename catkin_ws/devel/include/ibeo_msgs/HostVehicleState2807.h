// Generated by gencpp from file ibeo_msgs/HostVehicleState2807.msg
// DO NOT EDIT!


#ifndef IBEO_MSGS_MESSAGE_HOSTVEHICLESTATE2807_H
#define IBEO_MSGS_MESSAGE_HOSTVEHICLESTATE2807_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ibeo_msgs/IbeoDataHeader.h>

namespace ibeo_msgs
{
template <class ContainerAllocator>
struct HostVehicleState2807_
{
  typedef HostVehicleState2807_<ContainerAllocator> Type;

  HostVehicleState2807_()
    : header()
    , ibeo_header()
    , timestamp()
    , distance_x(0)
    , distance_y(0)
    , course_angle(0.0)
    , longitudinal_velocity(0.0)
    , yaw_rate(0.0)
    , steering_wheel_angle(0.0)
    , cross_acceleration(0.0)
    , front_wheel_angle(0.0)
    , vehicle_width(0.0)
    , vehicle_front_to_front_axle(0.0)
    , rear_axle_to_front_axle(0.0)
    , rear_axle_to_vehicle_rear(0.0)
    , steer_ratio_poly_0(0.0)
    , steer_ratio_poly_1(0.0)
    , steer_ratio_poly_2(0.0)
    , steer_ratio_poly_3(0.0)
    , longitudinal_acceleration(0.0)  {
    }
  HostVehicleState2807_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ibeo_header(_alloc)
    , timestamp()
    , distance_x(0)
    , distance_y(0)
    , course_angle(0.0)
    , longitudinal_velocity(0.0)
    , yaw_rate(0.0)
    , steering_wheel_angle(0.0)
    , cross_acceleration(0.0)
    , front_wheel_angle(0.0)
    , vehicle_width(0.0)
    , vehicle_front_to_front_axle(0.0)
    , rear_axle_to_front_axle(0.0)
    , rear_axle_to_vehicle_rear(0.0)
    , steer_ratio_poly_0(0.0)
    , steer_ratio_poly_1(0.0)
    , steer_ratio_poly_2(0.0)
    , steer_ratio_poly_3(0.0)
    , longitudinal_acceleration(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ibeo_msgs::IbeoDataHeader_<ContainerAllocator>  _ibeo_header_type;
  _ibeo_header_type ibeo_header;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _distance_x_type;
  _distance_x_type distance_x;

   typedef int32_t _distance_y_type;
  _distance_y_type distance_y;

   typedef float _course_angle_type;
  _course_angle_type course_angle;

   typedef float _longitudinal_velocity_type;
  _longitudinal_velocity_type longitudinal_velocity;

   typedef float _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef float _steering_wheel_angle_type;
  _steering_wheel_angle_type steering_wheel_angle;

   typedef float _cross_acceleration_type;
  _cross_acceleration_type cross_acceleration;

   typedef float _front_wheel_angle_type;
  _front_wheel_angle_type front_wheel_angle;

   typedef float _vehicle_width_type;
  _vehicle_width_type vehicle_width;

   typedef float _vehicle_front_to_front_axle_type;
  _vehicle_front_to_front_axle_type vehicle_front_to_front_axle;

   typedef float _rear_axle_to_front_axle_type;
  _rear_axle_to_front_axle_type rear_axle_to_front_axle;

   typedef float _rear_axle_to_vehicle_rear_type;
  _rear_axle_to_vehicle_rear_type rear_axle_to_vehicle_rear;

   typedef float _steer_ratio_poly_0_type;
  _steer_ratio_poly_0_type steer_ratio_poly_0;

   typedef float _steer_ratio_poly_1_type;
  _steer_ratio_poly_1_type steer_ratio_poly_1;

   typedef float _steer_ratio_poly_2_type;
  _steer_ratio_poly_2_type steer_ratio_poly_2;

   typedef float _steer_ratio_poly_3_type;
  _steer_ratio_poly_3_type steer_ratio_poly_3;

   typedef float _longitudinal_acceleration_type;
  _longitudinal_acceleration_type longitudinal_acceleration;





  typedef boost::shared_ptr< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> const> ConstPtr;

}; // struct HostVehicleState2807_

typedef ::ibeo_msgs::HostVehicleState2807_<std::allocator<void> > HostVehicleState2807;

typedef boost::shared_ptr< ::ibeo_msgs::HostVehicleState2807 > HostVehicleState2807Ptr;
typedef boost::shared_ptr< ::ibeo_msgs::HostVehicleState2807 const> HostVehicleState2807ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ibeo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'ibeo_msgs': ['/home/kratos/OFRN/catkin_ws/src/ibeo_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2e6eff0bfef8ba9587eece105e62bf5";
  }

  static const char* value(const ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2e6eff0bfef8ba9ULL;
  static const uint64_t static_value2 = 0x587eece105e62bf5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibeo_msgs/HostVehicleState2807";
  }

  static const char* value(const ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
IbeoDataHeader ibeo_header\n\
time timestamp\n\
int32 distance_x\n\
int32 distance_y\n\
float32 course_angle\n\
float32 longitudinal_velocity\n\
float32 yaw_rate\n\
float32 steering_wheel_angle\n\
float32 cross_acceleration\n\
float32 front_wheel_angle\n\
float32 vehicle_width\n\
float32 vehicle_front_to_front_axle\n\
float32 rear_axle_to_front_axle\n\
float32 rear_axle_to_vehicle_rear\n\
float32 steer_ratio_poly_0\n\
float32 steer_ratio_poly_1\n\
float32 steer_ratio_poly_2\n\
float32 steer_ratio_poly_3\n\
float32 longitudinal_acceleration\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/IbeoDataHeader\n\
uint32 previous_message_size\n\
uint32 message_size\n\
uint8 device_id\n\
uint16 data_type_id\n\
time stamp\n\
";
  }

  static const char* value(const ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ibeo_header);
      stream.next(m.timestamp);
      stream.next(m.distance_x);
      stream.next(m.distance_y);
      stream.next(m.course_angle);
      stream.next(m.longitudinal_velocity);
      stream.next(m.yaw_rate);
      stream.next(m.steering_wheel_angle);
      stream.next(m.cross_acceleration);
      stream.next(m.front_wheel_angle);
      stream.next(m.vehicle_width);
      stream.next(m.vehicle_front_to_front_axle);
      stream.next(m.rear_axle_to_front_axle);
      stream.next(m.rear_axle_to_vehicle_rear);
      stream.next(m.steer_ratio_poly_0);
      stream.next(m.steer_ratio_poly_1);
      stream.next(m.steer_ratio_poly_2);
      stream.next(m.steer_ratio_poly_3);
      stream.next(m.longitudinal_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HostVehicleState2807_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibeo_msgs::HostVehicleState2807_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ibeo_header: ";
    s << std::endl;
    Printer< ::ibeo_msgs::IbeoDataHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ibeo_header);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "distance_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distance_x);
    s << indent << "distance_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distance_y);
    s << indent << "course_angle: ";
    Printer<float>::stream(s, indent + "  ", v.course_angle);
    s << indent << "longitudinal_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.longitudinal_velocity);
    s << indent << "yaw_rate: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "steering_wheel_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steering_wheel_angle);
    s << indent << "cross_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.cross_acceleration);
    s << indent << "front_wheel_angle: ";
    Printer<float>::stream(s, indent + "  ", v.front_wheel_angle);
    s << indent << "vehicle_width: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_width);
    s << indent << "vehicle_front_to_front_axle: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_front_to_front_axle);
    s << indent << "rear_axle_to_front_axle: ";
    Printer<float>::stream(s, indent + "  ", v.rear_axle_to_front_axle);
    s << indent << "rear_axle_to_vehicle_rear: ";
    Printer<float>::stream(s, indent + "  ", v.rear_axle_to_vehicle_rear);
    s << indent << "steer_ratio_poly_0: ";
    Printer<float>::stream(s, indent + "  ", v.steer_ratio_poly_0);
    s << indent << "steer_ratio_poly_1: ";
    Printer<float>::stream(s, indent + "  ", v.steer_ratio_poly_1);
    s << indent << "steer_ratio_poly_2: ";
    Printer<float>::stream(s, indent + "  ", v.steer_ratio_poly_2);
    s << indent << "steer_ratio_poly_3: ";
    Printer<float>::stream(s, indent + "  ", v.steer_ratio_poly_3);
    s << indent << "longitudinal_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.longitudinal_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBEO_MSGS_MESSAGE_HOSTVEHICLESTATE2807_H
