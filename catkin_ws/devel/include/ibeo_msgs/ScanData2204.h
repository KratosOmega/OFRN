// Generated by gencpp from file ibeo_msgs/ScanData2204.msg
// DO NOT EDIT!


#ifndef IBEO_MSGS_MESSAGE_SCANDATA2204_H
#define IBEO_MSGS_MESSAGE_SCANDATA2204_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ibeo_msgs/IbeoDataHeader.h>
#include <ibeo_msgs/ScannerInfo2204.h>
#include <ibeo_msgs/ScanPoint2204.h>

namespace ibeo_msgs
{
template <class ContainerAllocator>
struct ScanData2204_
{
  typedef ScanData2204_<ContainerAllocator> Type;

  ScanData2204_()
    : header()
    , ibeo_header()
    , scan_start_time(0)
    , scan_end_time_offset(0)
    , ground_labeled(false)
    , dirt_labeled(false)
    , rain_labeled(false)
    , fused_scan(false)
    , mirror_side(0)
    , coordinate_system(0)
    , scan_number(0)
    , scan_points(0)
    , number_of_scanner_infos(0)
    , scanner_info_list()
    , scan_point_list()  {
    }
  ScanData2204_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ibeo_header(_alloc)
    , scan_start_time(0)
    , scan_end_time_offset(0)
    , ground_labeled(false)
    , dirt_labeled(false)
    , rain_labeled(false)
    , fused_scan(false)
    , mirror_side(0)
    , coordinate_system(0)
    , scan_number(0)
    , scan_points(0)
    , number_of_scanner_infos(0)
    , scanner_info_list(_alloc)
    , scan_point_list(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ibeo_msgs::IbeoDataHeader_<ContainerAllocator>  _ibeo_header_type;
  _ibeo_header_type ibeo_header;

   typedef uint64_t _scan_start_time_type;
  _scan_start_time_type scan_start_time;

   typedef uint32_t _scan_end_time_offset_type;
  _scan_end_time_offset_type scan_end_time_offset;

   typedef uint8_t _ground_labeled_type;
  _ground_labeled_type ground_labeled;

   typedef uint8_t _dirt_labeled_type;
  _dirt_labeled_type dirt_labeled;

   typedef uint8_t _rain_labeled_type;
  _rain_labeled_type rain_labeled;

   typedef uint8_t _fused_scan_type;
  _fused_scan_type fused_scan;

   typedef uint8_t _mirror_side_type;
  _mirror_side_type mirror_side;

   typedef uint8_t _coordinate_system_type;
  _coordinate_system_type coordinate_system;

   typedef uint16_t _scan_number_type;
  _scan_number_type scan_number;

   typedef uint16_t _scan_points_type;
  _scan_points_type scan_points;

   typedef uint16_t _number_of_scanner_infos_type;
  _number_of_scanner_infos_type number_of_scanner_infos;

   typedef std::vector< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> >::other >  _scanner_info_list_type;
  _scanner_info_list_type scanner_info_list;

   typedef std::vector< ::ibeo_msgs::ScanPoint2204_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ibeo_msgs::ScanPoint2204_<ContainerAllocator> >::other >  _scan_point_list_type;
  _scan_point_list_type scan_point_list;



  enum {
    FRONT = 0u,
    REAR = 1u,
    SCANNER = 0u,
    VEHICLE = 1u,
  };


  typedef boost::shared_ptr< ::ibeo_msgs::ScanData2204_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibeo_msgs::ScanData2204_<ContainerAllocator> const> ConstPtr;

}; // struct ScanData2204_

typedef ::ibeo_msgs::ScanData2204_<std::allocator<void> > ScanData2204;

typedef boost::shared_ptr< ::ibeo_msgs::ScanData2204 > ScanData2204Ptr;
typedef boost::shared_ptr< ::ibeo_msgs::ScanData2204 const> ScanData2204ConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibeo_msgs::ScanData2204_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibeo_msgs::ScanData2204_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ibeo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'ibeo_msgs': ['/home/kratos/OFRN/catkin_ws/src/ibeo_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ScanData2204_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ScanData2204_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ScanData2204_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ScanData2204_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ScanData2204_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ScanData2204_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibeo_msgs::ScanData2204_<ContainerAllocator> >
{
  static const char* value()
  {
    return "373528bb1a7104132613bbfa12f008fd";
  }

  static const char* value(const ::ibeo_msgs::ScanData2204_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x373528bb1a710413ULL;
  static const uint64_t static_value2 = 0x2613bbfa12f008fdULL;
};

template<class ContainerAllocator>
struct DataType< ::ibeo_msgs::ScanData2204_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibeo_msgs/ScanData2204";
  }

  static const char* value(const ::ibeo_msgs::ScanData2204_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibeo_msgs::ScanData2204_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
IbeoDataHeader ibeo_header\n\
uint64 scan_start_time\n\
uint32 scan_end_time_offset\n\
bool ground_labeled\n\
bool dirt_labeled\n\
bool rain_labeled\n\
bool fused_scan\n\
uint8 mirror_side\n\
uint8 coordinate_system\n\
uint16 scan_number\n\
uint16 scan_points\n\
uint16 number_of_scanner_infos\n\
ScannerInfo2204[] scanner_info_list\n\
ScanPoint2204[] scan_point_list\n\
\n\
# mirror_side values\n\
uint8 FRONT=0\n\
uint8 REAR=1\n\
\n\
# coordinate_system values\n\
uint8 SCANNER=0\n\
uint8 VEHICLE=1\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/IbeoDataHeader\n\
uint32 previous_message_size\n\
uint32 message_size\n\
uint8 device_id\n\
uint16 data_type_id\n\
time stamp\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/ScannerInfo2204\n\
uint8 device_id\n\
uint8 scanner_type\n\
uint16 scan_number\n\
float32 start_angle\n\
float32 end_angle\n\
float32 yaw_angle\n\
float32 pitch_angle\n\
float32 roll_angle\n\
float32 offset_x\n\
float32 offset_y\n\
float32 offset_z\n\
\n\
# scanner_type values\n\
uint8 ALASCA_XT=3\n\
uint8 LUX_ECU=4\n\
uint8 LUX_PROTOTYPE=5\n\
uint8 LUX=6\n\
uint8 SCALA_B1=96\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/ScanPoint2204\n\
float32 x_position\n\
float32 y_position\n\
float32 z_position\n\
float32 echo_width\n\
uint8 device_id\n\
uint8 layer\n\
uint8 echo\n\
uint32 time_offset\n\
bool ground\n\
bool dirt\n\
bool precipitation\n\
";
  }

  static const char* value(const ::ibeo_msgs::ScanData2204_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibeo_msgs::ScanData2204_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ibeo_header);
      stream.next(m.scan_start_time);
      stream.next(m.scan_end_time_offset);
      stream.next(m.ground_labeled);
      stream.next(m.dirt_labeled);
      stream.next(m.rain_labeled);
      stream.next(m.fused_scan);
      stream.next(m.mirror_side);
      stream.next(m.coordinate_system);
      stream.next(m.scan_number);
      stream.next(m.scan_points);
      stream.next(m.number_of_scanner_infos);
      stream.next(m.scanner_info_list);
      stream.next(m.scan_point_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScanData2204_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibeo_msgs::ScanData2204_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibeo_msgs::ScanData2204_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ibeo_header: ";
    s << std::endl;
    Printer< ::ibeo_msgs::IbeoDataHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ibeo_header);
    s << indent << "scan_start_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.scan_start_time);
    s << indent << "scan_end_time_offset: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.scan_end_time_offset);
    s << indent << "ground_labeled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ground_labeled);
    s << indent << "dirt_labeled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dirt_labeled);
    s << indent << "rain_labeled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rain_labeled);
    s << indent << "fused_scan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fused_scan);
    s << indent << "mirror_side: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mirror_side);
    s << indent << "coordinate_system: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.coordinate_system);
    s << indent << "scan_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.scan_number);
    s << indent << "scan_points: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.scan_points);
    s << indent << "number_of_scanner_infos: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.number_of_scanner_infos);
    s << indent << "scanner_info_list[]" << std::endl;
    for (size_t i = 0; i < v.scanner_info_list.size(); ++i)
    {
      s << indent << "  scanner_info_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ibeo_msgs::ScannerInfo2204_<ContainerAllocator> >::stream(s, indent + "    ", v.scanner_info_list[i]);
    }
    s << indent << "scan_point_list[]" << std::endl;
    for (size_t i = 0; i < v.scan_point_list.size(); ++i)
    {
      s << indent << "  scan_point_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ibeo_msgs::ScanPoint2204_<ContainerAllocator> >::stream(s, indent + "    ", v.scan_point_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBEO_MSGS_MESSAGE_SCANDATA2204_H
