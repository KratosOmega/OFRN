// Generated by gencpp from file ibeo_msgs/ErrorWarning.msg
// DO NOT EDIT!


#ifndef IBEO_MSGS_MESSAGE_ERRORWARNING_H
#define IBEO_MSGS_MESSAGE_ERRORWARNING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ibeo_msgs/IbeoDataHeader.h>

namespace ibeo_msgs
{
template <class ContainerAllocator>
struct ErrorWarning_
{
  typedef ErrorWarning_<ContainerAllocator> Type;

  ErrorWarning_()
    : header()
    , ibeo_header()
    , err_internal_error(false)
    , err_motor_1_fault(false)
    , err_buffer_error_xmt_incomplete(false)
    , err_buffer_error_overflow(false)
    , err_apd_over_temperature(false)
    , err_apd_under_temperature(false)
    , err_apd_temperature_sensor_defect(false)
    , err_motor_2_fault(false)
    , err_motor_3_fault(false)
    , err_motor_4_fault(false)
    , err_motor_5_fault(false)
    , err_int_no_scan_data(false)
    , err_int_communication_error(false)
    , err_int_incorrect_scan_data(false)
    , err_config_fpga_not_configurable(false)
    , err_config_incorrect_config_data(false)
    , err_config_contains_incorrect_params(false)
    , err_timeout_data_processing(false)
    , err_timeout_env_model_computation_reset(false)
    , wrn_int_communication_error(false)
    , wrn_low_temperature(false)
    , wrn_high_temperature(false)
    , wrn_int_motor_1(false)
    , wrn_sync_error(false)
    , wrn_laser_1_start_pulse_missing(false)
    , wrn_laser_2_start_pulse_missing(false)
    , wrn_can_interface_blocked(false)
    , wrn_eth_interface_blocked(false)
    , wrn_incorrect_can_data_rcvd(false)
    , wrn_int_incorrect_scan_data(false)
    , wrn_eth_unkwn_incomplete_data(false)
    , wrn_incorrect_or_forbidden_cmd_rcvd(false)
    , wrn_memory_access_failure(false)
    , wrn_int_overflow(false)
    , wrn_ego_motion_data_missing(false)
    , wrn_incorrect_mounting_params(false)
    , wrn_no_obj_comp_due_to_scan_freq(false)  {
    }
  ErrorWarning_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ibeo_header(_alloc)
    , err_internal_error(false)
    , err_motor_1_fault(false)
    , err_buffer_error_xmt_incomplete(false)
    , err_buffer_error_overflow(false)
    , err_apd_over_temperature(false)
    , err_apd_under_temperature(false)
    , err_apd_temperature_sensor_defect(false)
    , err_motor_2_fault(false)
    , err_motor_3_fault(false)
    , err_motor_4_fault(false)
    , err_motor_5_fault(false)
    , err_int_no_scan_data(false)
    , err_int_communication_error(false)
    , err_int_incorrect_scan_data(false)
    , err_config_fpga_not_configurable(false)
    , err_config_incorrect_config_data(false)
    , err_config_contains_incorrect_params(false)
    , err_timeout_data_processing(false)
    , err_timeout_env_model_computation_reset(false)
    , wrn_int_communication_error(false)
    , wrn_low_temperature(false)
    , wrn_high_temperature(false)
    , wrn_int_motor_1(false)
    , wrn_sync_error(false)
    , wrn_laser_1_start_pulse_missing(false)
    , wrn_laser_2_start_pulse_missing(false)
    , wrn_can_interface_blocked(false)
    , wrn_eth_interface_blocked(false)
    , wrn_incorrect_can_data_rcvd(false)
    , wrn_int_incorrect_scan_data(false)
    , wrn_eth_unkwn_incomplete_data(false)
    , wrn_incorrect_or_forbidden_cmd_rcvd(false)
    , wrn_memory_access_failure(false)
    , wrn_int_overflow(false)
    , wrn_ego_motion_data_missing(false)
    , wrn_incorrect_mounting_params(false)
    , wrn_no_obj_comp_due_to_scan_freq(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ibeo_msgs::IbeoDataHeader_<ContainerAllocator>  _ibeo_header_type;
  _ibeo_header_type ibeo_header;

   typedef uint8_t _err_internal_error_type;
  _err_internal_error_type err_internal_error;

   typedef uint8_t _err_motor_1_fault_type;
  _err_motor_1_fault_type err_motor_1_fault;

   typedef uint8_t _err_buffer_error_xmt_incomplete_type;
  _err_buffer_error_xmt_incomplete_type err_buffer_error_xmt_incomplete;

   typedef uint8_t _err_buffer_error_overflow_type;
  _err_buffer_error_overflow_type err_buffer_error_overflow;

   typedef uint8_t _err_apd_over_temperature_type;
  _err_apd_over_temperature_type err_apd_over_temperature;

   typedef uint8_t _err_apd_under_temperature_type;
  _err_apd_under_temperature_type err_apd_under_temperature;

   typedef uint8_t _err_apd_temperature_sensor_defect_type;
  _err_apd_temperature_sensor_defect_type err_apd_temperature_sensor_defect;

   typedef uint8_t _err_motor_2_fault_type;
  _err_motor_2_fault_type err_motor_2_fault;

   typedef uint8_t _err_motor_3_fault_type;
  _err_motor_3_fault_type err_motor_3_fault;

   typedef uint8_t _err_motor_4_fault_type;
  _err_motor_4_fault_type err_motor_4_fault;

   typedef uint8_t _err_motor_5_fault_type;
  _err_motor_5_fault_type err_motor_5_fault;

   typedef uint8_t _err_int_no_scan_data_type;
  _err_int_no_scan_data_type err_int_no_scan_data;

   typedef uint8_t _err_int_communication_error_type;
  _err_int_communication_error_type err_int_communication_error;

   typedef uint8_t _err_int_incorrect_scan_data_type;
  _err_int_incorrect_scan_data_type err_int_incorrect_scan_data;

   typedef uint8_t _err_config_fpga_not_configurable_type;
  _err_config_fpga_not_configurable_type err_config_fpga_not_configurable;

   typedef uint8_t _err_config_incorrect_config_data_type;
  _err_config_incorrect_config_data_type err_config_incorrect_config_data;

   typedef uint8_t _err_config_contains_incorrect_params_type;
  _err_config_contains_incorrect_params_type err_config_contains_incorrect_params;

   typedef uint8_t _err_timeout_data_processing_type;
  _err_timeout_data_processing_type err_timeout_data_processing;

   typedef uint8_t _err_timeout_env_model_computation_reset_type;
  _err_timeout_env_model_computation_reset_type err_timeout_env_model_computation_reset;

   typedef uint8_t _wrn_int_communication_error_type;
  _wrn_int_communication_error_type wrn_int_communication_error;

   typedef uint8_t _wrn_low_temperature_type;
  _wrn_low_temperature_type wrn_low_temperature;

   typedef uint8_t _wrn_high_temperature_type;
  _wrn_high_temperature_type wrn_high_temperature;

   typedef uint8_t _wrn_int_motor_1_type;
  _wrn_int_motor_1_type wrn_int_motor_1;

   typedef uint8_t _wrn_sync_error_type;
  _wrn_sync_error_type wrn_sync_error;

   typedef uint8_t _wrn_laser_1_start_pulse_missing_type;
  _wrn_laser_1_start_pulse_missing_type wrn_laser_1_start_pulse_missing;

   typedef uint8_t _wrn_laser_2_start_pulse_missing_type;
  _wrn_laser_2_start_pulse_missing_type wrn_laser_2_start_pulse_missing;

   typedef uint8_t _wrn_can_interface_blocked_type;
  _wrn_can_interface_blocked_type wrn_can_interface_blocked;

   typedef uint8_t _wrn_eth_interface_blocked_type;
  _wrn_eth_interface_blocked_type wrn_eth_interface_blocked;

   typedef uint8_t _wrn_incorrect_can_data_rcvd_type;
  _wrn_incorrect_can_data_rcvd_type wrn_incorrect_can_data_rcvd;

   typedef uint8_t _wrn_int_incorrect_scan_data_type;
  _wrn_int_incorrect_scan_data_type wrn_int_incorrect_scan_data;

   typedef uint8_t _wrn_eth_unkwn_incomplete_data_type;
  _wrn_eth_unkwn_incomplete_data_type wrn_eth_unkwn_incomplete_data;

   typedef uint8_t _wrn_incorrect_or_forbidden_cmd_rcvd_type;
  _wrn_incorrect_or_forbidden_cmd_rcvd_type wrn_incorrect_or_forbidden_cmd_rcvd;

   typedef uint8_t _wrn_memory_access_failure_type;
  _wrn_memory_access_failure_type wrn_memory_access_failure;

   typedef uint8_t _wrn_int_overflow_type;
  _wrn_int_overflow_type wrn_int_overflow;

   typedef uint8_t _wrn_ego_motion_data_missing_type;
  _wrn_ego_motion_data_missing_type wrn_ego_motion_data_missing;

   typedef uint8_t _wrn_incorrect_mounting_params_type;
  _wrn_incorrect_mounting_params_type wrn_incorrect_mounting_params;

   typedef uint8_t _wrn_no_obj_comp_due_to_scan_freq_type;
  _wrn_no_obj_comp_due_to_scan_freq_type wrn_no_obj_comp_due_to_scan_freq;





  typedef boost::shared_ptr< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> const> ConstPtr;

}; // struct ErrorWarning_

typedef ::ibeo_msgs::ErrorWarning_<std::allocator<void> > ErrorWarning;

typedef boost::shared_ptr< ::ibeo_msgs::ErrorWarning > ErrorWarningPtr;
typedef boost::shared_ptr< ::ibeo_msgs::ErrorWarning const> ErrorWarningConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibeo_msgs::ErrorWarning_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ibeo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'ibeo_msgs': ['/home/kratos/OFRN/catkin_ws/src/ibeo_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c325629d3f8237469cf0318dbfa5ea2c";
  }

  static const char* value(const ::ibeo_msgs::ErrorWarning_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc325629d3f823746ULL;
  static const uint64_t static_value2 = 0x9cf0318dbfa5ea2cULL;
};

template<class ContainerAllocator>
struct DataType< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibeo_msgs/ErrorWarning";
  }

  static const char* value(const ::ibeo_msgs::ErrorWarning_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
IbeoDataHeader ibeo_header\n\
bool err_internal_error\n\
bool err_motor_1_fault\n\
bool err_buffer_error_xmt_incomplete\n\
bool err_buffer_error_overflow\n\
bool err_apd_over_temperature\n\
bool err_apd_under_temperature\n\
bool err_apd_temperature_sensor_defect\n\
bool err_motor_2_fault\n\
bool err_motor_3_fault\n\
bool err_motor_4_fault\n\
bool err_motor_5_fault\n\
bool err_int_no_scan_data\n\
bool err_int_communication_error\n\
bool err_int_incorrect_scan_data\n\
bool err_config_fpga_not_configurable\n\
bool err_config_incorrect_config_data\n\
bool err_config_contains_incorrect_params\n\
bool err_timeout_data_processing\n\
bool err_timeout_env_model_computation_reset\n\
bool wrn_int_communication_error\n\
bool wrn_low_temperature\n\
bool wrn_high_temperature\n\
bool wrn_int_motor_1\n\
bool wrn_sync_error\n\
bool wrn_laser_1_start_pulse_missing\n\
bool wrn_laser_2_start_pulse_missing\n\
bool wrn_can_interface_blocked\n\
bool wrn_eth_interface_blocked\n\
bool wrn_incorrect_can_data_rcvd\n\
bool wrn_int_incorrect_scan_data\n\
bool wrn_eth_unkwn_incomplete_data\n\
bool wrn_incorrect_or_forbidden_cmd_rcvd\n\
bool wrn_memory_access_failure\n\
bool wrn_int_overflow\n\
bool wrn_ego_motion_data_missing\n\
bool wrn_incorrect_mounting_params\n\
bool wrn_no_obj_comp_due_to_scan_freq\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/IbeoDataHeader\n\
uint32 previous_message_size\n\
uint32 message_size\n\
uint8 device_id\n\
uint16 data_type_id\n\
time stamp\n\
";
  }

  static const char* value(const ::ibeo_msgs::ErrorWarning_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ibeo_header);
      stream.next(m.err_internal_error);
      stream.next(m.err_motor_1_fault);
      stream.next(m.err_buffer_error_xmt_incomplete);
      stream.next(m.err_buffer_error_overflow);
      stream.next(m.err_apd_over_temperature);
      stream.next(m.err_apd_under_temperature);
      stream.next(m.err_apd_temperature_sensor_defect);
      stream.next(m.err_motor_2_fault);
      stream.next(m.err_motor_3_fault);
      stream.next(m.err_motor_4_fault);
      stream.next(m.err_motor_5_fault);
      stream.next(m.err_int_no_scan_data);
      stream.next(m.err_int_communication_error);
      stream.next(m.err_int_incorrect_scan_data);
      stream.next(m.err_config_fpga_not_configurable);
      stream.next(m.err_config_incorrect_config_data);
      stream.next(m.err_config_contains_incorrect_params);
      stream.next(m.err_timeout_data_processing);
      stream.next(m.err_timeout_env_model_computation_reset);
      stream.next(m.wrn_int_communication_error);
      stream.next(m.wrn_low_temperature);
      stream.next(m.wrn_high_temperature);
      stream.next(m.wrn_int_motor_1);
      stream.next(m.wrn_sync_error);
      stream.next(m.wrn_laser_1_start_pulse_missing);
      stream.next(m.wrn_laser_2_start_pulse_missing);
      stream.next(m.wrn_can_interface_blocked);
      stream.next(m.wrn_eth_interface_blocked);
      stream.next(m.wrn_incorrect_can_data_rcvd);
      stream.next(m.wrn_int_incorrect_scan_data);
      stream.next(m.wrn_eth_unkwn_incomplete_data);
      stream.next(m.wrn_incorrect_or_forbidden_cmd_rcvd);
      stream.next(m.wrn_memory_access_failure);
      stream.next(m.wrn_int_overflow);
      stream.next(m.wrn_ego_motion_data_missing);
      stream.next(m.wrn_incorrect_mounting_params);
      stream.next(m.wrn_no_obj_comp_due_to_scan_freq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ErrorWarning_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibeo_msgs::ErrorWarning_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibeo_msgs::ErrorWarning_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ibeo_header: ";
    s << std::endl;
    Printer< ::ibeo_msgs::IbeoDataHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.ibeo_header);
    s << indent << "err_internal_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_internal_error);
    s << indent << "err_motor_1_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_motor_1_fault);
    s << indent << "err_buffer_error_xmt_incomplete: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_buffer_error_xmt_incomplete);
    s << indent << "err_buffer_error_overflow: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_buffer_error_overflow);
    s << indent << "err_apd_over_temperature: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_apd_over_temperature);
    s << indent << "err_apd_under_temperature: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_apd_under_temperature);
    s << indent << "err_apd_temperature_sensor_defect: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_apd_temperature_sensor_defect);
    s << indent << "err_motor_2_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_motor_2_fault);
    s << indent << "err_motor_3_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_motor_3_fault);
    s << indent << "err_motor_4_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_motor_4_fault);
    s << indent << "err_motor_5_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_motor_5_fault);
    s << indent << "err_int_no_scan_data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_int_no_scan_data);
    s << indent << "err_int_communication_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_int_communication_error);
    s << indent << "err_int_incorrect_scan_data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_int_incorrect_scan_data);
    s << indent << "err_config_fpga_not_configurable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_config_fpga_not_configurable);
    s << indent << "err_config_incorrect_config_data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_config_incorrect_config_data);
    s << indent << "err_config_contains_incorrect_params: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_config_contains_incorrect_params);
    s << indent << "err_timeout_data_processing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_timeout_data_processing);
    s << indent << "err_timeout_env_model_computation_reset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err_timeout_env_model_computation_reset);
    s << indent << "wrn_int_communication_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_int_communication_error);
    s << indent << "wrn_low_temperature: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_low_temperature);
    s << indent << "wrn_high_temperature: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_high_temperature);
    s << indent << "wrn_int_motor_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_int_motor_1);
    s << indent << "wrn_sync_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_sync_error);
    s << indent << "wrn_laser_1_start_pulse_missing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_laser_1_start_pulse_missing);
    s << indent << "wrn_laser_2_start_pulse_missing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_laser_2_start_pulse_missing);
    s << indent << "wrn_can_interface_blocked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_can_interface_blocked);
    s << indent << "wrn_eth_interface_blocked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_eth_interface_blocked);
    s << indent << "wrn_incorrect_can_data_rcvd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_incorrect_can_data_rcvd);
    s << indent << "wrn_int_incorrect_scan_data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_int_incorrect_scan_data);
    s << indent << "wrn_eth_unkwn_incomplete_data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_eth_unkwn_incomplete_data);
    s << indent << "wrn_incorrect_or_forbidden_cmd_rcvd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_incorrect_or_forbidden_cmd_rcvd);
    s << indent << "wrn_memory_access_failure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_memory_access_failure);
    s << indent << "wrn_int_overflow: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_int_overflow);
    s << indent << "wrn_ego_motion_data_missing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_ego_motion_data_missing);
    s << indent << "wrn_incorrect_mounting_params: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_incorrect_mounting_params);
    s << indent << "wrn_no_obj_comp_due_to_scan_freq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrn_no_obj_comp_due_to_scan_freq);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBEO_MSGS_MESSAGE_ERRORWARNING_H
