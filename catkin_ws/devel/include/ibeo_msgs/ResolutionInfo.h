// Generated by gencpp from file ibeo_msgs/ResolutionInfo.msg
// DO NOT EDIT!


#ifndef IBEO_MSGS_MESSAGE_RESOLUTIONINFO_H
#define IBEO_MSGS_MESSAGE_RESOLUTIONINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ibeo_msgs
{
template <class ContainerAllocator>
struct ResolutionInfo_
{
  typedef ResolutionInfo_<ContainerAllocator> Type;

  ResolutionInfo_()
    : resolution_start_angle(0.0)
    , resolution(0.0)  {
    }
  ResolutionInfo_(const ContainerAllocator& _alloc)
    : resolution_start_angle(0.0)
    , resolution(0.0)  {
  (void)_alloc;
    }



   typedef float _resolution_start_angle_type;
  _resolution_start_angle_type resolution_start_angle;

   typedef float _resolution_type;
  _resolution_type resolution;





  typedef boost::shared_ptr< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ResolutionInfo_

typedef ::ibeo_msgs::ResolutionInfo_<std::allocator<void> > ResolutionInfo;

typedef boost::shared_ptr< ::ibeo_msgs::ResolutionInfo > ResolutionInfoPtr;
typedef boost::shared_ptr< ::ibeo_msgs::ResolutionInfo const> ResolutionInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ibeo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ibeo_msgs': ['/home/kratos/OFRN/catkin_ws/src/ibeo_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "932a0acc7d57a2781707ca700aaa0490";
  }

  static const char* value(const ::ibeo_msgs::ResolutionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x932a0acc7d57a278ULL;
  static const uint64_t static_value2 = 0x1707ca700aaa0490ULL;
};

template<class ContainerAllocator>
struct DataType< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibeo_msgs/ResolutionInfo";
  }

  static const char* value(const ::ibeo_msgs::ResolutionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 resolution_start_angle\n\
float32 resolution\n\
";
  }

  static const char* value(const ::ibeo_msgs::ResolutionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.resolution_start_angle);
      stream.next(m.resolution);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResolutionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibeo_msgs::ResolutionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibeo_msgs::ResolutionInfo_<ContainerAllocator>& v)
  {
    s << indent << "resolution_start_angle: ";
    Printer<float>::stream(s, indent + "  ", v.resolution_start_angle);
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBEO_MSGS_MESSAGE_RESOLUTIONINFO_H
