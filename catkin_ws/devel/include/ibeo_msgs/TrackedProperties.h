// Generated by gencpp from file ibeo_msgs/TrackedProperties.msg
// DO NOT EDIT!


#ifndef IBEO_MSGS_MESSAGE_TRACKEDPROPERTIES_H
#define IBEO_MSGS_MESSAGE_TRACKEDPROPERTIES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ibeo_msgs/Point2Di.h>
#include <ibeo_msgs/Point2Di.h>
#include <ibeo_msgs/Point2Dui.h>
#include <ibeo_msgs/Point2Di.h>
#include <ibeo_msgs/Point2Dui.h>
#include <ibeo_msgs/Point2Di.h>
#include <ibeo_msgs/Point2Dui.h>
#include <ibeo_msgs/Point2Di.h>
#include <ibeo_msgs/Point2Dui.h>
#include <ibeo_msgs/Point2Di.h>
#include <ibeo_msgs/Point2Dui.h>
#include <ibeo_msgs/ContourPointSigma.h>

namespace ibeo_msgs
{
template <class ContainerAllocator>
struct TrackedProperties_
{
  typedef TrackedProperties_<ContainerAllocator> Type;

  TrackedProperties_()
    : object_age(0)
    , hidden_status_age(0)
    , object_phase(0)
    , dynamic_property(0)
    , relative_time_of_measure(0)
    , position_closest_point()
    , relative_velocity()
    , relative_velocity_sigma()
    , classification(0)
    , classification_age(0)
    , object_box_size()
    , object_box_size_sigma()
    , object_box_orientation(0)
    , object_box_orientation_sigma(0)
    , tracking_point_location(0)
    , tracking_point_coordinate()
    , tracking_point_coordinate_sigma()
    , velocity()
    , velocity_sigma()
    , acceleration()
    , acceleration_sigma()
    , yaw_rate(0)
    , yaw_rate_sigma(0)
    , number_of_contour_points(0)
    , contour_point_list()  {
    }
  TrackedProperties_(const ContainerAllocator& _alloc)
    : object_age(0)
    , hidden_status_age(0)
    , object_phase(0)
    , dynamic_property(0)
    , relative_time_of_measure(0)
    , position_closest_point(_alloc)
    , relative_velocity(_alloc)
    , relative_velocity_sigma(_alloc)
    , classification(0)
    , classification_age(0)
    , object_box_size(_alloc)
    , object_box_size_sigma(_alloc)
    , object_box_orientation(0)
    , object_box_orientation_sigma(0)
    , tracking_point_location(0)
    , tracking_point_coordinate(_alloc)
    , tracking_point_coordinate_sigma(_alloc)
    , velocity(_alloc)
    , velocity_sigma(_alloc)
    , acceleration(_alloc)
    , acceleration_sigma(_alloc)
    , yaw_rate(0)
    , yaw_rate_sigma(0)
    , number_of_contour_points(0)
    , contour_point_list(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _object_age_type;
  _object_age_type object_age;

   typedef uint16_t _hidden_status_age_type;
  _hidden_status_age_type hidden_status_age;

   typedef uint8_t _object_phase_type;
  _object_phase_type object_phase;

   typedef uint8_t _dynamic_property_type;
  _dynamic_property_type dynamic_property;

   typedef uint16_t _relative_time_of_measure_type;
  _relative_time_of_measure_type relative_time_of_measure;

   typedef  ::ibeo_msgs::Point2Di_<ContainerAllocator>  _position_closest_point_type;
  _position_closest_point_type position_closest_point;

   typedef  ::ibeo_msgs::Point2Di_<ContainerAllocator>  _relative_velocity_type;
  _relative_velocity_type relative_velocity;

   typedef  ::ibeo_msgs::Point2Dui_<ContainerAllocator>  _relative_velocity_sigma_type;
  _relative_velocity_sigma_type relative_velocity_sigma;

   typedef uint8_t _classification_type;
  _classification_type classification;

   typedef uint16_t _classification_age_type;
  _classification_age_type classification_age;

   typedef  ::ibeo_msgs::Point2Di_<ContainerAllocator>  _object_box_size_type;
  _object_box_size_type object_box_size;

   typedef  ::ibeo_msgs::Point2Dui_<ContainerAllocator>  _object_box_size_sigma_type;
  _object_box_size_sigma_type object_box_size_sigma;

   typedef int16_t _object_box_orientation_type;
  _object_box_orientation_type object_box_orientation;

   typedef uint16_t _object_box_orientation_sigma_type;
  _object_box_orientation_sigma_type object_box_orientation_sigma;

   typedef uint8_t _tracking_point_location_type;
  _tracking_point_location_type tracking_point_location;

   typedef  ::ibeo_msgs::Point2Di_<ContainerAllocator>  _tracking_point_coordinate_type;
  _tracking_point_coordinate_type tracking_point_coordinate;

   typedef  ::ibeo_msgs::Point2Dui_<ContainerAllocator>  _tracking_point_coordinate_sigma_type;
  _tracking_point_coordinate_sigma_type tracking_point_coordinate_sigma;

   typedef  ::ibeo_msgs::Point2Di_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::ibeo_msgs::Point2Dui_<ContainerAllocator>  _velocity_sigma_type;
  _velocity_sigma_type velocity_sigma;

   typedef  ::ibeo_msgs::Point2Di_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::ibeo_msgs::Point2Dui_<ContainerAllocator>  _acceleration_sigma_type;
  _acceleration_sigma_type acceleration_sigma;

   typedef int16_t _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef uint16_t _yaw_rate_sigma_type;
  _yaw_rate_sigma_type yaw_rate_sigma;

   typedef uint8_t _number_of_contour_points_type;
  _number_of_contour_points_type number_of_contour_points;

   typedef std::vector< ::ibeo_msgs::ContourPointSigma_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ibeo_msgs::ContourPointSigma_<ContainerAllocator> >::other >  _contour_point_list_type;
  _contour_point_list_type contour_point_list;



  enum {
    INITIALIZATION_PHASE = 0u,
    TRACKING_PHASE = 1u,
    DYNAMIC_AND_MOVING = 0u,
    DYNAMIC_AND_STOPPED = 1u,
    A_PRIORI_STATIONARY = 2u,
    UNCLASSIFIED = 0u,
    UNKNOWN_SMALL = 1u,
    UNKNOWN_BIG = 2u,
    PEDESTRIAN = 3u,
    BIKE = 4u,
    CAR = 5u,
    TRUCK = 6u,
    OVER_DRIVABLE = 10u,
    UNDER_DRIVABLE = 11u,
    CENTER_OF_GRAVITY = 0u,
    TOP_FRONT_LEFT_CORNER = 1u,
    TOP_FRONT_RIGHT_CORNER = 2u,
    BOTTOM_REAR_RIGHT_CORNER = 3u,
    BOTTOM_REAR_LEFT_CORNER = 4u,
    CENTER_OF_TOP_FRONT_EDGE = 5u,
    CENTER_OF_RIGHT_EDGE = 6u,
    CENTER_OF_BOTTOM_REAR_EDGE = 7u,
    CENTER_OF_LEFT_EDGE = 8u,
    BOX_CENTER = 9u,
    INVALID = 255u,
  };


  typedef boost::shared_ptr< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> const> ConstPtr;

}; // struct TrackedProperties_

typedef ::ibeo_msgs::TrackedProperties_<std::allocator<void> > TrackedProperties;

typedef boost::shared_ptr< ::ibeo_msgs::TrackedProperties > TrackedPropertiesPtr;
typedef boost::shared_ptr< ::ibeo_msgs::TrackedProperties const> TrackedPropertiesConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ibeo_msgs::TrackedProperties_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ibeo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ibeo_msgs': ['/home/kratos/OFRN/catkin_ws/src/ibeo_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9ae8fca1e3b18cb6789277ec4d93701";
  }

  static const char* value(const ::ibeo_msgs::TrackedProperties_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9ae8fca1e3b18cbULL;
  static const uint64_t static_value2 = 0x6789277ec4d93701ULL;
};

template<class ContainerAllocator>
struct DataType< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ibeo_msgs/TrackedProperties";
  }

  static const char* value(const ::ibeo_msgs::TrackedProperties_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 object_age\n\
uint16 hidden_status_age\n\
uint8 object_phase\n\
uint8 dynamic_property\n\
uint16 relative_time_of_measure\n\
Point2Di position_closest_point\n\
Point2Di relative_velocity\n\
Point2Dui relative_velocity_sigma\n\
uint8 classification\n\
uint16 classification_age\n\
Point2Di object_box_size\n\
Point2Dui object_box_size_sigma\n\
int16 object_box_orientation\n\
uint16 object_box_orientation_sigma\n\
uint8 tracking_point_location\n\
Point2Di tracking_point_coordinate\n\
Point2Dui tracking_point_coordinate_sigma\n\
Point2Di velocity\n\
Point2Dui velocity_sigma\n\
Point2Di acceleration\n\
Point2Dui acceleration_sigma\n\
int16 yaw_rate\n\
uint16 yaw_rate_sigma\n\
uint8 number_of_contour_points\n\
ContourPointSigma[] contour_point_list\n\
\n\
# object_phase values\n\
uint8 INITIALIZATION_PHASE=0\n\
uint8 TRACKING_PHASE=1\n\
\n\
# dynamic_property values\n\
uint8 DYNAMIC_AND_MOVING=0\n\
uint8 DYNAMIC_AND_STOPPED=1\n\
uint8 A_PRIORI_STATIONARY=2\n\
\n\
# classification values\n\
uint8 UNCLASSIFIED=0\n\
uint8 UNKNOWN_SMALL=1\n\
uint8 UNKNOWN_BIG=2\n\
uint8 PEDESTRIAN=3\n\
uint8 BIKE=4\n\
uint8 CAR=5\n\
uint8 TRUCK=6\n\
uint8 OVER_DRIVABLE=10\n\
uint8 UNDER_DRIVABLE=11\n\
\n\
# tracking_point_location values\n\
uint8 CENTER_OF_GRAVITY=0\n\
uint8 TOP_FRONT_LEFT_CORNER=1\n\
uint8 TOP_FRONT_RIGHT_CORNER=2\n\
uint8 BOTTOM_REAR_RIGHT_CORNER=3\n\
uint8 BOTTOM_REAR_LEFT_CORNER=4\n\
uint8 CENTER_OF_TOP_FRONT_EDGE=5\n\
uint8 CENTER_OF_RIGHT_EDGE=6\n\
uint8 CENTER_OF_BOTTOM_REAR_EDGE=7\n\
uint8 CENTER_OF_LEFT_EDGE=8\n\
uint8 BOX_CENTER=9\n\
uint8 INVALID=255\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/Point2Di\n\
int16 x\n\
int16 y\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/Point2Dui\n\
uint16 x\n\
uint16 y\n\
\n\
================================================================================\n\
MSG: ibeo_msgs/ContourPointSigma\n\
int16 x\n\
int16 y\n\
uint8 x_sigma\n\
uint8 y_sigma\n\
";
  }

  static const char* value(const ::ibeo_msgs::TrackedProperties_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_age);
      stream.next(m.hidden_status_age);
      stream.next(m.object_phase);
      stream.next(m.dynamic_property);
      stream.next(m.relative_time_of_measure);
      stream.next(m.position_closest_point);
      stream.next(m.relative_velocity);
      stream.next(m.relative_velocity_sigma);
      stream.next(m.classification);
      stream.next(m.classification_age);
      stream.next(m.object_box_size);
      stream.next(m.object_box_size_sigma);
      stream.next(m.object_box_orientation);
      stream.next(m.object_box_orientation_sigma);
      stream.next(m.tracking_point_location);
      stream.next(m.tracking_point_coordinate);
      stream.next(m.tracking_point_coordinate_sigma);
      stream.next(m.velocity);
      stream.next(m.velocity_sigma);
      stream.next(m.acceleration);
      stream.next(m.acceleration_sigma);
      stream.next(m.yaw_rate);
      stream.next(m.yaw_rate_sigma);
      stream.next(m.number_of_contour_points);
      stream.next(m.contour_point_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackedProperties_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ibeo_msgs::TrackedProperties_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ibeo_msgs::TrackedProperties_<ContainerAllocator>& v)
  {
    s << indent << "object_age: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.object_age);
    s << indent << "hidden_status_age: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.hidden_status_age);
    s << indent << "object_phase: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.object_phase);
    s << indent << "dynamic_property: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dynamic_property);
    s << indent << "relative_time_of_measure: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.relative_time_of_measure);
    s << indent << "position_closest_point: ";
    s << std::endl;
    Printer< ::ibeo_msgs::Point2Di_<ContainerAllocator> >::stream(s, indent + "  ", v.position_closest_point);
    s << indent << "relative_velocity: ";
    s << std::endl;
    Printer< ::ibeo_msgs::Point2Di_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_velocity);
    s << indent << "relative_velocity_sigma: ";
    s << std::endl;
    Printer< ::ibeo_msgs::Point2Dui_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_velocity_sigma);
    s << indent << "classification: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.classification);
    s << indent << "classification_age: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.classification_age);
    s << indent << "object_box_size: ";
    s << std::endl;
    Printer< ::ibeo_msgs::Point2Di_<ContainerAllocator> >::stream(s, indent + "  ", v.object_box_size);
    s << indent << "object_box_size_sigma: ";
    s << std::endl;
    Printer< ::ibeo_msgs::Point2Dui_<ContainerAllocator> >::stream(s, indent + "  ", v.object_box_size_sigma);
    s << indent << "object_box_orientation: ";
    Printer<int16_t>::stream(s, indent + "  ", v.object_box_orientation);
    s << indent << "object_box_orientation_sigma: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.object_box_orientation_sigma);
    s << indent << "tracking_point_location: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tracking_point_location);
    s << indent << "tracking_point_coordinate: ";
    s << std::endl;
    Printer< ::ibeo_msgs::Point2Di_<ContainerAllocator> >::stream(s, indent + "  ", v.tracking_point_coordinate);
    s << indent << "tracking_point_coordinate_sigma: ";
    s << std::endl;
    Printer< ::ibeo_msgs::Point2Dui_<ContainerAllocator> >::stream(s, indent + "  ", v.tracking_point_coordinate_sigma);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::ibeo_msgs::Point2Di_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "velocity_sigma: ";
    s << std::endl;
    Printer< ::ibeo_msgs::Point2Dui_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity_sigma);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::ibeo_msgs::Point2Di_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "acceleration_sigma: ";
    s << std::endl;
    Printer< ::ibeo_msgs::Point2Dui_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration_sigma);
    s << indent << "yaw_rate: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "yaw_rate_sigma: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.yaw_rate_sigma);
    s << indent << "number_of_contour_points: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.number_of_contour_points);
    s << indent << "contour_point_list[]" << std::endl;
    for (size_t i = 0; i < v.contour_point_list.size(); ++i)
    {
      s << indent << "  contour_point_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ibeo_msgs::ContourPointSigma_<ContainerAllocator> >::stream(s, indent + "    ", v.contour_point_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IBEO_MSGS_MESSAGE_TRACKEDPROPERTIES_H
